#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef GXSTANDARDCLASSES_SWIFT_H
#define GXSTANDARDCLASSES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Dispatch;
@import Foundation;
@import GXFoundation;
@import GXObjectsModel;
@import ObjectiveC;
@import YAJL;
#endif

#import <GXStandardClasses/GXStandardClasses.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GXStandardClasses",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



SWIFT_CLASS_NAMED("GXCryptoBaseType")
@interface GXCryptoBaseType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXCryptoAsymmetricEncrypt")
@interface GXCryptoAsymmetricEncrypt : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17GXStandardClasses19GXCryptoCertificate")
@interface GXCryptoCertificate : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSString;

SWIFT_CLASS("_TtC17GXStandardClasses13GXCryptoError")
@interface GXCryptoError : NSObject
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull desc;
- (nonnull instancetype)initWithCode:(NSInteger)code description:(NSString * _Nonnull)desc OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)cryptoErrorFromNSError:(NSError * _Nonnull)error SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXCryptoError (SWIFT_EXTENSION(GXStandardClasses))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoError_ExecutionOK;)
+ (GXCryptoError * _Nonnull)GXCryptoError_ExecutionOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoError_NotImplemented;)
+ (GXCryptoError * _Nonnull)GXCryptoError_NotImplemented SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_WrongInputString;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_WrongInputString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_InvalidAlgorithm;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_InvalidAlgorithm SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_UnsupportedKey;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_UnsupportedKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_KeyIsRequired;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_KeyIsRequired SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_InvalidKey;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_InvalidKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoSymmetricError_InvalidaKeyLength;)
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricError_InvalidaKeyLength SWIFT_WARN_UNUSED_RESULT;
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricErrorTemplate_CouldNotPerformOperationWithStatus:(NSInteger)status SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoSymmetricError_UnsupportedCertificateType;)
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricError_UnsupportedCertificateType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoSymmetricError_CertificateFileNotFound;)
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricError_CertificateFileNotFound SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_MissingPublicKey;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_MissingPublicKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_MissingPrivateKey;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_MissingPrivateKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_AlgorithmNotSupported;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_AlgorithmNotSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_CouldNotEncrypt;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_CouldNotEncrypt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_CouldNotDecrypt;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_CouldNotDecrypt SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17GXStandardClasses12GXCryptoHash")
@interface GXCryptoHash : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses21GXCryptoHashAlgorithm")
@interface GXCryptoHashAlgorithm : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17GXStandardClasses24GXCryptoSymmetricEncrypt")
@interface GXCryptoSymmetricEncrypt : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses37GXCryptoSymmetricEncryptBaseAlgorithm")
@interface GXCryptoSymmetricEncryptBaseAlgorithm : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses39GXCryptoSymmetricEncryptAES128Algorithm")
@interface GXCryptoSymmetricEncryptAES128Algorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses39GXCryptoSymmetricEncryptAES192Algorithm")
@interface GXCryptoSymmetricEncryptAES192Algorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses39GXCryptoSymmetricEncryptAES256Algorithm")
@interface GXCryptoSymmetricEncryptAES256Algorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17GXStandardClasses36GXCryptoSymmetricEncryptDESAlgorithm")
@interface GXCryptoSymmetricEncryptDESAlgorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses42GXCryptoSymmetricEncryptTripleDESAlgorithm")
@interface GXCryptoSymmetricEncryptTripleDESAlgorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses21GXDataStoreHelperBase")
@interface GXDataStoreHelperBase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GXEmbeddedModelObject;

SWIFT_CLASS("_TtC17GXStandardClasses21GXDirectoryCollection")
@interface GXDirectoryCollection : GXObjectCollection
- (id _Nullable)createItemInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17GXStandardClasses16GXFileCollection")
@interface GXFileCollection : GXObjectCollection
- (id _Nullable)createItemInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end

@class WKTGeometry;

SWIFT_PROTOCOL_NAMED("GXGeography")
@protocol GXGeography <NSObject>
+ (WKTGeometry * _Nullable)fromWKT:(NSString * _Nonnull)WKTString SWIFT_WARN_UNUSED_RESULT;
+ (WKTGeometry * _Nullable)geographyFromArguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toWKT SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (CLLocationDistance)distanceFromGeography:(id <GXGeography> _Nonnull)fromGeography SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXHttpClient (SWIFT_EXTENSION(GXStandardClasses)) <GXDataTypeWithProperties>
- (id _Nonnull)valueForPropertyWithName:(NSString * _Nonnull)propName SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nonnull)value forPropertyName:(NSString * _Nonnull)propName;
@end



SWIFT_CLASS("_TtC17GXStandardClasses13GXHttpRequest")
@interface GXHttpRequest : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class NSMutableURLRequest;
@protocol GXModelObject;

SWIFT_CLASS("_TtC17GXStandardClasses19GXHttpRequestHelper")
@interface GXHttpRequestHelper : NSObject
+ (NSMutableURLRequest * _Nonnull)mutableURLRequestForURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use mutableURLRequest(for:,modelObject:) instead");
+ (NSMutableURLRequest * _Nonnull)mutableURLRequestForURL:(NSURL * _Nonnull)url modelObject:(id <GXModelObject> _Nullable)modelObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses11GXImageUtil")
@interface GXImageUtil : NSObject
+ (NSInteger)getImageWidth:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getImageHeight:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getFileSize:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)resize:(NSString * _Nonnull)imageStr :(NSInteger)width :(NSInteger)height :(BOOL)keepAspect SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)scale:(NSString * _Nonnull)imageStr :(NSInteger)percent SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)rotate:(NSString * _Nonnull)imageStr :(NSInteger)angle SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)crop:(NSString * _Nonnull)imageStr :(NSInteger)left :(NSInteger)top :(NSInteger)width :(NSInteger)height SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)flipHorizontally:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)flipVertically:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class GXDBManager;

@interface GXModel (SWIFT_EXTENSION(GXStandardClasses))
@property (nonatomic, readonly, strong) GXDBManager * _Nullable dbManager;
@property (nonatomic, readonly, strong) id <GXEmbeddedModelObject> _Nullable embeddedModelObject;
@end


@interface GXObjectCollection (SWIFT_EXTENSION(GXStandardClasses))
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)items;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName;
@end


@class GXApplicationModel;
@class NSBundle;

@interface GXOfflineHelper (SWIFT_EXTENSION(GXStandardClasses))
/// Returns true if isEmbeddedApplication == true and main connectivitySupport == .offline, false otherwise
+ (BOOL)isOfflineAppWithAppModel:(GXApplicationModel * _Nullable)appModel SWIFT_WARN_UNUSED_RESULT;
/// #deprecated: 2022-02-08: trunk; #to-remove: ??
+ (Class _Nullable)classFromString:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use class(from:for:) instead");
+ (Class _Nullable)classFromString:(NSString * _Nonnull)name forEmbeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)embeddedModelObject SWIFT_WARN_UNUSED_RESULT;
+ (Class _Nullable)classFromString:(NSString * _Nonnull)name forEmbeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject fromBundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
+ (SEL _Nullable)selectorFromMethodName:(NSString * _Nonnull)methodBaseName parametersCount:(NSUInteger)parCount SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("GXOfflineThread")
@interface GXOfflineThread : NSThread
@property (nonatomic, readonly, strong) GXModel * _Nonnull gxThreadEmbeddedModel;
- (nullable instancetype)initWithModelObject:(id <GXModelObject> _Nonnull)modelObject handler:(void (^ _Nonnull)(GXModel * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
- (void)main;
@property (nonatomic, readonly, strong) GXModel * _Nullable gxCurrentContextModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXOfflineThread (SWIFT_EXTENSION(GXStandardClasses))
/// Executes the given handler inside a GXOfflineThread, creating one if the current thread is not an GXOfflineThread.
/// \param modelObject model object source of the GXModel passed to handler and completion.
///
/// \param qos quality of service used to start a new GXOfflineThread if needed.
///
/// \param keepErrorHandler if true and a new GXOfflineThread is created, gxErrorHandler is shared from the current thread.
///
/// \param handler block to be executed inside a GXOfflineThread.
///
/// \param completionQueue if not nil, completion is called on the on the given queue, otherwise it’s called on the GXOfflineThread or the current thread if there was a validation error.
///
/// \param completion block to be called after handler has completed execution inside a GXOfflineThread.
///
+ (void)executeOnNewOfflineThreadIfNeededForModelObject:(id <GXModelObject> _Nonnull)modelObject qos:(enum NSQualityOfService)qos keepErrorHandler:(BOOL)keepErrorHandler handler:(void (^ _Nonnull)(GXModel * _Nonnull))handler completionQueue:(dispatch_queue_t _Nullable)completionQueue completion:(void (^ _Nonnull)(GXModel * _Nullable, NSError * _Nullable))completion;
/// Synchronically executes the given handler inside a GXOfflineThread, creating one if the current thread is not an GXOfflineThread and waiting. Must not be called from the main thread.
/// \param modelObject model object source of the GXModel passed to handler.
///
/// \param qos quality of service used to start a new GXOfflineThread if needed.
///
/// \param keepErrorHandler if true and a new GXOfflineThread is created, gxErrorHandler is shared from the current thread.
///
/// \param handler block to be executed inside a GXOfflineThread.
///
+ (BOOL)syncExecuteOnNewOfflineThreadIfNeededForModelObject:(id <GXModelObject> _Nonnull)modelObject qos:(enum NSQualityOfService)qos keepErrorHandler:(BOOL)keepErrorHandler handler:(void (^ _Nonnull)(GXModel * _Nonnull))handler error:(NSError * _Nullable * _Nullable)error;
@end


@interface GXOfflineThread (SWIFT_EXTENSION(GXStandardClasses)) <GXEmbeddedModelObject>
@property (nonatomic, readonly, strong) GXModel * _Nullable gxModel;
@property (nonatomic, readonly, strong) GXModel * _Nullable gxEmbeddedModel;
@end



SWIFT_CLASS_NAMED("GXProcedureExecutionOptions")
@interface GXProcedureExecutionOptions : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Indicates the timeout (in seconds) for the HTTP request of Online Procedures
/// Return 0 to use iOS’s default HTTP Request timeout
@property (nonatomic) NSTimeInterval procedureHttpRequestTimeout;
/// This options is used when there is a security check failure. Default to true
/// Return false if you don’t want to retry. The procedure call action will be terminated with error.
@property (nonatomic) BOOL shouldRetryOnSecurityCheckFailure;
/// Indicates if last parameter out Messages (if any) should be handled automatically, displaing messages to the user, and call action terminated with error if there is any massage with Type = Error. Default to true
/// Return false if you don’t want this automatic behaviour.
@property (nonatomic) BOOL shouldProcessMessagesOutput;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@class GXProcedure;
@class GXProcedureModel;

@interface GXProcedureHelper (SWIFT_EXTENSION(GXStandardClasses))
+ (SWIFT_METATYPE(GXProcedure) _Nullable)gxOfflineProcedureClassForProcedureName:(NSString * _Nonnull)procedureName modelObject:(id <GXModelObject> _Nonnull)modelObject SWIFT_WARN_UNUSED_RESULT;
+ (SWIFT_METATYPE(GXProcedure) _Nullable)gxOfflineProcedureClassForProcedureModel:(GXProcedureModel * _Nonnull)procModel SWIFT_WARN_UNUSED_RESULT;
+ (SWIFT_METATYPE(GXProcedure) _Nullable)gxOfflineProcedureClassForProcedureName:(NSString * _Nonnull)procedureName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use gxOfflineProcedureClass(forProcedureName:modelObject:) instead");
+ (NSArray * _Nonnull)executeOfflineProcedure:(SWIFT_METATYPE(GXProcedure) _Nonnull)gxProcClass withParameters:(NSArray * _Nullable)gxProcParams SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use executeOfflineProcedureInstance(_:from:withParameters:) instead");
+ (NSArray * _Nonnull)executeOfflineProcedureInstance:(GXProcedure * _Nonnull)gxProc withParameters:(NSArray * _Nullable)gxProcParams SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use executeOfflineProcedureInstance(_:from:withParameters:) instead");
@end

@protocol GXInheritedConnectivitySupportResolver;

SWIFT_CLASS_NAMED("GXProcedureHelperExecutionOptions")
@interface GXProcedureHelperExecutionOptions : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) id <GXInheritedConnectivitySupportResolver> _Nullable connectivitySupportResolver;
@property (nonatomic, strong) GXProcedureExecutionOptions * _Nullable executionOptions;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("GXProcedureObjCOptionals")
@protocol GXProcedureObjCOptionals
@optional
- (NSArray * _Nonnull)execute:(NSArray * _Nullable)params;
@end




@interface GXReport (SWIFT_EXTENSION(GXStandardClasses))
- (void)cleanup;
@end






@protocol GXEntityDataKey;
@protocol GXBCSDTDataProtocol;

SWIFT_CLASS("_TtC17GXStandardClasses21GXSilentTrnCollection")
@interface GXSilentTrnCollection : GXObjectCollection <GXBCRootSDTDataCollectionProtocol>
- (void)bcInsertWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)bcUpdateWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)bcInsertOrUpdateWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)bcDeleteWithCompletion:(void (^ _Nonnull)(void))completion;
@property (nonatomic, readonly) GXConnectivitySupportType bcConnectivitySupport;
- (id <GXBCSDTDataProtocol> _Nonnull)bcGetItemByKey:(id <GXEntityDataKey> _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)bcRemoveItemByKey:(id <GXEntityDataKey> _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end



@class NSNumber;
@class NSDate;

SWIFT_CLASS_NAMED("GXutil")
@interface GXutil : NSObject
+ (void)msgStatus:(NSString * _Nonnull)msg;
/// iif() function
+ (id _Nonnull)gxiif:(NSNumber * _Nonnull)boolean op1:(id _Nonnull)op1 op2:(id _Nonnull)op2 SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)charToDateREST:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)boolToStr:(NSNumber * _Nonnull)val SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formatChar:(NSString * _Nonnull)str picture:(NSString * _Nonnull)picture SWIFT_WARN_UNUSED_RESULT;
/// Gets the current language code
+ (NSString * _Nonnull)getLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)dateFormatForCurrentLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxDtoC:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxTtoC:(NSDate * _Nonnull)dateTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxTtoC:(NSDate * _Nonnull)dateTime dayDigits:(NSNumber * _Nonnull)dayDigits SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxTtoC:(NSDate * _Nonnull)dateTime dayDigits:(NSNumber * _Nonnull)dayDigits hourDigits:(NSNumber * _Nonnull)hourDigits SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)gxCtoD:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)gxCtoT:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nonnull)colorValueFromRed:(NSNumber * _Nonnull)red green:(NSNumber * _Nonnull)green blue:(NSNumber * _Nonnull)blue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXutil (SWIFT_EXTENSION(GXStandardClasses))
+ (NSString * _Nonnull)newBlobRelativeFilePathForURLString:(NSString * _Nonnull)urlStr SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXutil (SWIFT_EXTENSION(GXStandardClasses))
/// Returns a random number between 0.0 and 1.0
+ (NSNumber * _Nonnull)impl_random SWIFT_WARN_UNUSED_RESULT;
/// Sets the seed for the random number generators
+ (NSNumber * _Nonnull)impl_rseed:(NSNumber * _Nonnull)seed SWIFT_WARN_UNUSED_RESULT;
/// Sleep time in seconds
+ (NSNumber * _Nonnull)impl_sleep:(NSNumber * _Nonnull)secs SWIFT_WARN_UNUSED_RESULT;
/// int() function
+ (NSNumber * _Nonnull)impl_gxInt:(NSNumber * _Nonnull)num SWIFT_WARN_UNUSED_RESULT;
/// ToFormattedString()
+ (NSString * _Nonnull)impl_formatNumber:(NSNumber * _Nullable)num picture:(NSString * _Nonnull)picture numberHasDecimals:(BOOL)hasDecimals SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nonnull)dynamicCompare:(id _Nonnull)left operator:(NSString * _Nonnull)op with:(id _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXutil (SWIFT_EXTENSION(GXStandardClasses))
+ (NSInteger)colorValueFromR:(NSInteger)red G:(NSInteger)green B:(NSInteger)blue SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17GXStandardClasses25GxSilentTrnGridCollection")
@interface GxSilentTrnGridCollection : GXSilentTrnCollection
- (void)addItem:(id _Nonnull)item atIndex:(NSInteger)index;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(GXStandardClasses))
- (NSNumber * _Nonnull)gxUnicodeValue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxFromUnicodeValue:(NSNumber * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSThread (SWIFT_EXTENSION(GXStandardClasses))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXOfflineThread * _Nullable gxOfflineCurrent;)
+ (GXOfflineThread * _Nullable)gxOfflineCurrent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isGXOfflineThread;)
+ (BOOL)isGXOfflineThread SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) GXModel * _Nullable gxCurrentContextEmbeddedModel;
@end



@interface WKTGeometry (SWIFT_EXTENSION(GXStandardClasses)) <YAJLCoding>
@property (nonatomic, readonly) id _Null_unspecified JSON;
@end


@interface WKTGeometry (SWIFT_EXTENSION(GXStandardClasses)) <GXGeography>
+ (WKTGeometry * _Nullable)fromWKT:(NSString * _Nonnull)WKTString SWIFT_WARN_UNUSED_RESULT;
+ (WKTGeometry * _Nullable)geographyFromArguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toWKT SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (CLLocationDistance)distanceFromGeography:(id <GXGeography> _Nonnull)fromGeography SWIFT_WARN_UNUSED_RESULT;
@end


@interface WKTPoint (SWIFT_EXTENSION(GXStandardClasses))
- (CLLocationDistance)distanceFromGeography:(id <GXGeography> _Nonnull)fromGeography SWIFT_WARN_UNUSED_RESULT;
@end


@interface WKTPoint (SWIFT_EXTENSION(GXStandardClasses)) <GXDataTypeWithProperties>
- (id _Nonnull)valueForPropertyWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nonnull)newValue forPropertyName:(NSString * _Nonnull)propertyName;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef GXSTANDARDCLASSES_SWIFT_H
#define GXSTANDARDCLASSES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Dispatch;
@import Foundation;
@import GXFoundation;
@import GXObjectsModel;
@import ObjectiveC;
@import YAJL;
#endif

#import <GXStandardClasses/GXStandardClasses.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GXStandardClasses",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)



SWIFT_CLASS_NAMED("GXCryptoBaseType")
@interface GXCryptoBaseType : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXCryptoAsymmetricEncrypt")
@interface GXCryptoAsymmetricEncrypt : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC17GXStandardClasses19GXCryptoCertificate")
@interface GXCryptoCertificate : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class NSString;

SWIFT_CLASS("_TtC17GXStandardClasses13GXCryptoError")
@interface GXCryptoError : NSObject
@property (nonatomic) NSInteger code;
@property (nonatomic, copy) NSString * _Nonnull desc;
- (nonnull instancetype)initWithCode:(NSInteger)code description:(NSString * _Nonnull)desc OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)cryptoErrorFromNSError:(NSError * _Nonnull)error SWIFT_METHOD_FAMILY(init);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXCryptoError (SWIFT_EXTENSION(GXStandardClasses))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoError_ExecutionOK;)
+ (GXCryptoError * _Nonnull)GXCryptoError_ExecutionOK SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoError_NotImplemented;)
+ (GXCryptoError * _Nonnull)GXCryptoError_NotImplemented SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_WrongInputString;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_WrongInputString SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_InvalidAlgorithm;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_InvalidAlgorithm SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_UnsupportedKey;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_UnsupportedKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_KeyIsRequired;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_KeyIsRequired SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoHashError_InvalidKey;)
+ (GXCryptoError * _Nonnull)GXCryptoHashError_InvalidKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoSymmetricError_InvalidaKeyLength;)
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricError_InvalidaKeyLength SWIFT_WARN_UNUSED_RESULT;
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricErrorTemplate_CouldNotPerformOperationWithStatus:(NSInteger)status SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoSymmetricError_UnsupportedCertificateType;)
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricError_UnsupportedCertificateType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoSymmetricError_CertificateFileNotFound;)
+ (GXCryptoError * _Nonnull)GXCryptoSymmetricError_CertificateFileNotFound SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_MissingPublicKey;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_MissingPublicKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_MissingPrivateKey;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_MissingPrivateKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_AlgorithmNotSupported;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_AlgorithmNotSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_CouldNotEncrypt;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_CouldNotEncrypt SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXCryptoError * _Nonnull GXCryptoAsymmetricError_CouldNotDecrypt;)
+ (GXCryptoError * _Nonnull)GXCryptoAsymmetricError_CouldNotDecrypt SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17GXStandardClasses12GXCryptoHash")
@interface GXCryptoHash : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses21GXCryptoHashAlgorithm")
@interface GXCryptoHashAlgorithm : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17GXStandardClasses24GXCryptoSymmetricEncrypt")
@interface GXCryptoSymmetricEncrypt : GXCryptoBaseType
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses37GXCryptoSymmetricEncryptBaseAlgorithm")
@interface GXCryptoSymmetricEncryptBaseAlgorithm : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses39GXCryptoSymmetricEncryptAES128Algorithm")
@interface GXCryptoSymmetricEncryptAES128Algorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses39GXCryptoSymmetricEncryptAES192Algorithm")
@interface GXCryptoSymmetricEncryptAES192Algorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses39GXCryptoSymmetricEncryptAES256Algorithm")
@interface GXCryptoSymmetricEncryptAES256Algorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17GXStandardClasses36GXCryptoSymmetricEncryptDESAlgorithm")
@interface GXCryptoSymmetricEncryptDESAlgorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses42GXCryptoSymmetricEncryptTripleDESAlgorithm")
@interface GXCryptoSymmetricEncryptTripleDESAlgorithm : GXCryptoSymmetricEncryptBaseAlgorithm
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses21GXDataStoreHelperBase")
@interface GXDataStoreHelperBase : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GXEmbeddedModelObject;

SWIFT_CLASS("_TtC17GXStandardClasses21GXDirectoryCollection")
@interface GXDirectoryCollection : GXObjectCollection
- (id _Nullable)createItemInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC17GXStandardClasses16GXFileCollection")
@interface GXFileCollection : GXObjectCollection
- (id _Nullable)createItemInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end

@class WKTGeometry;

SWIFT_PROTOCOL_NAMED("GXGeography")
@protocol GXGeography <NSObject>
+ (WKTGeometry * _Nullable)fromWKT:(NSString * _Nonnull)WKTString SWIFT_WARN_UNUSED_RESULT;
+ (WKTGeometry * _Nullable)geographyFromArguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toWKT SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (CLLocationDistance)distanceFromGeography:(id <GXGeography> _Nonnull)fromGeography SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXHttpClient (SWIFT_EXTENSION(GXStandardClasses)) <GXDataTypeWithProperties>
- (id _Nonnull)valueForPropertyWithName:(NSString * _Nonnull)propName SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nonnull)value forPropertyName:(NSString * _Nonnull)propName;
@end



SWIFT_CLASS("_TtC17GXStandardClasses13GXHttpRequest")
@interface GXHttpRequest : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class NSMutableURLRequest;
@protocol GXModelObject;

SWIFT_CLASS("_TtC17GXStandardClasses19GXHttpRequestHelper")
@interface GXHttpRequestHelper : NSObject
+ (NSMutableURLRequest * _Nonnull)mutableURLRequestForURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use mutableURLRequest(for:,modelObject:) instead");
+ (NSMutableURLRequest * _Nonnull)mutableURLRequestForURL:(NSURL * _Nonnull)url modelObject:(id <GXModelObject> _Nullable)modelObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17GXStandardClasses11GXImageUtil")
@interface GXImageUtil : NSObject
+ (NSInteger)getImageWidth:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getImageHeight:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getFileSize:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)resize:(NSString * _Nonnull)imageStr :(NSInteger)width :(NSInteger)height :(BOOL)keepAspect SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)scale:(NSString * _Nonnull)imageStr :(NSInteger)percent SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)rotate:(NSString * _Nonnull)imageStr :(NSInteger)angle SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)crop:(NSString * _Nonnull)imageStr :(NSInteger)left :(NSInteger)top :(NSInteger)width :(NSInteger)height SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)flipHorizontally:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)flipVertically:(NSString * _Nonnull)imageStr SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class GXDBManager;

@interface GXModel (SWIFT_EXTENSION(GXStandardClasses))
@property (nonatomic, readonly, strong) GXDBManager * _Nullable dbManager;
@property (nonatomic, readonly, strong) id <GXEmbeddedModelObject> _Nullable embeddedModelObject;
@end


@interface GXObjectCollection (SWIFT_EXTENSION(GXStandardClasses))
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)items;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName;
@end


@class GXApplicationModel;
@class NSBundle;

@interface GXOfflineHelper (SWIFT_EXTENSION(GXStandardClasses))
/// Returns true if isEmbeddedApplication == true and main connectivitySupport == .offline, false otherwise
+ (BOOL)isOfflineAppWithAppModel:(GXApplicationModel * _Nullable)appModel SWIFT_WARN_UNUSED_RESULT;
/// #deprecated: 2022-02-08: trunk; #to-remove: ??
+ (Class _Nullable)classFromString:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use class(from:for:) instead");
+ (Class _Nullable)classFromString:(NSString * _Nonnull)name forEmbeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)embeddedModelObject SWIFT_WARN_UNUSED_RESULT;
+ (Class _Nullable)classFromString:(NSString * _Nonnull)name forEmbeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject fromBundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
+ (SEL _Nullable)selectorFromMethodName:(NSString * _Nonnull)methodBaseName parametersCount:(NSUInteger)parCount SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("GXOfflineThread")
@interface GXOfflineThread : NSThread
@property (nonatomic, readonly, strong) GXModel * _Nonnull gxThreadEmbeddedModel;
- (nullable instancetype)initWithModelObject:(id <GXModelObject> _Nonnull)modelObject handler:(void (^ _Nonnull)(GXModel * _Nonnull))handler OBJC_DESIGNATED_INITIALIZER;
- (void)main;
@property (nonatomic, readonly, strong) GXModel * _Nullable gxCurrentContextModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXOfflineThread (SWIFT_EXTENSION(GXStandardClasses))
/// Executes the given handler inside a GXOfflineThread, creating one if the current thread is not an GXOfflineThread.
/// \param modelObject model object source of the GXModel passed to handler and completion.
///
/// \param qos quality of service used to start a new GXOfflineThread if needed.
///
/// \param keepErrorHandler if true and a new GXOfflineThread is created, gxErrorHandler is shared from the current thread.
///
/// \param handler block to be executed inside a GXOfflineThread.
///
/// \param completionQueue if not nil, completion is called on the on the given queue, otherwise it’s called on the GXOfflineThread or the current thread if there was a validation error.
///
/// \param completion block to be called after handler has completed execution inside a GXOfflineThread.
///
+ (void)executeOnNewOfflineThreadIfNeededForModelObject:(id <GXModelObject> _Nonnull)modelObject qos:(enum NSQualityOfService)qos keepErrorHandler:(BOOL)keepErrorHandler handler:(void (^ _Nonnull)(GXModel * _Nonnull))handler completionQueue:(dispatch_queue_t _Nullable)completionQueue completion:(void (^ _Nonnull)(GXModel * _Nullable, NSError * _Nullable))completion;
/// Synchronically executes the given handler inside a GXOfflineThread, creating one if the current thread is not an GXOfflineThread and waiting. Must not be called from the main thread.
/// \param modelObject model object source of the GXModel passed to handler.
///
/// \param qos quality of service used to start a new GXOfflineThread if needed.
///
/// \param keepErrorHandler if true and a new GXOfflineThread is created, gxErrorHandler is shared from the current thread.
///
/// \param handler block to be executed inside a GXOfflineThread.
///
+ (BOOL)syncExecuteOnNewOfflineThreadIfNeededForModelObject:(id <GXModelObject> _Nonnull)modelObject qos:(enum NSQualityOfService)qos keepErrorHandler:(BOOL)keepErrorHandler handler:(void (^ _Nonnull)(GXModel * _Nonnull))handler error:(NSError * _Nullable * _Nullable)error;
@end


@interface GXOfflineThread (SWIFT_EXTENSION(GXStandardClasses)) <GXEmbeddedModelObject>
@property (nonatomic, readonly, strong) GXModel * _Nullable gxModel;
@property (nonatomic, readonly, strong) GXModel * _Nullable gxEmbeddedModel;
@end



SWIFT_CLASS_NAMED("GXProcedureExecutionOptions")
@interface GXProcedureExecutionOptions : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Indicates the timeout (in seconds) for the HTTP request of Online Procedures
/// Return 0 to use iOS’s default HTTP Request timeout
@property (nonatomic) NSTimeInterval procedureHttpRequestTimeout;
/// This options is used when there is a security check failure. Default to true
/// Return false if you don’t want to retry. The procedure call action will be terminated with error.
@property (nonatomic) BOOL shouldRetryOnSecurityCheckFailure;
/// Indicates if last parameter out Messages (if any) should be handled automatically, displaing messages to the user, and call action terminated with error if there is any massage with Type = Error. Default to true
/// Return false if you don’t want this automatic behaviour.
@property (nonatomic) BOOL shouldProcessMessagesOutput;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@class GXProcedure;
@class GXProcedureModel;

@interface GXProcedureHelper (SWIFT_EXTENSION(GXStandardClasses))
+ (SWIFT_METATYPE(GXProcedure) _Nullable)gxOfflineProcedureClassForProcedureName:(NSString * _Nonnull)procedureName modelObject:(id <GXModelObject> _Nonnull)modelObject SWIFT_WARN_UNUSED_RESULT;
+ (SWIFT_METATYPE(GXProcedure) _Nullable)gxOfflineProcedureClassForProcedureModel:(GXProcedureModel * _Nonnull)procModel SWIFT_WARN_UNUSED_RESULT;
+ (SWIFT_METATYPE(GXProcedure) _Nullable)gxOfflineProcedureClassForProcedureName:(NSString * _Nonnull)procedureName SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use gxOfflineProcedureClass(forProcedureName:modelObject:) instead");
+ (NSArray * _Nonnull)executeOfflineProcedure:(SWIFT_METATYPE(GXProcedure) _Nonnull)gxProcClass withParameters:(NSArray * _Nullable)gxProcParams SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use executeOfflineProcedureInstance(_:from:withParameters:) instead");
+ (NSArray * _Nonnull)executeOfflineProcedureInstance:(GXProcedure * _Nonnull)gxProc withParameters:(NSArray * _Nullable)gxProcParams SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use executeOfflineProcedureInstance(_:from:withParameters:) instead");
@end

@protocol GXInheritedConnectivitySupportResolver;

SWIFT_CLASS_NAMED("GXProcedureHelperExecutionOptions")
@interface GXProcedureHelperExecutionOptions : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) id <GXInheritedConnectivitySupportResolver> _Nullable connectivitySupportResolver;
@property (nonatomic, strong) GXProcedureExecutionOptions * _Nullable executionOptions;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("GXProcedureObjCOptionals")
@protocol GXProcedureObjCOptionals
@optional
- (NSArray * _Nonnull)execute:(NSArray * _Nullable)params;
@end




@interface GXReport (SWIFT_EXTENSION(GXStandardClasses))
- (void)cleanup;
@end






@protocol GXEntityDataKey;
@protocol GXBCSDTDataProtocol;

SWIFT_CLASS("_TtC17GXStandardClasses21GXSilentTrnCollection")
@interface GXSilentTrnCollection : GXObjectCollection <GXBCRootSDTDataCollectionProtocol>
- (void)bcInsertWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)bcUpdateWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)bcInsertOrUpdateWithCompletion:(void (^ _Nonnull)(BOOL))completion;
- (void)bcDeleteWithCompletion:(void (^ _Nonnull)(void))completion;
@property (nonatomic, readonly) GXConnectivitySupportType bcConnectivitySupport;
- (id <GXBCSDTDataProtocol> _Nonnull)bcGetItemByKey:(id <GXEntityDataKey> _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (BOOL)bcRemoveItemByKey:(id <GXEntityDataKey> _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end



@class NSNumber;
@class NSDate;

SWIFT_CLASS_NAMED("GXutil")
@interface GXutil : NSObject
+ (void)msgStatus:(NSString * _Nonnull)msg;
/// iif() function
+ (id _Nonnull)gxiif:(NSNumber * _Nonnull)boolean op1:(id _Nonnull)op1 op2:(id _Nonnull)op2 SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)charToDateREST:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)boolToStr:(NSNumber * _Nonnull)val SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formatChar:(NSString * _Nonnull)str picture:(NSString * _Nonnull)picture SWIFT_WARN_UNUSED_RESULT;
/// Gets the current language code
+ (NSString * _Nonnull)getLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)dateFormatForCurrentLanguage SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxDtoC:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxTtoC:(NSDate * _Nonnull)dateTime SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxTtoC:(NSDate * _Nonnull)dateTime dayDigits:(NSNumber * _Nonnull)dayDigits SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxTtoC:(NSDate * _Nonnull)dateTime dayDigits:(NSNumber * _Nonnull)dayDigits hourDigits:(NSNumber * _Nonnull)hourDigits SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)gxCtoD:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)gxCtoT:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nonnull)colorValueFromRed:(NSNumber * _Nonnull)red green:(NSNumber * _Nonnull)green blue:(NSNumber * _Nonnull)blue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXutil (SWIFT_EXTENSION(GXStandardClasses))
+ (NSString * _Nonnull)newBlobRelativeFilePathForURLString:(NSString * _Nonnull)urlStr SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXutil (SWIFT_EXTENSION(GXStandardClasses))
/// Returns a random number between 0.0 and 1.0
+ (NSNumber * _Nonnull)impl_random SWIFT_WARN_UNUSED_RESULT;
/// Sets the seed for the random number generators
+ (NSNumber * _Nonnull)impl_rseed:(NSNumber * _Nonnull)seed SWIFT_WARN_UNUSED_RESULT;
/// Sleep time in seconds
+ (NSNumber * _Nonnull)impl_sleep:(NSNumber * _Nonnull)secs SWIFT_WARN_UNUSED_RESULT;
/// int() function
+ (NSNumber * _Nonnull)impl_gxInt:(NSNumber * _Nonnull)num SWIFT_WARN_UNUSED_RESULT;
/// ToFormattedString()
+ (NSString * _Nonnull)impl_formatNumber:(NSNumber * _Nullable)num picture:(NSString * _Nonnull)picture numberHasDecimals:(BOOL)hasDecimals SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nonnull)dynamicCompare:(id _Nonnull)left operator:(NSString * _Nonnull)op with:(id _Nonnull)right SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXutil (SWIFT_EXTENSION(GXStandardClasses))
+ (NSInteger)colorValueFromR:(NSInteger)red G:(NSInteger)green B:(NSInteger)blue SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17GXStandardClasses25GxSilentTrnGridCollection")
@interface GxSilentTrnGridCollection : GXSilentTrnCollection
- (void)addItem:(id _Nonnull)item atIndex:(NSInteger)index;
- (nonnull instancetype)initWithArray:(NSArray * _Nonnull)initialArray embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTypeName:(NSString * _Nullable)typeName embeddedModelObject:(id <GXEmbeddedModelObject> _Nonnull)modelObject OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(GXStandardClasses))
- (NSNumber * _Nonnull)gxUnicodeValue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)gxFromUnicodeValue:(NSNumber * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSThread (SWIFT_EXTENSION(GXStandardClasses))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXOfflineThread * _Nullable gxOfflineCurrent;)
+ (GXOfflineThread * _Nullable)gxOfflineCurrent SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isGXOfflineThread;)
+ (BOOL)isGXOfflineThread SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) GXModel * _Nullable gxCurrentContextEmbeddedModel;
@end



@interface WKTGeometry (SWIFT_EXTENSION(GXStandardClasses)) <YAJLCoding>
@property (nonatomic, readonly) id _Null_unspecified JSON;
@end


@interface WKTGeometry (SWIFT_EXTENSION(GXStandardClasses)) <GXGeography>
+ (WKTGeometry * _Nullable)fromWKT:(NSString * _Nonnull)WKTString SWIFT_WARN_UNUSED_RESULT;
+ (WKTGeometry * _Nullable)geographyFromArguments:(NSArray * _Nonnull)arguments SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toWKT SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)stringValue SWIFT_WARN_UNUSED_RESULT;
- (CLLocationDistance)distanceFromGeography:(id <GXGeography> _Nonnull)fromGeography SWIFT_WARN_UNUSED_RESULT;
@end


@interface WKTPoint (SWIFT_EXTENSION(GXStandardClasses))
- (CLLocationDistance)distanceFromGeography:(id <GXGeography> _Nonnull)fromGeography SWIFT_WARN_UNUSED_RESULT;
@end


@interface WKTPoint (SWIFT_EXTENSION(GXStandardClasses)) <GXDataTypeWithProperties>
- (id _Nonnull)valueForPropertyWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (void)setValue:(id _Nonnull)newValue forPropertyName:(NSString * _Nonnull)propertyName;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
