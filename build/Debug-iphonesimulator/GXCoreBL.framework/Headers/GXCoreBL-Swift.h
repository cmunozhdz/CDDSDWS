#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef GXCOREBL_SWIFT_H
#define GXCOREBL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import GXDataLayer;
@import GXFoundation;
@import GXStandardClasses;
@import ObjectiveC;
#endif

#import <GXCoreBL/GXCoreBL.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GXCoreBL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@protocol GXActionExternalObjectDescriptor;
@protocol GXActionHandler;
@class NSString;

SWIFT_CLASS("_TtC8GXCoreBL36GXActionExObjBaseMiniProgramsHandler")
@interface GXActionExObjBaseMiniProgramsHandler : GXActionExternalObjectHandler
+ (BOOL)handleActionExecutionUsingMethodHandlerSelectorNamePrefix SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXActionExObjMiniAppAPIHandler")
@interface GXActionExObjMiniAppAPIHandler : GXActionExObjBaseMiniProgramsHandler
- (void)gxActionExObjMethodHandler_Exit;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8GXCoreBL37GXActionExObjMiniProgramLoaderHandler") SWIFT_DEPRECATED_MSG("Use GXActionExObjMiniAppAPIHandler or GXActionExObjSuperAppsProvisioningHandler instead")
@interface GXActionExObjMiniProgramLoaderHandler : GXActionExObjBaseMiniProgramsHandler
- (void)gxActionExObjMethodHandler_Load:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_Exit;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXActionExObjSuperAppsMiniAppsHandler")
@interface GXActionExObjSuperAppsMiniAppsHandler : GXActionExObjBaseMiniProgramsHandler
- (void)gxActionExObjMethodHandler_Load:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetCached;
- (void)gxActionExObjMethodHandler_RemoveCached:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_ClearCached;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXActionExObjSuperAppsProvisioningHandler")
@interface GXActionExObjSuperAppsProvisioningHandler : GXActionExObjBaseMiniProgramsHandler
- (void)onFinishedExecutingWithError:(NSError * _Nullable)error;
- (void)cancelActionExecution;
- (void)gxActionExObjMethodHandler_ServerURL;
- (void)gxActionExObjMethodHandler_GetByText:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetByLocation:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetByTag:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetFeatured:(NSArray * _Nonnull)parameters;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


@protocol GXModelObject;
@class GXActionHandler;

@interface GXActionsFactory (SWIFT_EXTENSION(GXCoreBL))
+ (GXActionHandler * _Nonnull)newCancelActionHandlerWithUserInfo:(NSDictionary<GXActionHandlerUserInfoKey, id> * _Nullable)userInfo forModelObject:(id <GXModelObject> _Nonnull)modelObject SWIFT_WARN_UNUSED_RESULT;
+ (GXActionHandler * _Nonnull)dynamicObjectCallActionHandlerWithString:(NSString * _Nonnull)dynamicCallString userInfo:(NSDictionary<GXActionHandlerUserInfoKey, id> * _Nullable)userInfo forModelObject:(id <GXModelObject> _Nonnull)modelObject SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
@protocol GXAnalyticsService;
@protocol GXSDObjectLocator;

SWIFT_CLASS_NAMED("GXAnalyticsServiceHelper")
@interface GXAnalyticsServiceHelper : NSObject
+ (void)defaultSender:(id _Nullable)sender label:(NSString * _Nullable * _Nonnull)label value:(NSNumber * _Nullable * _Nonnull)value;
+ (void)defaultAnalyticsService:(id <GXAnalyticsService> _Nonnull)service trackViewFromObject:(id <GXSDObjectLocator> _Nonnull)object;
+ (void)defaultAnalyticsService:(id <GXAnalyticsService> _Nonnull)service trackEventName:(NSString * _Nonnull)name from:(id <GXSDObjectLocator> _Nonnull)object sender:(id _Nullable)sender;
+ (BOOL)shouldTrackEventName:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GXDomainInfo;

SWIFT_CLASS_NAMED("GXDomainExpressionEvaluatorHelper")
@interface GXDomainExpressionEvaluatorHelper : NSObject
+ (id _Nullable)evaluateConvertWithParameters:(NSArray * _Nonnull)parameters target:(GXDomainInfo * _Nonnull)target error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol GXActionParameterDescriptor;

@interface GXDynamicCallHelper (SWIFT_EXTENSION(GXCoreBL))
+ (NSString * _Nonnull)dynamicJsonLinkForDynamicObjectName:(NSString * _Nonnull)dynObjectName parameterValues:(NSArray * _Nonnull)parameterValues parameterDescriptors:(NSArray<id <GXActionParameterDescriptor>> * _Nonnull)parameterDescriptors SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8GXCoreBL26GXDynamicServicesURLHelper")
@interface GXDynamicServicesURLHelper : NSObject
/// Returns true if the embedded app has DynamicServicesURL enabled, false otherwise.
/// Embedded app is the main bundle associated GX application (i.e. Generated GX apps and GX Super-app, but not non GX Super-apps, KBN app and all other target).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL hasDynamicServicesURL;)
+ (BOOL)hasDynamicServicesURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL hasServicesURLConfigurationPanel;)
+ (BOOL)hasServicesURLConfigurationPanel SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the embedded app has DynamicServicesURL enabled and has a custom services URL config panel, false otherwise.
/// Embedded app is the main bundle associated GX application (i.e. Generated GX apps and GX Super-app, but not non GX Super-apps, KBN app and all other target).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable servicesURLConfigPanelName;)
+ (NSString * _Nullable)servicesURLConfigPanelName SWIFT_WARN_UNUSED_RESULT;
/// Returns true if hasDynamicServicesURL == true and the current services URL has not be validated (ie. user chaned services URL from setting app).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL needsShowServicesURLConfigurationPanel;)
+ (BOOL)needsShowServicesURLConfigurationPanel SWIFT_WARN_UNUSED_RESULT;
/// Saves the received URL string to user defaults
/// \param urlString the new services URL as a String
/// Should only be called when hasDynamicServicesURL == true.
/// The received urlString is stored as the current services URL, and saved as valid if it is.
///
+ (void)saveDynamicAppServicesURL:(NSString * _Nonnull)urlString;
/// Saves the storedServerURLString value to the UserDefaults, using the default server address from the Info.plist
///
/// returns:
/// Wether the services URL configuration panel must be shown or not
/// Should only be called when hasDynamicServicesURL == true.
+ (BOOL)saveValidDynamicAppServicesURLIfNeededWithDefaultServerAddress SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("GXEOClientInformation")
@interface GXEOClientInformation : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull osName;
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) NSInteger deviceType;
@property (nonatomic, readonly, copy) NSString * _Nonnull platformName;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationId;
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersionCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersionName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXEOClientSocket")
@interface GXEOClientSocket : NSObject <GXWebSocketHandlerDelegate>
@property (nonatomic, readonly) NSInteger status;
- (void)open:(NSString * _Nonnull)url;
- (void)close;
- (void)send:(NSString * _Nonnull)message;
- (void)success;
- (void)failed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXEOGlobalEvents")
@interface GXEOGlobalEvents : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
- (void)dispatchExteralObjectEvent:(NSString * _Nonnull)eventName withParameters:(NSArray * _Nullable)parameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXEOMiniApps")
@interface GXEOMiniApps : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
+ (void)exit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GXSDTData;
@class GXObjectCollection;

SWIFT_CLASS_NAMED("GXEOMiniAppsManager")
@interface GXEOMiniAppsManager : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
+ (void)loadMiniApp:(id <GXSDTData> _Nonnull)sdtData;
+ (GXObjectCollection * _Nonnull)getCached SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)removeCached:(NSString * _Nonnull)miniAppId :(NSInteger)miniAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)clearCached SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("GXEORuntime")
@interface GXEORuntime : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger environment;)
+ (NSInteger)environment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger exitCode;)
+ (NSInteger)exitCode SWIFT_WARN_UNUSED_RESULT;
+ (void)setExitCode:(NSInteger)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXEORuntime (SWIFT_EXTENSION(GXCoreBL))
@property (nonatomic, readonly) NSInteger environment;
@property (nonatomic) NSInteger exitCode;
@end


SWIFT_CLASS_NAMED("GXEOSuperAppProvisioning")
@interface GXEOSuperAppProvisioning : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull provisioningURL;)
+ (NSString * _Nonnull)provisioningURL SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull provisioningURL;
+ (GXObjectCollection * _Nonnull)getByText:(NSString * _Nonnull)text :(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectCollection * _Nonnull)getByLocation:(NSString * _Nonnull)center :(NSInteger)radius :(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectCollection * _Nonnull)getByTag:(NSString * _Nonnull)tag :(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectCollection * _Nonnull)getFeatured:(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

@interface GXEOiOSPermissions (SWIFT_EXTENSION(GXCoreBL))
@property (nonatomic, readonly) GXAuthorizationStatusType userTrackingPermissionStatusNumber;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) GXAuthorizationStatusType userTrackingPermissionStatus;)
+ (GXAuthorizationStatusType)userTrackingPermissionStatus SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nullable)requestUserTrackingPermission;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL35GXEOiOSPermissionsLocationOptionals_")
@protocol GXEOiOSPermissionsLocationOptionals
@optional
/// Calls requestWhenInUseAuthorization on an internal instance of CLLocationManager
+ (void)gxRequestWhenInUseAuthorization;
+ (void)gxRequestWhenInUseAuthorizationWithCompletionHandler:(void (^ _Nullable)(void))withCompletionHandler;
/// Calls requestAlwaysAuthorization on an internal instance of CLLocationManager
+ (void)gxRequestAlwaysAuthorization;
+ (void)gxRequestAlwaysAuthorizationWithCompletionHandler:(void (^ _Nullable)(void))withCompletionHandler;
@end


SWIFT_CLASS_NAMED("GXExtensionLibraryContext")
@interface GXExtensionLibraryContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("GXExtensionLibraryProtocol")
@protocol GXExtensionLibraryProtocol <NSObject>
/// Initialize the provider with the application’s launch options
- (void)initializeExtensionLibraryWithContext:(GXExtensionLibraryContext * _Nonnull)context;
@end

@protocol GXExpressionMethod;
@protocol GXEntityData;
@protocol GXActionHandlerContext;

SWIFT_CLASS_NAMED("GXGeographyExpressionEvaluatorHelper")
@interface GXGeographyExpressionEvaluatorHelper : NSObject
+ (id _Nullable)evaluateGeographyMethodValueWithExpression:(id <GXExpressionMethod> _Nonnull)expression withEntityData:(id <GXEntityData> _Nullable)entityData actionHandlerContext:(id <GXActionHandlerContext> _Nullable)context target:(id _Nonnull)target arguments:(NSArray * _Nonnull)arguments completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion asyncAllowed:(BOOL)asyncAllowed handledSync:(GXOptionalBoolean * _Nonnull)handledSync;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("GXLocalNotificationsProviderAppDelegateProtocol")
@protocol GXLocalNotificationsProviderAppDelegateProtocol <NSObject>
- (void)onDidReceiveLocalNotification:(id _Nonnull)localNotification SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier for:(id _Nonnull)localNotification withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=9.0,deprecated=10.0);
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier for:(id _Nonnull)localNotification completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end

typedef SWIFT_ENUM(NSInteger, GXLocationAccuracy, open) {
  GXLocationAccuracyDefault = 0,
  GXLocationAccuracyBest = -1,
  GXLocationAccuracyBestForNavigation = -2,
  GXLocationAccuracyNearestTenMeters = -3,
  GXLocationAccuracyHundredMeters = -4,
  GXLocationAccuracyKilometer = -5,
  GXLocationAccuracyThreeKilomters = -6,
  GXLocationAccuracyReduced = -7,
};

typedef SWIFT_ENUM(NSInteger, GXLocationAccuracyAutorization, open) {
  GXLocationAccuracyAutorizationUnknown = 0,
  GXLocationAccuracyAutorizationRestricted = 1,
  GXLocationAccuracyAutorizationFull = 2,
};


@interface GXLocationManager (SWIFT_EXTENSION(GXCoreBL))
@property (nonatomic, readonly) enum GXLocationAccuracyAutorization currentLocationAccuracyAuthorizationStatus;
+ (enum GXLocationAccuracyAutorization)convertFromCLAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuth SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationAccuracy)convertCLLocationAccuracyFromGXLocationAccuracy:(NSInteger)accuracy SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8GXCoreBL23GXLocationManagerHelper")
@interface GXLocationManagerHelper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("GXMapsProviderProtocol")
@protocol GXMapProviderProtocol <NSObject>
/// The maps API identifier (must be the same value as in “Maps for Apple API” GX Property)
@property (nonatomic, readonly, copy) NSString * _Nonnull mapsApiIdentifier;
@optional
/// Indicates wheather the provider needs to have it’s initializer method call before being used. Not impelemented means false
@property (nonatomic, readonly) BOOL initializationIsRequiered;
/// Initializes the provider. This method is called before retrieving a class from the provider if it’s indicated
- (void)initializeProvider;
@required
/// Returns the class that implements the indicated control type
- (Class _Nullable)getClassForControlType:(NSString * _Nonnull)controlType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXMapsProvidersManager")
@interface GXMapsProvidersManager : NSObject
+ (void)register:(id <GXMapProviderProtocol> _Nonnull)provider forIdentifier:(NSString * _Nonnull)identifier;
+ (Class _Nullable)getClassWithControlType:(NSString * _Nonnull)controlType forProviderId:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (Class _Nullable)getClassWithControlType:(NSString * _Nonnull)controlType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXMiniProgramLoader")
@interface GXMiniProgramLoader : NSObject
+ (void)exitFromMiniProgram;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXMultimediaPropertiesHelper")
@interface GXMultimediaPropertiesHelper : NSObject
+ (BOOL)tryGetValueForDataType:(GXDataType)dataType propertyLowercaseName:(NSString * _Nonnull)lowercasePropertyName targetValue:(NSString * _Nonnull)targetValue returnValue:(id _Nonnull * _Nonnull)retValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXMultimediaPropertiesHelper (SWIFT_EXTENSION(GXCoreBL))
+ (GXExpressionThreadRequirement)expressionThreadRequirementForDataType:(GXDataType)dataType propertyName:(NSString * _Nonnull)lowercasePropertyName SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("GXRandomNonceGenerator")
@interface GXRandomNonceGenerator : NSObject
+ (NSString * _Nonnull)randomNonceString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_PROTOCOL_NAMED("GXRemoteNotificationsProviderAppDelegateProtocol")
@protocol GXRemoteNotificationsProviderAppDelegateProtocol <NSObject>
- (void)onDidRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)devToken;
- (void)onDidFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)onDidReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (void)onDidReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=9.0,deprecated=10.0);
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end


SWIFT_CLASS_NAMED("GXUCMapKitMapsProvider")
@interface GXUCMapKitMapsProvider : NSObject <GXMapProviderProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull mapsApiIdentifier;
- (Class _Nullable)getClassForControlType:(NSString * _Nonnull)controlType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@protocol GXUNNotificationRequest;

SWIFT_PROTOCOL("_TtP8GXCoreBL16GXUNNotification_")
@protocol GXUNNotification <NSObject>
@property (nonatomic, readonly, copy) NSDate * _Nullable date;
@property (nonatomic, readonly, strong) id <GXUNNotificationRequest> _Nonnull request;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL29GXUNNotificationActionHandler_")
@protocol GXUNNotificationActionHandler <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull eventParamters;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL23GXUNNotificationContent_")
@protocol GXUNNotificationContent <NSObject>
@property (nonatomic, readonly, strong) NSNumber * _Nullable badge;
@property (nonatomic, readonly, copy) NSString * _Nullable body;
@property (nonatomic, readonly, copy) NSString * _Nullable categoryIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic, readonly, copy) NSString * _Nullable threadIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull userInfo;
- (id <GXUNNotificationActionHandler> _Nullable)actionHandlerFor:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL23GXUNNotificationRequest_")
@protocol GXUNNotificationRequest <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, readonly, strong) id <GXUNNotificationContent> _Nonnull content;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL24GXUNNotificationResponse_")
@protocol GXUNNotificationResponse <NSObject>
@property (nonatomic, readonly, strong) id <GXUNNotification> _Nonnull notification;
@property (nonatomic, readonly, copy) NSString * _Nonnull actionIdentifier;
@optional
@property (nonatomic, readonly, copy) NSString * _Nonnull userText;
@end


SWIFT_PROTOCOL_NAMED("GXUserNotificationsProviderProtocol")
@protocol GXUserNotificationsProviderProtocol <NSObject>
/// The provider type identifier (must be the same value as in Notification Provider GX Property)
@property (nonatomic, readonly, copy) NSString * _Nonnull typeIdentifier;
@optional
/// Initialize the provider with the application’s launch options
- (void)initializeProviderWithLaunchOptions:(NSDictionary * _Nullable)launchOptions;
/// Returns true if uses method swizzerling on delegate classes (UIApplicationDelegate & UNUserNotificationCenterDelegate), otherwise
/// remoteAppDelegate, localAppDelegate, and unNotificationsCenterDelegate will be used instead
@property (nonatomic, readonly) BOOL usesMethodSwizzerlingOnDelegateClasses;
/// If usesMethodSwizzerlingOnDelegateClasses == false, UIApplicationDelegate callbacks will be forwarded to the returned value for remote notifications (some only on iOS < 10)
@property (nonatomic, readonly, strong) id <GXRemoteNotificationsProviderAppDelegateProtocol> _Nonnull remoteAppDelegate;
/// If usesMethodSwizzerlingOnDelegateClasses == false, UIApplicationDelegate callbacks will be forwarded to the returned value for local notifications on iOS < 10
@property (nonatomic, readonly, strong) id <GXLocalNotificationsProviderAppDelegateProtocol> _Nonnull localAppDelegate;
/// If usesMethodSwizzerlingOnDelegateClasses == false, UNUserNotificationCenterDelegate callbacks will be forwarded to the returned value for notifications on iOS < 10
@property (nonatomic, readonly) id _Nonnull unNotificationsCenterDelegate;
/// Register application for displaying user notifications
- (void)registerForUserNotificationTypesWithTypes:(NSUInteger)types;
/// Register application for receiving push notifications
- (void)registerForPushNotifications;
/// True if calling registerForPushNotifications() also registers for user notifications. Not implemented means false
@property (nonatomic, readonly) BOOL registeringForPushNotificationsAlsoRegisterForUserNotification;
/// Additional parameters to be sent in the notification registration handler DeviceToken parameter
- (void)registrationHandlerAdditionalDataWithCompletion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))completion;
/// Whether silent notification completion handler is called by the provider. Not implemented means true
@property (nonatomic, readonly) BOOL handlesSilentNotificationsCompletion;
/// Whether notification response completion handler is called by the provider. Not implemented means true
@property (nonatomic, readonly) BOOL handlesNotificationsResponsesCompletion;
@end


SWIFT_CLASS_NAMED("GXWeChatServiceHelper")
@interface GXWeChatServiceHelper : NSObject
+ (BOOL)isWeChatServiceAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXWeChatServiceHelper (SWIFT_EXTENSION(GXCoreBL))
+ (void)nativeTokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef GXCOREBL_SWIFT_H
#define GXCOREBL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreLocation;
@import Foundation;
@import GXDataLayer;
@import GXFoundation;
@import GXStandardClasses;
@import ObjectiveC;
#endif

#import <GXCoreBL/GXCoreBL.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GXCoreBL",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@protocol GXActionExternalObjectDescriptor;
@protocol GXActionHandler;
@class NSString;

SWIFT_CLASS("_TtC8GXCoreBL36GXActionExObjBaseMiniProgramsHandler")
@interface GXActionExObjBaseMiniProgramsHandler : GXActionExternalObjectHandler
+ (BOOL)handleActionExecutionUsingMethodHandlerSelectorNamePrefix SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXActionExObjMiniAppAPIHandler")
@interface GXActionExObjMiniAppAPIHandler : GXActionExObjBaseMiniProgramsHandler
- (void)gxActionExObjMethodHandler_Exit;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8GXCoreBL37GXActionExObjMiniProgramLoaderHandler") SWIFT_DEPRECATED_MSG("Use GXActionExObjMiniAppAPIHandler or GXActionExObjSuperAppsProvisioningHandler instead")
@interface GXActionExObjMiniProgramLoaderHandler : GXActionExObjBaseMiniProgramsHandler
- (void)gxActionExObjMethodHandler_Load:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_Exit;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXActionExObjSuperAppsMiniAppsHandler")
@interface GXActionExObjSuperAppsMiniAppsHandler : GXActionExObjBaseMiniProgramsHandler
- (void)gxActionExObjMethodHandler_Load:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetCached;
- (void)gxActionExObjMethodHandler_RemoveCached:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_ClearCached;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXActionExObjSuperAppsProvisioningHandler")
@interface GXActionExObjSuperAppsProvisioningHandler : GXActionExObjBaseMiniProgramsHandler
- (void)onFinishedExecutingWithError:(NSError * _Nullable)error;
- (void)cancelActionExecution;
- (void)gxActionExObjMethodHandler_ServerURL;
- (void)gxActionExObjMethodHandler_GetByText:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetByLocation:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetByTag:(NSArray * _Nonnull)parameters;
- (void)gxActionExObjMethodHandler_GetFeatured:(NSArray * _Nonnull)parameters;
- (nonnull instancetype)initWithActionExObjDescriptor:(id <GXActionExternalObjectDescriptor> _Nonnull)actionExObjDesc componentActionsHandlers:(NSArray<id <GXActionHandler>> * _Nullable)componentActionsHandlers userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo OBJC_DESIGNATED_INITIALIZER;
@end


@protocol GXModelObject;
@class GXActionHandler;

@interface GXActionsFactory (SWIFT_EXTENSION(GXCoreBL))
+ (GXActionHandler * _Nonnull)newCancelActionHandlerWithUserInfo:(NSDictionary<GXActionHandlerUserInfoKey, id> * _Nullable)userInfo forModelObject:(id <GXModelObject> _Nonnull)modelObject SWIFT_WARN_UNUSED_RESULT;
+ (GXActionHandler * _Nonnull)dynamicObjectCallActionHandlerWithString:(NSString * _Nonnull)dynamicCallString userInfo:(NSDictionary<GXActionHandlerUserInfoKey, id> * _Nullable)userInfo forModelObject:(id <GXModelObject> _Nonnull)modelObject SWIFT_WARN_UNUSED_RESULT;
@end

@class NSNumber;
@protocol GXAnalyticsService;
@protocol GXSDObjectLocator;

SWIFT_CLASS_NAMED("GXAnalyticsServiceHelper")
@interface GXAnalyticsServiceHelper : NSObject
+ (void)defaultSender:(id _Nullable)sender label:(NSString * _Nullable * _Nonnull)label value:(NSNumber * _Nullable * _Nonnull)value;
+ (void)defaultAnalyticsService:(id <GXAnalyticsService> _Nonnull)service trackViewFromObject:(id <GXSDObjectLocator> _Nonnull)object;
+ (void)defaultAnalyticsService:(id <GXAnalyticsService> _Nonnull)service trackEventName:(NSString * _Nonnull)name from:(id <GXSDObjectLocator> _Nonnull)object sender:(id _Nullable)sender;
+ (BOOL)shouldTrackEventName:(NSString * _Nonnull)eventName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GXDomainInfo;

SWIFT_CLASS_NAMED("GXDomainExpressionEvaluatorHelper")
@interface GXDomainExpressionEvaluatorHelper : NSObject
+ (id _Nullable)evaluateConvertWithParameters:(NSArray * _Nonnull)parameters target:(GXDomainInfo * _Nonnull)target error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol GXActionParameterDescriptor;

@interface GXDynamicCallHelper (SWIFT_EXTENSION(GXCoreBL))
+ (NSString * _Nonnull)dynamicJsonLinkForDynamicObjectName:(NSString * _Nonnull)dynObjectName parameterValues:(NSArray * _Nonnull)parameterValues parameterDescriptors:(NSArray<id <GXActionParameterDescriptor>> * _Nonnull)parameterDescriptors SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8GXCoreBL26GXDynamicServicesURLHelper")
@interface GXDynamicServicesURLHelper : NSObject
/// Returns true if the embedded app has DynamicServicesURL enabled, false otherwise.
/// Embedded app is the main bundle associated GX application (i.e. Generated GX apps and GX Super-app, but not non GX Super-apps, KBN app and all other target).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL hasDynamicServicesURL;)
+ (BOOL)hasDynamicServicesURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL hasServicesURLConfigurationPanel;)
+ (BOOL)hasServicesURLConfigurationPanel SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the embedded app has DynamicServicesURL enabled and has a custom services URL config panel, false otherwise.
/// Embedded app is the main bundle associated GX application (i.e. Generated GX apps and GX Super-app, but not non GX Super-apps, KBN app and all other target).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable servicesURLConfigPanelName;)
+ (NSString * _Nullable)servicesURLConfigPanelName SWIFT_WARN_UNUSED_RESULT;
/// Returns true if hasDynamicServicesURL == true and the current services URL has not be validated (ie. user chaned services URL from setting app).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL needsShowServicesURLConfigurationPanel;)
+ (BOOL)needsShowServicesURLConfigurationPanel SWIFT_WARN_UNUSED_RESULT;
/// Saves the received URL string to user defaults
/// \param urlString the new services URL as a String
/// Should only be called when hasDynamicServicesURL == true.
/// The received urlString is stored as the current services URL, and saved as valid if it is.
///
+ (void)saveDynamicAppServicesURL:(NSString * _Nonnull)urlString;
/// Saves the storedServerURLString value to the UserDefaults, using the default server address from the Info.plist
///
/// returns:
/// Wether the services URL configuration panel must be shown or not
/// Should only be called when hasDynamicServicesURL == true.
+ (BOOL)saveValidDynamicAppServicesURLIfNeededWithDefaultServerAddress SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("GXEOClientInformation")
@interface GXEOClientInformation : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull osName;
@property (nonatomic, readonly, copy) NSString * _Nonnull osVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull language;
@property (nonatomic, readonly) NSInteger deviceType;
@property (nonatomic, readonly, copy) NSString * _Nonnull platformName;
@property (nonatomic, readonly, copy) NSString * _Nonnull applicationId;
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersionCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersionName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXEOClientSocket")
@interface GXEOClientSocket : NSObject <GXWebSocketHandlerDelegate>
@property (nonatomic, readonly) NSInteger status;
- (void)open:(NSString * _Nonnull)url;
- (void)close;
- (void)send:(NSString * _Nonnull)message;
- (void)success;
- (void)failed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXEOGlobalEvents")
@interface GXEOGlobalEvents : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
- (void)dispatchExteralObjectEvent:(NSString * _Nonnull)eventName withParameters:(NSArray * _Nullable)parameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXEOMiniApps")
@interface GXEOMiniApps : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
+ (void)exit;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol GXSDTData;
@class GXObjectCollection;

SWIFT_CLASS_NAMED("GXEOMiniAppsManager")
@interface GXEOMiniAppsManager : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
+ (void)loadMiniApp:(id <GXSDTData> _Nonnull)sdtData;
+ (GXObjectCollection * _Nonnull)getCached SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)removeCached:(NSString * _Nonnull)miniAppId :(NSInteger)miniAppVersion SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)clearCached SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS_NAMED("GXEORuntime")
@interface GXEORuntime : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger environment;)
+ (NSInteger)environment SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger exitCode;)
+ (NSInteger)exitCode SWIFT_WARN_UNUSED_RESULT;
+ (void)setExitCode:(NSInteger)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXEORuntime (SWIFT_EXTENSION(GXCoreBL))
@property (nonatomic, readonly) NSInteger environment;
@property (nonatomic) NSInteger exitCode;
@end


SWIFT_CLASS_NAMED("GXEOSuperAppProvisioning")
@interface GXEOSuperAppProvisioning : GXExternalObjectBase
@property (nonatomic, readonly, copy) NSString * _Nonnull externalObjectName;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull provisioningURL;)
+ (NSString * _Nonnull)provisioningURL SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull provisioningURL;
+ (GXObjectCollection * _Nonnull)getByText:(NSString * _Nonnull)text :(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectCollection * _Nonnull)getByLocation:(NSString * _Nonnull)center :(NSInteger)radius :(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectCollection * _Nonnull)getByTag:(NSString * _Nonnull)tag :(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectCollection * _Nonnull)getFeatured:(NSInteger)start :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

@interface GXEOiOSPermissions (SWIFT_EXTENSION(GXCoreBL))
@property (nonatomic, readonly) GXAuthorizationStatusType userTrackingPermissionStatusNumber;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) GXAuthorizationStatusType userTrackingPermissionStatus;)
+ (GXAuthorizationStatusType)userTrackingPermissionStatus SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nullable)requestUserTrackingPermission;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL35GXEOiOSPermissionsLocationOptionals_")
@protocol GXEOiOSPermissionsLocationOptionals
@optional
/// Calls requestWhenInUseAuthorization on an internal instance of CLLocationManager
+ (void)gxRequestWhenInUseAuthorization;
+ (void)gxRequestWhenInUseAuthorizationWithCompletionHandler:(void (^ _Nullable)(void))withCompletionHandler;
/// Calls requestAlwaysAuthorization on an internal instance of CLLocationManager
+ (void)gxRequestAlwaysAuthorization;
+ (void)gxRequestAlwaysAuthorizationWithCompletionHandler:(void (^ _Nullable)(void))withCompletionHandler;
@end


SWIFT_CLASS_NAMED("GXExtensionLibraryContext")
@interface GXExtensionLibraryContext : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("GXExtensionLibraryProtocol")
@protocol GXExtensionLibraryProtocol <NSObject>
/// Initialize the provider with the application’s launch options
- (void)initializeExtensionLibraryWithContext:(GXExtensionLibraryContext * _Nonnull)context;
@end

@protocol GXExpressionMethod;
@protocol GXEntityData;
@protocol GXActionHandlerContext;

SWIFT_CLASS_NAMED("GXGeographyExpressionEvaluatorHelper")
@interface GXGeographyExpressionEvaluatorHelper : NSObject
+ (id _Nullable)evaluateGeographyMethodValueWithExpression:(id <GXExpressionMethod> _Nonnull)expression withEntityData:(id <GXEntityData> _Nullable)entityData actionHandlerContext:(id <GXActionHandlerContext> _Nullable)context target:(id _Nonnull)target arguments:(NSArray * _Nonnull)arguments completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion asyncAllowed:(BOOL)asyncAllowed handledSync:(GXOptionalBoolean * _Nonnull)handledSync;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("GXLocalNotificationsProviderAppDelegateProtocol")
@protocol GXLocalNotificationsProviderAppDelegateProtocol <NSObject>
- (void)onDidReceiveLocalNotification:(id _Nonnull)localNotification SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier for:(id _Nonnull)localNotification withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=9.0,deprecated=10.0);
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier for:(id _Nonnull)localNotification completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end

typedef SWIFT_ENUM(NSInteger, GXLocationAccuracy, open) {
  GXLocationAccuracyDefault = 0,
  GXLocationAccuracyBest = -1,
  GXLocationAccuracyBestForNavigation = -2,
  GXLocationAccuracyNearestTenMeters = -3,
  GXLocationAccuracyHundredMeters = -4,
  GXLocationAccuracyKilometer = -5,
  GXLocationAccuracyThreeKilomters = -6,
  GXLocationAccuracyReduced = -7,
};

typedef SWIFT_ENUM(NSInteger, GXLocationAccuracyAutorization, open) {
  GXLocationAccuracyAutorizationUnknown = 0,
  GXLocationAccuracyAutorizationRestricted = 1,
  GXLocationAccuracyAutorizationFull = 2,
};


@interface GXLocationManager (SWIFT_EXTENSION(GXCoreBL))
@property (nonatomic, readonly) enum GXLocationAccuracyAutorization currentLocationAccuracyAuthorizationStatus;
+ (enum GXLocationAccuracyAutorization)convertFromCLAccuracyAuthorization:(CLAccuracyAuthorization)accuracyAuth SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationAccuracy)convertCLLocationAccuracyFromGXLocationAccuracy:(NSInteger)accuracy SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8GXCoreBL23GXLocationManagerHelper")
@interface GXLocationManagerHelper : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("GXMapsProviderProtocol")
@protocol GXMapProviderProtocol <NSObject>
/// The maps API identifier (must be the same value as in “Maps for Apple API” GX Property)
@property (nonatomic, readonly, copy) NSString * _Nonnull mapsApiIdentifier;
@optional
/// Indicates wheather the provider needs to have it’s initializer method call before being used. Not impelemented means false
@property (nonatomic, readonly) BOOL initializationIsRequiered;
/// Initializes the provider. This method is called before retrieving a class from the provider if it’s indicated
- (void)initializeProvider;
@required
/// Returns the class that implements the indicated control type
- (Class _Nullable)getClassForControlType:(NSString * _Nonnull)controlType SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXMapsProvidersManager")
@interface GXMapsProvidersManager : NSObject
+ (void)register:(id <GXMapProviderProtocol> _Nonnull)provider forIdentifier:(NSString * _Nonnull)identifier;
+ (Class _Nullable)getClassWithControlType:(NSString * _Nonnull)controlType forProviderId:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
+ (Class _Nullable)getClassWithControlType:(NSString * _Nonnull)controlType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXMiniProgramLoader")
@interface GXMiniProgramLoader : NSObject
+ (void)exitFromMiniProgram;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXMultimediaPropertiesHelper")
@interface GXMultimediaPropertiesHelper : NSObject
+ (BOOL)tryGetValueForDataType:(GXDataType)dataType propertyLowercaseName:(NSString * _Nonnull)lowercasePropertyName targetValue:(NSString * _Nonnull)targetValue returnValue:(id _Nonnull * _Nonnull)retValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXMultimediaPropertiesHelper (SWIFT_EXTENSION(GXCoreBL))
+ (GXExpressionThreadRequirement)expressionThreadRequirementForDataType:(GXDataType)dataType propertyName:(NSString * _Nonnull)lowercasePropertyName SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("GXRandomNonceGenerator")
@interface GXRandomNonceGenerator : NSObject
+ (NSString * _Nonnull)randomNonceString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;

SWIFT_PROTOCOL_NAMED("GXRemoteNotificationsProviderAppDelegateProtocol")
@protocol GXRemoteNotificationsProviderAppDelegateProtocol <NSObject>
- (void)onDidRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)devToken;
- (void)onDidFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
- (void)onDidReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (void)onDidReceiveRemoteNotification:(NSDictionary * _Nonnull)userInfo fetchCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo withResponseInfo:(NSDictionary * _Nonnull)responseInfo completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,introduced=9.0,deprecated=10.0);
- (void)onHandleActionWithIdentifier:(NSString * _Nullable)identifier forRemoteNotification:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end


SWIFT_CLASS_NAMED("GXUCMapKitMapsProvider")
@interface GXUCMapKitMapsProvider : NSObject <GXMapProviderProtocol>
@property (nonatomic, readonly, copy) NSString * _Nonnull mapsApiIdentifier;
- (Class _Nullable)getClassForControlType:(NSString * _Nonnull)controlType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSDate;
@protocol GXUNNotificationRequest;

SWIFT_PROTOCOL("_TtP8GXCoreBL16GXUNNotification_")
@protocol GXUNNotification <NSObject>
@property (nonatomic, readonly, copy) NSDate * _Nullable date;
@property (nonatomic, readonly, strong) id <GXUNNotificationRequest> _Nonnull request;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL29GXUNNotificationActionHandler_")
@protocol GXUNNotificationActionHandler <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull eventParamters;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL23GXUNNotificationContent_")
@protocol GXUNNotificationContent <NSObject>
@property (nonatomic, readonly, strong) NSNumber * _Nullable badge;
@property (nonatomic, readonly, copy) NSString * _Nullable body;
@property (nonatomic, readonly, copy) NSString * _Nullable categoryIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic, readonly, copy) NSString * _Nullable threadIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull userInfo;
- (id <GXUNNotificationActionHandler> _Nullable)actionHandlerFor:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL23GXUNNotificationRequest_")
@protocol GXUNNotificationRequest <NSObject>
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier SWIFT_AVAILABILITY(ios,introduced=10.0);
@property (nonatomic, readonly, strong) id <GXUNNotificationContent> _Nonnull content;
@end


SWIFT_PROTOCOL("_TtP8GXCoreBL24GXUNNotificationResponse_")
@protocol GXUNNotificationResponse <NSObject>
@property (nonatomic, readonly, strong) id <GXUNNotification> _Nonnull notification;
@property (nonatomic, readonly, copy) NSString * _Nonnull actionIdentifier;
@optional
@property (nonatomic, readonly, copy) NSString * _Nonnull userText;
@end


SWIFT_PROTOCOL_NAMED("GXUserNotificationsProviderProtocol")
@protocol GXUserNotificationsProviderProtocol <NSObject>
/// The provider type identifier (must be the same value as in Notification Provider GX Property)
@property (nonatomic, readonly, copy) NSString * _Nonnull typeIdentifier;
@optional
/// Initialize the provider with the application’s launch options
- (void)initializeProviderWithLaunchOptions:(NSDictionary * _Nullable)launchOptions;
/// Returns true if uses method swizzerling on delegate classes (UIApplicationDelegate & UNUserNotificationCenterDelegate), otherwise
/// remoteAppDelegate, localAppDelegate, and unNotificationsCenterDelegate will be used instead
@property (nonatomic, readonly) BOOL usesMethodSwizzerlingOnDelegateClasses;
/// If usesMethodSwizzerlingOnDelegateClasses == false, UIApplicationDelegate callbacks will be forwarded to the returned value for remote notifications (some only on iOS < 10)
@property (nonatomic, readonly, strong) id <GXRemoteNotificationsProviderAppDelegateProtocol> _Nonnull remoteAppDelegate;
/// If usesMethodSwizzerlingOnDelegateClasses == false, UIApplicationDelegate callbacks will be forwarded to the returned value for local notifications on iOS < 10
@property (nonatomic, readonly, strong) id <GXLocalNotificationsProviderAppDelegateProtocol> _Nonnull localAppDelegate;
/// If usesMethodSwizzerlingOnDelegateClasses == false, UNUserNotificationCenterDelegate callbacks will be forwarded to the returned value for notifications on iOS < 10
@property (nonatomic, readonly) id _Nonnull unNotificationsCenterDelegate;
/// Register application for displaying user notifications
- (void)registerForUserNotificationTypesWithTypes:(NSUInteger)types;
/// Register application for receiving push notifications
- (void)registerForPushNotifications;
/// True if calling registerForPushNotifications() also registers for user notifications. Not implemented means false
@property (nonatomic, readonly) BOOL registeringForPushNotificationsAlsoRegisterForUserNotification;
/// Additional parameters to be sent in the notification registration handler DeviceToken parameter
- (void)registrationHandlerAdditionalDataWithCompletion:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))completion;
/// Whether silent notification completion handler is called by the provider. Not implemented means true
@property (nonatomic, readonly) BOOL handlesSilentNotificationsCompletion;
/// Whether notification response completion handler is called by the provider. Not implemented means true
@property (nonatomic, readonly) BOOL handlesNotificationsResponsesCompletion;
@end


SWIFT_CLASS_NAMED("GXWeChatServiceHelper")
@interface GXWeChatServiceHelper : NSObject
+ (BOOL)isWeChatServiceAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXWeChatServiceHelper (SWIFT_EXTENSION(GXCoreBL))
+ (void)nativeTokenWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
