#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef GXFOUNDATION_SWIFT_H
#define GXFOUNDATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import YAJL;
#endif

#import <GXFoundation/GXFoundation.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GXFoundation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

@interface NSBundle (SWIFT_EXTENSION(GXFoundation))
/// Returns the bundle of the Unit Test if running in the context of a XCTest, the main bundle otherwise.
/// note:
/// Same as Bundle.main in any context but when running in an Unit Test. Usefull for unit testing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull gxMainBundle;)
+ (NSBundle * _Nonnull)gxMainBundle SWIFT_WARN_UNUSED_RESULT;
/// Returns the bundle name from the info dictionay using CFBundleName key
@property (nonatomic, readonly, copy) NSString * _Nullable gxBundleName;
@end


@interface CLLocationManager (SWIFT_EXTENSION(GXFoundation))
@property (nonatomic, readonly) CLAuthorizationStatus gxAuthorizationStatus;
@end



@interface NSDateFormatter (SWIFT_EXTENSION(GXFoundation))
+ (NSDateFormatter * _Nonnull)dateFormatterWithTimeZone_UTC_ForDateFormatterDateStyle:(enum NSDateFormatterStyle)dateStyle timeStyle:(enum NSDateFormatterStyle)timeStyle hasMilliseconds:(BOOL)hasMilliseconds localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nonnull)dateFormatterWithTimeZone_UTC_ForDateFormatterDateStyle:(enum NSDateFormatterStyle)dateStyle timeStyle:(enum NSDateFormatterStyle)timeStyle hasMilliseconds:(BOOL)hasMilliseconds localeId:(NSString * _Nullable)localeId useCurrentCalendar:(BOOL)useCurrentCalendar SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nonnull)dateFormatterWithTimeZone_UTC_Locale_en_US_POSIX_forDateFormat:(NSString * _Nonnull)dateFormat SWIFT_WARN_UNUSED_RESULT;
+ (enum NSDateFormatterStyle)dateFormatterStyleFromGXDataDateFormat:(GXDataDateFormat)dateFormat SWIFT_WARN_UNUSED_RESULT;
+ (enum NSDateFormatterStyle)dateFormatterStyleFromGXDataTimeFormat:(GXDataTimeFormat)timeFormat SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)gxDateFormatForShortGXFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM_NAMED(uint_least8_t, GXActivityIndicatorType, "GXActivityIndicatorType", open) {
  GXActivityIndicatorTypeIndeterminated = 0,
  GXActivityIndicatorTypeDeterminated = 1,
};


SWIFT_PROTOCOL_NAMED("GXAlertMessageService")
@protocol GXAlertMessageService <NSObject>
- (void)showMessage:(NSString * _Nonnull)message;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages;
- (void)showMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertForError:(NSError * _Nullable)error;
- (void)showAlertForError:(NSError * _Nullable)error completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
@end


SWIFT_PROTOCOL_NAMED("GXCancelableOperation")
@protocol GXCancelableOperation <NSObject>
- (void)cancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationBase")
@interface GXCancelableOperationBase : NSObject
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
- (void)performCancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXCancelableOperationBase (SWIFT_EXTENSION(GXFoundation)) <GXCancelableOperation>
- (void)cancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationComposite")
@interface GXCancelableOperationComposite : GXCancelableOperationBase
- (nonnull instancetype)initWithChildOperations:(NSArray<id <GXCancelableOperation>> * _Nonnull)childOperations OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)performCancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationWithBlock")
@interface GXCancelableOperationWithBlock : GXCancelableOperationBase
- (nonnull instancetype)initWithCancelBlock:(void (^ _Nullable)(void))cancelblock OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)performCancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationWrapper")
@interface GXCancelableOperationWrapper : GXCancelableOperationBase
/// Assigning a new innerOperation when isCancelled, cancels the new operation
@property (nonatomic, strong) id <GXCancelableOperation> _Nonnull innerOperation;
- (nonnull instancetype)initWithInnerOperation:(id <GXCancelableOperation> _Nonnull)innerOperation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)performCancel;
@end

@class UIColor;

SWIFT_PROTOCOL_NAMED("GXPropertiesObjectProtocol")
@protocol GXPropertiesObject <NSObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getPropertyValueInteger:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getPropertyValueFloat:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPropertyValueString:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)getPropertyValueColor:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("GXCodingPropertiesObjectProtocol")
@protocol GXCodingPropertiesObject <NSCoding, GXPropertiesObject>
- (id <NSCoding> _Nullable)getCodingPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXPropertiesObject")
@interface GXPropertiesObject : NSObject
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSCoder;

SWIFT_CLASS_NAMED("GXCodingPropertiesObject")
@interface GXCodingPropertiesObject : GXPropertiesObject <GXCodingPropertiesObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (id <NSCoding> _Nullable)getCodingPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


@class NSURL;
@class UITraitCollection;
@class UIWindow;
@class UIScene;
@class UISceneSession;

SWIFT_PROTOCOL("_TtP12GXFoundation22GXExecutionEnvironment_")
@protocol GXExecutionEnvironment <NSObject>
@property (nonatomic, readonly) GXApplicationStateType applicationState;
@property (nonatomic, readonly, getter=isTransitioningFromBackgroundToForeground) BOOL transitioningFromBackgroundToForeground;
@property (nonatomic, readonly) BOOL activeStateNotificationsSupported;
@property (nonatomic, readonly, copy) NSString * _Nullable didBecomeActiveNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable willResignActiveNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable didReceiveMemoryWarningNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable willTerminateNotification;
@property (nonatomic, readonly, getter=isMultitaskingSupported) BOOL multitaskingSupported;
@property (nonatomic, readonly) BOOL multitaskingNotificationsSupported;
@property (nonatomic, readonly, copy) NSString * _Nullable didEnterBackgroundNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable willEnterForegroundNotification;
@optional
@property (nonatomic, readonly) NSTimeInterval backgroundTimeRemaining;
- (GXBackgroundTaskIdentifier)backgroundTaskInvalidIdentifier SWIFT_WARN_UNUSED_RESULT;
- (GXBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString * _Nullable)taskName expirationHandler:(void (^ _Nullable)(void))handler SWIFT_WARN_UNUSED_RESULT;
- (void)endBackgroundTask:(GXBackgroundTaskIdentifier)identifier;
- (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nullable)options completionHandler:(void (^ _Nullable)(BOOL))completion;
@property (nonatomic, readonly, copy) NSString * _Nullable openURLOptionUniversalLinksOnlyKey;
- (BOOL)canOpenURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@required
@property (nonatomic, readonly, strong) UITraitCollection * _Nonnull currentTraitCollection;
@property (nonatomic, readonly, strong) UIWindow * _Nullable keyWindow SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes");
@property (nonatomic, readonly, copy) NSArray<UIWindow *> * _Nonnull windows SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.");
@property (nonatomic, readonly, copy) NSSet<UIScene *> * _Nonnull connectedScenes SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@property (nonatomic, readonly, copy) NSSet<UISceneSession *> * _Nonnull openSessions SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@optional
@property (nonatomic, readonly) BOOL supportsMultipleScenes SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@required
- (void)sendActionToFirstResponder:(SEL _Nonnull)action;
@property (nonatomic, readonly) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection;
@property (nonatomic, readonly) CGRect statusBarFrame SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use the statusBarManager property of the window scene instead.");
@property (nonatomic, readonly) UIInterfaceOrientation interfaceOrientation;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientationsForKeyWindow;
@property (nonatomic, readonly) UIContentSizeCategory _Nonnull preferredContentSizeCategory;
@property (nonatomic, readonly) BOOL preferredContentSizeCategoryIsAccessibilityCategory;
@optional
- (void)beginReceivingRemoteControlEvents;
- (void)endReceivingRemoteControlEvents;
@end


SWIFT_CLASS_NAMED("GXExecutionEnvironmentHelper")
@interface GXExecutionEnvironmentHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<UIWindow *> * _Nonnull allConnectedWindows;)
+ (NSArray<UIWindow *> * _Nonnull)allConnectedWindows SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
+ (void)beginReceivingRemoteControlEvents;
+ (void)endReceivingRemoteControlEvents;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
+ (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nullable)options completionHandler:(void (^ _Nullable)(BOOL))completion;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable openURLOptionUniversalLinksOnlyKey;)
+ (NSString * _Nullable)openURLOptionUniversalLinksOnlyKey SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canOpenURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end

@class UIWindowScene;

SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSSet<UIScene *> * _Nonnull connectedScenes;)
+ (NSSet<UIScene *> * _Nonnull)connectedScenes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<UIWindowScene *> * _Nonnull connectedWindowScenes;)
+ (NSArray<UIWindowScene *> * _Nonnull)connectedWindowScenes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSSet<UISceneSession *> * _Nonnull openSessions;)
+ (NSSet<UISceneSession *> * _Nonnull)openSessions SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL backgroundTaskSupported;)
+ (BOOL)backgroundTaskSupported SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)backgroundTimeRemaining SWIFT_WARN_UNUSED_RESULT;
+ (GXBackgroundTaskIdentifier)backgroundTaskInvalidIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (GXBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString * _Nullable)taskName expirationHandler:(void (^ _Nullable)(void))handler SWIFT_WARN_UNUSED_RESULT;
+ (void)endBackgroundTask:(GXBackgroundTaskIdentifier)identifier;
@end



@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, getter=isMultitaskingSupported) BOOL multitaskingSupported;)
+ (BOOL)isMultitaskingSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL multitaskingNotificationsSupported;)
+ (BOOL)multitaskingNotificationsSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextDidEnterBackgroundNotification;)
+ (NSString * _Nullable)currentContextDidEnterBackgroundNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextWillEnterForegroundNotification;)
+ (NSString * _Nullable)currentContextWillEnterForegroundNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) GXApplicationStateType applicationState;)
+ (GXApplicationStateType)applicationState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, getter=isTransitioningFromBackgroundToForeground) BOOL transitioningFromBackgroundToForeground;)
+ (BOOL)isTransitioningFromBackgroundToForeground SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)activeStateNotificationsSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextDidBecomeActiveNotification;)
+ (NSString * _Nullable)currentContextDidBecomeActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextWillResignActiveNotification;)
+ (NSString * _Nullable)currentContextWillResignActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextDidReceiveMemoryWarningNotification;)
+ (NSString * _Nullable)currentContextDidReceiveMemoryWarningNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextWillTerminateNotification;)
+ (NSString * _Nullable)currentContextWillTerminateNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UITraitCollection * _Nonnull currentTraitCollection;)
+ (UITraitCollection * _Nonnull)currentTraitCollection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIWindow * _Nullable keyWindow SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes");)
+ (UIWindow * _Nullable)keyWindow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<UIWindow *> * _Nonnull windows SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.");)
+ (NSArray<UIWindow *> * _Nonnull)windows SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsMultipleScenes;)
+ (BOOL)supportsMultipleScenes SWIFT_WARN_UNUSED_RESULT;
+ (void)sendActionToFirstResponder:(SEL _Nonnull)action;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, getter=isDarkUIStyle) BOOL darkUIStyle;)
+ (BOOL)isDarkUIStyle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL darkUIStyleRuntimeChangeSupported;)
+ (BOOL)darkUIStyleRuntimeChangeSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection;)
+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLayoutDirectionLeftToRight;)
+ (BOOL)isLayoutDirectionLeftToRight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLayoutDirectionRightToLeft;)
+ (BOOL)isLayoutDirectionRightToLeft SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGRect statusBarFrame SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use the statusBarManager property of the window scene instead.");)
+ (CGRect)statusBarFrame SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIInterfaceOrientation interfaceOrientation;)
+ (UIInterfaceOrientation)interfaceOrientation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIInterfaceOrientationMask supportedInterfaceOrientationsForKeyWindow;)
+ (UIInterfaceOrientationMask)supportedInterfaceOrientationsForKeyWindow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIContentSizeCategory _Nonnull preferredContentSizeCategory;)
+ (UIContentSizeCategory _Nonnull)preferredContentSizeCategory SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL preferredContentSizeCategoryIsAccessibilityCategory;)
+ (BOOL)preferredContentSizeCategoryIsAccessibilityCategory SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXFoundationServices")
@interface GXFoundationServices : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol GXLoggerService;
@protocol GXNetworkActivityIndicatorService;
@protocol GXProgressActivityIndicatorService;
@protocol GXWCSessionService;

@interface GXFoundationServices (SWIFT_EXTENSION(GXFoundation))
+ (id <GXAlertMessageService> _Nonnull)alertMessageService SWIFT_WARN_UNUSED_RESULT;
+ (id <GXLoggerService> _Nullable)loggerService SWIFT_WARN_UNUSED_RESULT;
+ (id <GXNetworkActivityIndicatorService> _Nullable)networkActivityIndicatorService SWIFT_WARN_UNUSED_RESULT;
+ (id <GXProgressActivityIndicatorService> _Nullable)progressActivityIndicatorService SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <GXWCSessionService> _Nullable watchConnectivityService;)
+ (id <GXWCSessionService> _Nullable)watchConnectivityService SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXHTTPWarningHeader")
@interface GXHTTPWarningHeader : NSObject
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull agent;
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (nonnull instancetype)initWithCode:(NSInteger)code agent:(NSString * _Nonnull)agent text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Checks if is a User warning
///
/// returns:
/// YES if text has User: (or Encoded:User:) prefix, NO otherwise
- (BOOL)isUserWarning SWIFT_WARN_UNUSED_RESULT;
/// Checks if is a System warning
///
/// returns:
/// YES if text has System: (or Encoded:System:) prefix, NO otherwise
- (BOOL)isSystemWarning SWIFT_WARN_UNUSED_RESULT;
/// Checks if is a warning is encoded
///
/// returns:
/// YES if text has Encoded: prefix, NO otherwise
- (BOOL)isWarningEncoded SWIFT_WARN_UNUSED_RESULT;
/// Removes text prefixes (Encode:, User: or System:) and unencodes if needed
- (NSString * _Nonnull)warningText SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXInsensitiveMetadata")
@interface GXInsensitiveMetadata : NSObject
+ (id _Nullable)metadataObjectForKey:(NSString * _Nonnull)key fromMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXInvocationWithSelfOperation")
@interface GXInvocationWithSelfOperation : NSOperation
@property (nonatomic) BOOL hasReturnValue;
@property (nonatomic, readonly, strong) id _Nullable result;
@property (nonatomic) id _Nullable context;
- (nonnull instancetype)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel OBJC_DESIGNATED_INITIALIZER;
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;
@class NSURLResponse;
@class NSData;
@protocol GXLogListener;

SWIFT_CLASS("_TtC12GXFoundation5GXLog")
@interface GXLog : NSObject
+ (BOOL)isLogEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logInConsole;)
+ (BOOL)logInConsole SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logInFileEnabled;)
+ (BOOL)logInFileEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isLogRequestsEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isLogResponsesEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isLogResponsesBodyEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)logMessage:(NSString * _Nonnull)message;
+ (void)logJSONObject:(id _Nonnull)object withTitle:(NSString * _Nonnull)title;
+ (void)logURLRequestIfEnabled:(NSURLRequest * _Nonnull)request;
+ (void)logURLResponseIfEnabled:(NSURLResponse * _Nonnull)response request:(NSURLRequest * _Nonnull)request data:(NSData * _Nullable)data;
+ (void)logURLResponseIfEnabled:(NSURLResponse * _Nonnull)response request:(NSURLRequest * _Nonnull)request dataPath:(NSString * _Nonnull)dataPath;
+ (void)logJSONParserElementIfEnabled:(id _Nonnull)element;
+ (void)clearLog;
+ (NSString * _Nullable)logString SWIFT_WARN_UNUSED_RESULT;
+ (void)addListener:(id <GXLogListener> _Nonnull)listener;
+ (void)removeListener:(id <GXLogListener> _Nonnull)listener;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXLog * _Nonnull sharedInstance;)
+ (GXLog * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXLog (SWIFT_EXTENSION(GXFoundation))
+ (id <GXLoggerService> _Null_unspecified)loggerService SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC12GXFoundation24GXLogAlertMessageService")
@interface GXLogAlertMessageService : NSObject <GXAlertMessageService>
- (void)showMessage:(NSString * _Nonnull)message;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages;
- (void)showMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertForError:(NSError * _Nullable)error;
- (void)showAlertForError:(NSError * _Nullable)error completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12GXFoundation13GXLogListener_")
@protocol GXLogListener <NSObject>
- (void)logListenerNotifyMessage:(NSString * _Nonnull)message;
@end

typedef SWIFT_ENUM(NSInteger, GXLoggerLevel, open) {
  GXLoggerLevelOff = 0,
  GXLoggerLevelAlways = 1,
  GXLoggerLevelFatal = 2,
  GXLoggerLevelError = 3,
  GXLoggerLevelWarning = 4,
  GXLoggerLevelInfo = 5,
  GXLoggerLevelDebug = 6,
};

enum GXLoggerType : NSInteger;

SWIFT_PROTOCOL("_TtP12GXFoundation15GXLoggerService_")
@protocol GXLoggerService <NSObject>
- (void)startLogging;
- (void)endLogging;
@property (nonatomic, readonly) BOOL isLogEnabled;
- (enum GXLoggerLevel)logLevelForType:(enum GXLoggerType)type SWIFT_WARN_UNUSED_RESULT;
- (void)logMessage:(NSString * _Nonnull)message forType:(enum GXLoggerType)type withLevel:(enum GXLoggerLevel)level logToConsole:(BOOL)logToConsole;
@end

typedef SWIFT_ENUM(NSInteger, GXLoggerType, open) {
  GXLoggerTypeGeneral = 0,
  GXLoggerTypeNetwork = 1,
  GXLoggerTypeSynchronization = 2,
  GXLoggerTypeDatabase = 3,
};


SWIFT_PROTOCOL_NAMED("GXMutablePropertiesObjectProtocol")
@protocol GXMutablePropertiesObject <GXPropertiesObject>
- (void)setPropertyValue:(id _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)removePropertyFoPropertyName:(NSString * _Nonnull)propertyName;
- (void)setBoolProperty:(BOOL)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setIntegerProperty:(NSInteger)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setFloatProperty:(CGFloat)value forPropertyName:(NSString * _Nonnull)propertyName;
@end


SWIFT_PROTOCOL_NAMED("GXMutableCodingPropertiesObjectProtocol")
@protocol GXMutableCodingPropertiesObject <GXCodingPropertiesObject, GXMutablePropertiesObject>
- (void)setCodingPropertyValue:(id <NSCoding> _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
@end


SWIFT_CLASS_NAMED("GXMutablePropertiesObject")
@interface GXMutablePropertiesObject : GXPropertiesObject <GXMutablePropertiesObject>
- (void)setPropertyValue:(id _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)removePropertyFoPropertyName:(NSString * _Nonnull)propertyName;
- (void)setBoolProperty:(BOOL)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setIntegerProperty:(NSInteger)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setFloatProperty:(CGFloat)value forPropertyName:(NSString * _Nonnull)propertyName;
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXMutableCodingPropertiesObject")
@interface GXMutableCodingPropertiesObject : GXMutablePropertiesObject <GXMutableCodingPropertiesObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (void)setPropertyValue:(id _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (id <NSCoding> _Nullable)getCodingPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (void)setCodingPropertyValue:(id <NSCoding> _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_PROTOCOL_NAMED("GXNetworkActivityIndicatorService")
@protocol GXNetworkActivityIndicatorService <NSObject>
- (void)startActivity;
- (void)stopActivity;
- (void)stopAllActivity;
@end

@class NSNumber;

SWIFT_CLASS_NAMED("GXNumberWithPictureFormatter")
@interface GXNumberWithPictureFormatter : NSNumberFormatter
- (nonnull instancetype)initWithNumberFormat:(NSString * _Nonnull)numberFormat OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)stringFromNumber:(NSNumber * _Nonnull)num SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringForObjectValue:(id _Nullable)obj SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)numberFromString:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXObjectHelper (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)parseObjectType:(NSString * _Nullable * _Nullable)objectType objectName:(NSString * _Nullable * _Nullable)objectName from:(id _Nullable)data;
+ (BOOL)parseObjectTypeEnum:(GXObjectType * _Nullable)objectType objectName:(NSString * _Nullable * _Nullable)objectName from:(id _Nullable)data;
+ (NSString * _Nullable)parseObjectNameOfType:(NSString * _Nonnull)objectType from:(id _Nullable)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)parseObjectNameOfTypeEnum:(GXObjectType)objectType from:(id _Nullable)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)objectTypeStringFromEnum:(GXObjectType)objectType SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectType)objectTypeEnumFromString:(NSString * _Nullable)objectType SWIFT_WARN_UNUSED_RESULT;
@end

@class GXProgressIndicatorData;

SWIFT_PROTOCOL_NAMED("GXProgressActivityIndicatorService")
@protocol GXProgressActivityIndicatorService <NSObject>
@property (nonatomic, strong) GXProgressIndicatorData * _Nonnull data;
- (void)showIndicator;
- (void)showIndicatorWithTitle:(NSString * _Nullable)title;
- (void)showIndicatorWithTitle:(NSString * _Nullable)title description:(NSString * _Nullable)description;
- (void)hideIndicator;
- (void)invalidate;
- (void)shouldHideOnNewViewController:(BOOL)hide;
- (BOOL)isShowing SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXProgressIndicatorData")
@interface GXProgressIndicatorData : NSObject
@property (nonatomic) enum GXActivityIndicatorType type;
@property (nonatomic, copy) NSString * _Nullable styleClassName;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable desc;
@property (nonatomic) NSInteger maxValue;
@property (nonatomic) NSInteger value;
@property (nonatomic) BOOL visible;
@property (nonatomic, readonly) float normalizedValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface GXPropertiesObject (SWIFT_EXTENSION(GXFoundation)) <GXPropertiesObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getPropertyValueInteger:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getPropertyValueFloat:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPropertyValueString:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)getPropertyValueColor:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("GXRecoveryAttempter")
@interface GXRecoveryAttempter : NSObject
@property (nonatomic, copy) BOOL (^ _Nullable attemptRecoverBlock)(NSError * _Nonnull, NSInteger);
@property (nonatomic, copy) BOOL (^ _Nullable asyncAttemptRecoverBlock)(NSError * _Nonnull, NSInteger, id _Nullable, SEL _Nullable, void * _Nullable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class allows the synchronous execution of asynchronous tasks
SWIFT_CLASS("_TtC12GXFoundation28GXSynchronousExecutionHelper")
@interface GXSynchronousExecutionHelper : NSObject
/// Creates a lock and executes the block in the main queue
/// remark:
/// This method cannot be called from the main thread.
/// \param block The block must perform all the operations that involve the setup and execution of the async task. It is executed after creating / obtaining the lock. It might be NULL.
///
/// \param async Whether the given block is dispatched async or sync on the main queue.
///
- (void)startWithBlock:(void (^ _Nullable)(void))block async:(BOOL)async;
/// Calls [self startWithBlock:block async:YES]
- (void)startWithAsyncBlock:(void (^ _Nullable)(void))block;
/// Calls [self startWithBlock:block async:NO]
- (void)startWithSyncBlock:(void (^ _Nullable)(void))block;
/// Calls [self startWithBlock:NULL async:NO]
- (void)start;
/// Releases de lock and allows executing the first waiting block
- (void)signal;
/// The  block passed to this method will be executed after the async task finishes.
/// remark:
/// This method cannot be called from the main thread.
/// \param block The block to be executing after obtaining the lock. It might be NULL (for just waiting).
///
- (void)executeWaitingBlock:(void (^ _Nullable)(void))block;
/// Calls [self executeWaitingBlock:NULL]
- (void)wait;
/// Releases any lock and cancels execution of any pending block
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS_NAMED("GXThreadErrorHandler")
@interface GXThreadErrorHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (GXThreadErrorHandler * _Nonnull)errorHandler SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXThreadErrorHandler * _Nonnull current;)
+ (GXThreadErrorHandler * _Nonnull)current SWIFT_WARN_UNUSED_RESULT;
- (void)addErrorWithCode:(NSInteger)code description:(NSString * _Nullable)desc;
- (void)addError:(NSError * _Nonnull)error;
- (BOOL)hasError SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSError *> * _Nonnull)getErrors SWIFT_WARN_UNUSED_RESULT;
- (void)clearErrors;
- (void)removeErrorsWithCode:(NSInteger)code;
@end

@class NSTimeZone;
@class NSDate;

@interface GXTimeZone (SWIFT_EXTENSION(GXFoundation))
+ (void)initializeIfNeeded;
+ (NSTimeZone * _Nonnull)currentTimeZone SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)currentTimeZoneName SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nonnull)currentTimeZoneOffset SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)setCurrentTimeZoneWithName:(NSString * _Nonnull)tzName;
+ (NSDate * _Nonnull)convertDateTime:(NSDate * _Nonnull)dateTime fromTimeZone:(NSString * _Nonnull)tzName SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nonnull)stringWithGXFormat:(NSString * _Nonnull)format values:(NSArray * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Returns the given object if it’s kind of the given class, otherwise if it conforms to YAJLCoding
/// protocol, checks again with it’s JSON object, and returns it if it’s kind of the given class, and
/// if not returns nil
+ (id _Nullable)jsonObject:(NSObject * _Nullable)object ofClass:(Class _Nonnull)expectedClass SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Checks if the applications plist declaration includes the given background mode
/// remark:
/// See https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW22
/// \param backgroundMode the background mode to check
///
///
/// returns:
/// Returns YES if the given background mode is contained, NO otherwise
+ (BOOL)applicationContainsBackgroundMode:(NSString * _Nonnull)backgroundMode SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (GXConnectivitySupportType)connectivitySupportFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSArray<NSString *> * _Nonnull)alphabetCharacters SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)alphabetCharacters:(BOOL)ascending SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSError * _Nullable)errorFromResponseData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<GXHTTPWarningHeader *> * _Nullable)httpWarningsFromHeader:(NSString * _Nullable)warningHeader SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSUInteger)stringEncodingFromCharsetString:(NSString * _Nullable)strEncoding SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nonnull)stringByRemovingEnclosingQuotes:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)stringByRemovingEnclosingQuotes:(NSString * _Nonnull)string hasQuotes:(BOOL * _Nullable)quotes isTranslatable:(BOOL * _Nullable)translatable SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSArray * _Nullable)arrayFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)lastObjectIfArrayFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nullable)urlParametersStringFrom:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)urlParametersStringFrom:(NSDictionary<NSString *, id> * _Nonnull)parameters sorted:(BOOL)sorted SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)urlFromMaybeEscapedURLString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)splitString:(NSString * _Nonnull)string byFirstOcurrenceOfString:(NSString * _Nonnull)separator toLeft:(NSString * _Nullable * _Nullable)left andRigth:(NSString * _Nullable * _Nullable)rigth;
+ (BOOL)splitString:(NSString * _Nonnull)string byLastOcurrenceOfString:(NSString * _Nonnull)separator toLeft:(NSString * _Nullable * _Nullable)left andRigth:(NSString * _Nullable * _Nullable)rigth;
+ (BOOL)splitString:(NSString * _Nonnull)string byOcurrenceOfString:(NSString * _Nonnull)separator withOptions:(NSStringCompareOptions)options toLeft:(NSString * _Nullable * _Nullable)left andRigth:(NSString * _Nullable * _Nullable)rigth;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)setExtendedFileAttributeWithName:(NSString * _Nonnull)name data:(NSData * _Nonnull)data at:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)removeExtendedFileAttributeWithName:(NSString * _Nonnull)name at:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error;
+ (NSData * _Nullable)dataForExtendedFileAttributeWithName:(NSString * _Nonnull)name at:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Flexible client version
/// Format: major.minor.revision (GXFlexibleClientMinorVersionNumber.GXFlexibleClientMinorVersionNumber.GXFlexibleClientRevisionNumber)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull flexibleClientVersion;)
+ (NSString * _Nonnull)flexibleClientVersion SWIFT_WARN_UNUSED_RESULT;
/// Version in numeric format
/// Format: major.minor.maintenance (ie. 6.1.4) -> major x 10000 + minor x 100 + maintenance (ie. 60104)
/// minor and maintenance must be smaller than 100
+ (NSUInteger)numericRepresentationFromVersionString:(NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// Returns:
/// <ul>
///   <li>
///     NSOrderedAscending  if the metadata version1 is smaller than version2
///   </li>
///   <li>
///     NSOrderedSame       if they are equal
///   </li>
///   <li>
///     NSOrderedDescending if the metadata version1 is grater than version2
///   </li>
/// </ul>
+ (enum NSComparisonResult)comparaVersionString:(NSString * _Nonnull)version1 toVersion:(NSString * _Nonnull)version2 SWIFT_WARN_UNUSED_RESULT;
@end

@protocol GXUtilitiesDeveloperInfoExtension;

@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)showDeveloperInfo SWIFT_WARN_UNUSED_RESULT;
+ (void)registerDeveloperInfoExtension:(id <GXUtilitiesDeveloperInfoExtension> _Nonnull)developerInfoExtension;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// System version in numeric format
/// Format: major.minor.maintenance (ie. 6.1.4) -> major x 10000 + minor x 100 + maintenance (ie. 60104)
+ (NSUInteger)deviceSystemVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)currentDeviceIPAD SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE_4INCH SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE_4_7INCH SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE_5_5INCH SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nonnull)stringFromInteger:(NSInteger)integer SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)stringFromFloat:(float)floatValue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)nonEmptyStringFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isStringNullOrEmpty:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Creates a unique file path in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath instead if file needs to be accessible by GXFileSystemObject
+ (NSString * _Nonnull)createUniqueTemporaryFilePath SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique directory path in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryDirectoryPath instead if directory needs to be accessible by GXFileSystemObject
+ (NSString * _Nonnull)createUniqueTemporaryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique path in the temp directory of the application with the given file extension
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath instead if file needs to be accessible by GXFileSystemObject
/// \param ext The path extension
///
+ (NSString * _Nonnull)createUniqueTemporaryFilePathWithExtension:(NSString * _Nullable)ext SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique file URL in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath or createUniqueGXDataTemporaryDirectoryPath instead if file needs to be accessible by GXFileSystemObject
/// \param isDirectory Whether the file URL is a directory or file.
///
+ (NSURL * _Nonnull)createUniqueTemporaryFileURL:(BOOL)isDirectory SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique file URL in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath instead if file needs to be accessible by GXFileSystemObject
/// \param ext The file path extension
///
+ (NSURL * _Nonnull)createUniqueTemporaryFileURLWithExtension:(NSString * _Nullable)ext SWIFT_WARN_UNUSED_RESULT;
/// Excludes the given path from backup using NSURLIsExcludedFromBackupKey
+ (void)excludePathFromBackup:(NSString * _Nonnull)path;
@end

@class WKTPoint;
@class MKPolyline;

@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (WKTPoint * _Nullable)wktPointFromGeoString:(NSString * _Nullable)locationStr SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationCoordinate2D)coordinateFromGeoString:(NSString * _Nullable)locationStr forType:(GXDataType)fieldType SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationCoordinate2D)coordinateFromGeoLocationString:(NSString * _Nullable)locationStr SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)geoLocationStringFromCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)geoLocationStringFromCoordinate:(CLLocationCoordinate2D)coordinate forType:(GXDataType)fieldType SWIFT_WARN_UNUSED_RESULT;
+ (MKPolyline * _Nullable)polylineFromGeoLine:(NSString * _Nullable)geolineStr SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (void)installUncaughtExceptionsHandler;
/// Same as [self tryRecoverFatalError:developerDescription withExceptionName:nil recoveryBlock:^BOOL{ return YES; }]
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription;
/// Same as [self tryRecoverFatalError:developerDescription withExceptionName:exceptionName recoveryBlock:^BOOL{ return YES; }]
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName;
/// Same as [self tryRecoverFatalError:developerDescription withExceptionName:nil recoveryBlock:recoveryBlock]
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription withRecoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock;
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName recoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock;
/// Same as [self tryHandleFatalError:developerDescription withExceptionName:nil recoveryBlock:^BOOL{ return YES; }]
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription SWIFT_WARN_UNUSED_RESULT;
/// Same as [self tryHandleFatalError:developerDescription withExceptionName:exceptionName recoveryBlock:^BOOL{ return YES; }]
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName SWIFT_WARN_UNUSED_RESULT;
/// Same as [self tryHandleFatalError:developerDescription withExceptionName:nil recoveryBlock:recoveryBlock]
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription withRecoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName recoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDecimalNumber;

@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)boolFromValue:(id _Nullable)value defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)boolFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSUInteger)unsignedIntegerFromValue:(id _Nullable)value defaultValue:(NSUInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)unsignedIntegerNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)integerFromValue:(id _Nullable)value defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)integerNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)floatNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)doubleNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSDecimalNumber * _Nullable)decimalNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)numberWithBoolIfTrueFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP12GXFoundation33GXUtilitiesDeveloperInfoExtension_")
@protocol GXUtilitiesDeveloperInfoExtension <NSObject>
@property (nonatomic, readonly) BOOL isDeveloperInfoExtensionDynamic;
@property (nonatomic, readonly) BOOL showDeveloperInfo;
@end

@protocol GXWCSessionServiceDelegate;

SWIFT_PROTOCOL_NAMED("GXWCSessionService")
@protocol GXWCSessionService <NSObject>
- (void)registerDelegate:(id <GXWCSessionServiceDelegate> _Nonnull)delegate forIdentifier:(NSString * _Nonnull)identifier;
- (void)executeWithActiveSession:(void (^ _Nonnull)(NSError * _Nullable))handler;
@property (nonatomic, readonly) BOOL isPaired;
@property (nonatomic, readonly) BOOL isWatchAppInstalled;
@property (nonatomic, readonly, copy) NSURL * _Nullable watchDirectoryURL;
@property (nonatomic, readonly) BOOL canSendMessage;
- (void)sendMessage:(NSDictionary<NSString *, id> * _Nonnull)message withIdentifier:(NSString * _Nonnull)identifier replyHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))replyHandler errorHandler:(void (^ _Nullable)(NSError * _Nonnull))errorHandler;
- (void)transferUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey;
@end


SWIFT_PROTOCOL_NAMED("GXWCSessionServiceDelegate")
@protocol GXWCSessionServiceDelegate <NSObject>
@optional
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didReceiveMessage:(NSDictionary<NSString *, id> * _Nonnull)message withIdentifier:(NSString * _Nonnull)identifier replyHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))replyHandler;
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didFinishUserInfoTransfer:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey;
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didFailUserInfoTransfer:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey error:(NSError * _Nonnull)error retry:(void (^ _Nullable)(void))retry;
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didReceiveUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey;
@end


@interface NSArray<ObjectType> (SWIFT_EXTENSION(GXFoundation))
/// Applies the selector to each element of the array and returns a dictionary with the results as keys and the elements of the array as values
- (NSDictionary * _Nonnull)dictionaryWithSelectorForKeys:(SEL _Nonnull)keySelector SWIFT_WARN_UNUSED_RESULT;
/// Applies the block to each element of the array and returns a dictionary with the results as keys and the elements of the array as values
- (NSDictionary * _Nonnull)dictionaryWithBlockForKeys:(SWIFT_NOESCAPE NSObject * _Nonnull (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Applies the block to each element and returns an array with the results
- (NSArray * _Nonnull)map:(SWIFT_NOESCAPE id _Nonnull (^ _Nonnull)(id _Nonnull))transform SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)compactMap:(SWIFT_NOESCAPE id _Nullable (^ _Nonnull)(id _Nonnull))transform SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)compactMapFirst:(SWIFT_NOESCAPE id _Nullable (^ _Nonnull)(id _Nonnull))transform SWIFT_WARN_UNUSED_RESULT;
/// Applies the seletor to each element and returns an array with the results
- (NSArray * _Nonnull)mapWithSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
/// Returns the first element of the array that passes the test given by the block
- (id _Nullable)findFirst:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Returns the last element of the array that passes the test given by the block
- (id _Nullable)findLast:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Returns a new array containing only the objects passing the test given by the block
- (NSArray * _Nonnull)filter:(BOOL (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Converts an array of arrays into a flattened array (one-level deep)
- (NSArray * _Nonnull)flatten SWIFT_WARN_UNUSED_RESULT;
/// Randomly shuffles the elements of the array
- (NSArray * _Nonnull)shuffledArray SWIFT_WARN_UNUSED_RESULT;
/// Looks for the given object and returns an array without it
- (NSArray * _Nonnull)arrayByRemovingObject:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// Looks for the given object using reference comparison and returns an array without it
- (NSArray * _Nonnull)arrayByRemovingObjectIdenticalTo:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// A Boolean value indicating whether the array is empty.
@property (nonatomic, readonly) BOOL isEmpty;
@end


@interface NSCalendar (SWIFT_EXTENSION(GXFoundation))
/// Gregorian calendar with UTC time zone
+ (NSCalendar * _Nonnull)gxCalendar SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation)) <YAJLCoding>
@property (nonatomic, readonly) id _Null_unspecified JSON;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation))
+ (NSDate * _Nonnull)gxEmptyDate SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)gxEmptyDateTime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGxEmptyDate SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation))
/// Returns YES if date has values smaller than days, NO otherwise
- (BOOL)isGxDateTime SWIFT_WARN_UNUSED_RESULT;
/// Returns YES if date has same year, month and day than gxEmptyDate, NO otherwise
- (BOOL)isGxTimeOnlyDateTime SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than seconds (yyyy-MM-dd HH:mm:ss)
- (NSDate * _Nonnull)gxDateTimeNSDate SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than milliseconds (yyyy-MM-dd HH:mm:ss.SSS)
- (NSDate * _Nonnull)gxDateTimeNSDateMS SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than seconds and has no values (same as empty) greater than hours (HH:mm:ss)
- (NSDate * _Nonnull)gxDateNSDate SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than seconds and has no values (same as empty) greater than hours (HH:mm:ss). The resulting time is expressed in UTC timezone,
- (NSDate * _Nonnull)gxTimeOnlyDateTimeNSDate SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than milliseconds and has no values (same as empty) greater than hours (HH:mm:ss.SSS). The resulting time is expressed in UTC timezone,
- (NSDate * _Nonnull)gxTimeOnlyDateTimeNSDateMS SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation))
- (NSTimeInterval)localTimeZoneSecondsFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)localTimeZoneDateFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)gmtTimeZoneDateFromLocal SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)currentTimeZoneSecondsFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)currentTimeZoneDateFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)gmtTimeZoneDateFromCurrent SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)currentTimeZoneDateFromLocal SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)localTimeZoneDateFromCurrent SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSError (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nullable)userInfoLocalizedDescription SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasUserInfoLocalizedDescription SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable gxDeveloperDescription;
/// Logs localized description if show developer info is enabled
/// remark:
/// See [GXUtilities showDeveloperInfo]
///
/// returns:
/// YES if show developer info is enabled, NO otherwise
- (BOOL)logLocalizedDescriptionIfShowDeveloperInfoIsEnabled;
- (BOOL)isUserCancelledError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLoopExitError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotConnectedToInternetError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLoginCanceledError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotAuthorizedError SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the error could be caused due to bad network conditions, <code>false</code> otherwise.
/// Errors include:
/// <ul>
///   <li>
///     TimedOut: the timeout interval in request expires before a load can complete
///   </li>
///   <li>
///     CannotFindHost: the host name for a URL cannot be resolved (DNS lookup failed)
///   </li>
///   <li>
///     CannotConnectToHost: an attempt to connect to a host has failed; this can occur when a host name resolves, but the host is down or may not be accepting connections on a certain port
///   </li>
///   <li>
///     NetworkConnectionLost: a client or server connection is severed in the middle of an in-progress load
///   </li>
///   <li>
///     NotConnectedToInternet: an internet connection is not established and cannot be established automatically, either through a lack of connectivity, or by the user’s choice not to make a network connection automatically
///   </li>
///   <li>
///     InternationalRoamingOff: would require activating a data context while roaming, but international roaming is disabled
///   </li>
///   <li>
///     CallIsActive: a phone call is active on a network that does not support simultaneous phone and data communication (EDGE or GPRS)
///   </li>
///   <li>
///     DataNotAllowed: the cellular network disallows a connection
///   </li>
/// </ul>
- (BOOL)isNetworkPossibleError SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>GXErrCode</code> for the given error
/// if <code>error == nil</code>, <code>.noError</code> is returned, otherwise <code>error.gxErrCode</code> is returned
/// \param error Optional error to return GXErrCode from
///
+ (GXErrCode)gxErrCodeFromError:(NSError * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns the GXErrCode
/// if <code>isUserCancelledError()</code>, returns <code>.userCancelled</code>, otherwise looks for <code>GXErrCode</code> in <code>userInfo[GXErrUserInfoKey]</code>, if no vlue is found (or an invalid one (like <code>.noError</code> or <code>.userCancelled</code>)  <code>.genericError</code> is returned.
/// note:
/// <code>.noError</code> is never returned.
@property (nonatomic, readonly) GXErrCode gxErrCode;
@end


@interface NSError (SWIFT_EXTENSION(GXFoundation))
+ (NSError * _Nonnull)userCancelledError SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)userCancelledErrorWithUnderlyingError:(NSError * _Nullable)underlyingError SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)loopExitError SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain, code and description
+ (NSError * _Nonnull)defaultGXError SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)defaultGXErrorWithDeveloperDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)defaultGXErrorWithDeveloperDescription:(NSString * _Nonnull)description userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Same as defaultGXErrorWithDeveloperDescription: but using GXFatalErrorDomain
+ (NSError * _Nonnull)fatalGXErrorWithDeveloperDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with the given domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)errorWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code developerDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with the given domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)errorWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code developerDescription:(NSString * _Nonnull)description userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)defaultGXErrorWithLocalizedDescription:(NSString * _Nullable)description SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)defaultGXErrorWithCode:(NSInteger)code localizedDescription:(NSString * _Nullable)description SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)errorWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code localizedDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)errorForHTTPURLResponseStatusCode:(NSInteger)statusCode SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)loginCanceledError SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)notAutorizedErrorWithDescription:(NSString * _Nullable)desc SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)wrongNumberOfParametersDeveloperErrorForMethod:(NSString * _Nonnull)methodName SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)wrongNumberOfParametersDeveloperErrorForMethod:(NSString * _Nonnull)methodName received:(NSInteger)received expected:(NSInteger)expected SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)permissionDeniedErrorWithGoToSettingsRecoveryAttempter SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain with a recovery attempter
/// \param settingsLocalizedRecoveryOption String used for the recovery option, default “Settings” is used if nil.
///
/// \param localizedDescription String used for the error’s localized description, default “Permission denied” is used if nil.
///
/// \param localizedRecoverySuggestion String used for the recovery suggestion, default “Enable permission in Settings” is used if nil.
///
+ (NSError * _Nonnull)permissionDeniedErrorWithGoToSettingsRecoveryAttempter:(NSString * _Nullable)settingsLocalizedRecoveryOption localizedDescription:(NSString * _Nullable)localizedDescription localizedRecoverySuggestion:(NSString * _Nullable)localizedRecoverySuggestion SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)posixError:(int32_t)err SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSMutableArray<ObjectType> (SWIFT_EXTENSION(GXFoundation))
- (void)addObjectsFromSet:(NSSet * _Nonnull)set;
- (void)filterUsingBlock:(BOOL (^ _Nonnull)(id _Nullable))block;
/// Randomly in-place shuffles the elements of the mutable array
- (void)shuffle;
@end


@interface NSMutableSet<ObjectType> (SWIFT_EXTENSION(GXFoundation))
/// Returns YES if the object was added, NO if it was removed
- (BOOL)addObjectOrRemoveIfContained:(id _Nonnull)object;
/// Returns YES if the object was added, NO if it was already contained
- (BOOL)addObjectIfNotContained:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Retuns YES if the object was contained (and removed), NO otherwise
- (BOOL)removeObjectIfContained:(id _Nonnull)object;
- (void)removeObjectsInArray:(NSArray * _Nonnull)array;
@end


@interface NSMutableString (SWIFT_EXTENSION(GXFoundation))
- (void)xmlSimpleEscape;
- (void)xmlSimpleUnescape;
@end


@interface NSNumber (SWIFT_EXTENSION(GXFoundation))
- (BOOL)gxIsInteger SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToDecimals:(NSNumber * _Nullable)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToDecimalsInt:(NSInteger)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToEvenDecimals:(NSNumber * _Nullable)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToEvenDecimalsInt:(NSInteger)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberTruncatedToDecimals:(NSNumber * _Nullable)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberTruncatedToDecimalsInt:(NSInteger)dec SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
+ (NSUInteger)gxStringEncodingFromURLResponse:(NSURLResponse * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)gxStringWithOnlyFirstLetterCapitalized SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)xmlSimpleEscapeString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)xmlSimpleUnescapeString SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)urlSimpleEscapeString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)urlSimpleUnescapeString SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)ltrim SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)rtrim SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)trim SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nullable)mimeTypeForPathExtension SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mimeTypeApplicationOctetStream;)
+ (NSString * _Nonnull)mimeTypeApplicationOctetStream SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSUInteger)gxNumberOfOccurrencesOfString:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
/// Returns the substring of the instance string, just before the occurrence of str.
/// For example
/// test = [@“some test/string” gxStringUpToFirstOccurrenceOfString:@”/”]; // test = @“some test”
/// If str is not found in the original string, it is returned unmodified
- (NSString * _Nonnull)gxStringUpToFirstOccurrenceOfString:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)gxSeparateStringWithSeparator:(NSString * _Nonnull)separatorStr escapeString:(NSString * _Nonnull)escapeStr SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the instance string is equals to the parameter string without taking into account their casing
- (BOOL)gxCaseInsensitiveEquals:(NSString * _Nonnull)otherString SWIFT_WARN_UNUSED_RESULT;
@end

@class NSOperationQueue;
@class NSNotification;

@interface NSNotificationCenter (SWIFT_EXTENSION(GXFoundation))
/// Adds observer for the given notification name, object, queue & block, but also removes observer after first call.
- (id <NSObject> _Nonnull)gxAddOnceObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)object queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block;
@end




@interface NSNumberFormatter (SWIFT_EXTENSION(GXFoundation))
+ (NSNumberFormatter * _Nullable)numberFormatterForGXPicture:(NSString * _Nullable)picture localeId:(NSString * _Nullable)localeId numberHasDecimals:(BOOL)hasDecimals SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForNumberFormat:(NSString * _Nonnull)numberFormat localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForNumberFormat:(NSString * _Nonnull)numberFormat zeroSymbol:(NSString * _Nullable)zeroSymbol localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForMaximumFractionDigits:(NSInteger)maxFractionDigits maximumIntegerDigits:(NSInteger)maxIntegerDigits localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForLocale_en_US_POSIX SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)decimalNumberFormatterForLocales_en_US_POSIX SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSOperation (SWIFT_EXTENSION(GXFoundation)) <GXCancelableOperation>
@end

@protocol GXParseJsonOperationDelegate;
@protocol GXURLRequestOperationDelegate;

@interface NSOperationQueue (SWIFT_EXTENSION(GXFoundation))
/// Creates a pipe composed of a URL request operation, a data setter operation and a parse JSON operation, and adds them to the operation queue
/// \param request the request for the URL requst operation to perform
///
/// \param delegate the delegate for both the URL request and the parse JSON operations
///
///
/// returns:
/// The last operation in the pipe (i.e., the parse JSON operation)
- (NSOperation * _Nonnull)addURLRequestAndParseJSONOperationsForRequest:(NSURLRequest * _Nonnull)request delegate:(id <GXParseJsonOperationDelegate, GXURLRequestOperationDelegate> _Nonnull)delegate;
@end



@interface NSThread (SWIFT_EXTENSION(GXFoundation))
@property (nonatomic, readonly, strong) GXThreadErrorHandler * _Nonnull gxErrorHandler;
@end


@interface UIColor (SWIFT_EXTENSION(GXFoundation))
+ (UIColor * _Nullable)colorFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Returns the same value as GeneXus RGB function
@property (nonatomic, readonly) NSInteger gxRGBColor;
- (CGFloat)gxColorAlpha SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGxColorTransparent SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)gxColorPerceivedBrightness SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isColorDark SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isColorBright SWIFT_WARN_UNUSED_RESULT;
@end


@interface UITraitCollection (SWIFT_EXTENSION(GXFoundation))
@property (nonatomic, readonly) BOOL gxIsDarkUIStyle;
@end


@class NSURLSessionConfiguration;
@protocol NSURLSessionDelegate;

@interface NSURLSession (SWIFT_EXTENSION(GXFoundation))
+ (NSURLSession * _Nonnull)gxSessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration delegate:(id <NSURLSessionDelegate> _Nullable)delegate delegateQueue:(NSOperationQueue * _Nullable)queue SWIFT_WARN_UNUSED_RESULT;
+ (NSURLSession * _Nonnull)gxSessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSURLSession * _Nonnull gxSharedSession;)
+ (NSURLSession * _Nonnull)gxSharedSession SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLSessionDataTask;
@class NSURLSessionUploadTask;
@class NSURLSessionDownloadTask;

@interface NSURLSession (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)gxMayBeLocalNetworkPermissionError:(NSError * _Nonnull)error forURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDataTask * _Nonnull)gxDataTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDataTask * _Nonnull)gxDataTaskWaitingForPermissionWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionUploadTask * _Nonnull)gxUploadTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionUploadTask * _Nonnull)gxUploadTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request from:(NSData * _Nullable)bodyData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDownloadTask * _Nonnull)gxDownloadTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDownloadTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDownloadTask * _Nonnull)gxDownloadTaskWaitingForPermissionWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDownloadTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSURLSessionTask (SWIFT_EXTENSION(GXFoundation)) <GXCancelableOperation>
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
#ifndef GXFOUNDATION_SWIFT_H
#define GXFOUNDATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import YAJL;
#endif

#import <GXFoundation/GXFoundation.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GXFoundation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

@interface NSBundle (SWIFT_EXTENSION(GXFoundation))
/// Returns the bundle of the Unit Test if running in the context of a XCTest, the main bundle otherwise.
/// note:
/// Same as Bundle.main in any context but when running in an Unit Test. Usefull for unit testing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull gxMainBundle;)
+ (NSBundle * _Nonnull)gxMainBundle SWIFT_WARN_UNUSED_RESULT;
/// Returns the bundle name from the info dictionay using CFBundleName key
@property (nonatomic, readonly, copy) NSString * _Nullable gxBundleName;
@end


@interface CLLocationManager (SWIFT_EXTENSION(GXFoundation))
@property (nonatomic, readonly) CLAuthorizationStatus gxAuthorizationStatus;
@end



@interface NSDateFormatter (SWIFT_EXTENSION(GXFoundation))
+ (NSDateFormatter * _Nonnull)dateFormatterWithTimeZone_UTC_ForDateFormatterDateStyle:(enum NSDateFormatterStyle)dateStyle timeStyle:(enum NSDateFormatterStyle)timeStyle hasMilliseconds:(BOOL)hasMilliseconds localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nonnull)dateFormatterWithTimeZone_UTC_ForDateFormatterDateStyle:(enum NSDateFormatterStyle)dateStyle timeStyle:(enum NSDateFormatterStyle)timeStyle hasMilliseconds:(BOOL)hasMilliseconds localeId:(NSString * _Nullable)localeId useCurrentCalendar:(BOOL)useCurrentCalendar SWIFT_WARN_UNUSED_RESULT;
+ (NSDateFormatter * _Nonnull)dateFormatterWithTimeZone_UTC_Locale_en_US_POSIX_forDateFormat:(NSString * _Nonnull)dateFormat SWIFT_WARN_UNUSED_RESULT;
+ (enum NSDateFormatterStyle)dateFormatterStyleFromGXDataDateFormat:(GXDataDateFormat)dateFormat SWIFT_WARN_UNUSED_RESULT;
+ (enum NSDateFormatterStyle)dateFormatterStyleFromGXDataTimeFormat:(GXDataTimeFormat)timeFormat SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)gxDateFormatForShortGXFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM_NAMED(uint_least8_t, GXActivityIndicatorType, "GXActivityIndicatorType", open) {
  GXActivityIndicatorTypeIndeterminated = 0,
  GXActivityIndicatorTypeDeterminated = 1,
};


SWIFT_PROTOCOL_NAMED("GXAlertMessageService")
@protocol GXAlertMessageService <NSObject>
- (void)showMessage:(NSString * _Nonnull)message;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages;
- (void)showMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertForError:(NSError * _Nullable)error;
- (void)showAlertForError:(NSError * _Nullable)error completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
@end


SWIFT_PROTOCOL_NAMED("GXCancelableOperation")
@protocol GXCancelableOperation <NSObject>
- (void)cancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationBase")
@interface GXCancelableOperationBase : NSObject
@property (nonatomic, readonly, getter=isCancelled) BOOL cancelled;
- (void)performCancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface GXCancelableOperationBase (SWIFT_EXTENSION(GXFoundation)) <GXCancelableOperation>
- (void)cancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationComposite")
@interface GXCancelableOperationComposite : GXCancelableOperationBase
- (nonnull instancetype)initWithChildOperations:(NSArray<id <GXCancelableOperation>> * _Nonnull)childOperations OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)performCancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationWithBlock")
@interface GXCancelableOperationWithBlock : GXCancelableOperationBase
- (nonnull instancetype)initWithCancelBlock:(void (^ _Nullable)(void))cancelblock OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)performCancel;
@end


SWIFT_CLASS_NAMED("GXCancelableOperationWrapper")
@interface GXCancelableOperationWrapper : GXCancelableOperationBase
/// Assigning a new innerOperation when isCancelled, cancels the new operation
@property (nonatomic, strong) id <GXCancelableOperation> _Nonnull innerOperation;
- (nonnull instancetype)initWithInnerOperation:(id <GXCancelableOperation> _Nonnull)innerOperation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)performCancel;
@end

@class UIColor;

SWIFT_PROTOCOL_NAMED("GXPropertiesObjectProtocol")
@protocol GXPropertiesObject <NSObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getPropertyValueInteger:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getPropertyValueFloat:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPropertyValueString:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)getPropertyValueColor:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL_NAMED("GXCodingPropertiesObjectProtocol")
@protocol GXCodingPropertiesObject <NSCoding, GXPropertiesObject>
- (id <NSCoding> _Nullable)getCodingPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXPropertiesObject")
@interface GXPropertiesObject : NSObject
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSCoder;

SWIFT_CLASS_NAMED("GXCodingPropertiesObject")
@interface GXCodingPropertiesObject : GXPropertiesObject <GXCodingPropertiesObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (id <NSCoding> _Nullable)getCodingPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


@class NSURL;
@class UITraitCollection;
@class UIWindow;
@class UIScene;
@class UISceneSession;

SWIFT_PROTOCOL("_TtP12GXFoundation22GXExecutionEnvironment_")
@protocol GXExecutionEnvironment <NSObject>
@property (nonatomic, readonly) GXApplicationStateType applicationState;
@property (nonatomic, readonly, getter=isTransitioningFromBackgroundToForeground) BOOL transitioningFromBackgroundToForeground;
@property (nonatomic, readonly) BOOL activeStateNotificationsSupported;
@property (nonatomic, readonly, copy) NSString * _Nullable didBecomeActiveNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable willResignActiveNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable didReceiveMemoryWarningNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable willTerminateNotification;
@property (nonatomic, readonly, getter=isMultitaskingSupported) BOOL multitaskingSupported;
@property (nonatomic, readonly) BOOL multitaskingNotificationsSupported;
@property (nonatomic, readonly, copy) NSString * _Nullable didEnterBackgroundNotification;
@property (nonatomic, readonly, copy) NSString * _Nullable willEnterForegroundNotification;
@optional
@property (nonatomic, readonly) NSTimeInterval backgroundTimeRemaining;
- (GXBackgroundTaskIdentifier)backgroundTaskInvalidIdentifier SWIFT_WARN_UNUSED_RESULT;
- (GXBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString * _Nullable)taskName expirationHandler:(void (^ _Nullable)(void))handler SWIFT_WARN_UNUSED_RESULT;
- (void)endBackgroundTask:(GXBackgroundTaskIdentifier)identifier;
- (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nullable)options completionHandler:(void (^ _Nullable)(BOOL))completion;
@property (nonatomic, readonly, copy) NSString * _Nullable openURLOptionUniversalLinksOnlyKey;
- (BOOL)canOpenURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@required
@property (nonatomic, readonly, strong) UITraitCollection * _Nonnull currentTraitCollection;
@property (nonatomic, readonly, strong) UIWindow * _Nullable keyWindow SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes");
@property (nonatomic, readonly, copy) NSArray<UIWindow *> * _Nonnull windows SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.");
@property (nonatomic, readonly, copy) NSSet<UIScene *> * _Nonnull connectedScenes SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@property (nonatomic, readonly, copy) NSSet<UISceneSession *> * _Nonnull openSessions SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@optional
@property (nonatomic, readonly) BOOL supportsMultipleScenes SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0);
@required
- (void)sendActionToFirstResponder:(SEL _Nonnull)action;
@property (nonatomic, readonly) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection;
@property (nonatomic, readonly) CGRect statusBarFrame SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use the statusBarManager property of the window scene instead.");
@property (nonatomic, readonly) UIInterfaceOrientation interfaceOrientation;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientationsForKeyWindow;
@property (nonatomic, readonly) UIContentSizeCategory _Nonnull preferredContentSizeCategory;
@property (nonatomic, readonly) BOOL preferredContentSizeCategoryIsAccessibilityCategory;
@optional
- (void)beginReceivingRemoteControlEvents;
- (void)endReceivingRemoteControlEvents;
@end


SWIFT_CLASS_NAMED("GXExecutionEnvironmentHelper")
@interface GXExecutionEnvironmentHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<UIWindow *> * _Nonnull allConnectedWindows;)
+ (NSArray<UIWindow *> * _Nonnull)allConnectedWindows SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
+ (void)beginReceivingRemoteControlEvents;
+ (void)endReceivingRemoteControlEvents;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
+ (void)openURL:(NSURL * _Nonnull)url options:(NSDictionary<NSString *, id> * _Nullable)options completionHandler:(void (^ _Nullable)(BOOL))completion;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable openURLOptionUniversalLinksOnlyKey;)
+ (NSString * _Nullable)openURLOptionUniversalLinksOnlyKey SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canOpenURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
@end

@class UIWindowScene;

SWIFT_AVAILABILITY(tvos,introduced=13.0) SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSSet<UIScene *> * _Nonnull connectedScenes;)
+ (NSSet<UIScene *> * _Nonnull)connectedScenes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<UIWindowScene *> * _Nonnull connectedWindowScenes;)
+ (NSArray<UIWindowScene *> * _Nonnull)connectedWindowScenes SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSSet<UISceneSession *> * _Nonnull openSessions;)
+ (NSSet<UISceneSession *> * _Nonnull)openSessions SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL backgroundTaskSupported;)
+ (BOOL)backgroundTaskSupported SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)backgroundTimeRemaining SWIFT_WARN_UNUSED_RESULT;
+ (GXBackgroundTaskIdentifier)backgroundTaskInvalidIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (GXBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString * _Nullable)taskName expirationHandler:(void (^ _Nullable)(void))handler SWIFT_WARN_UNUSED_RESULT;
+ (void)endBackgroundTask:(GXBackgroundTaskIdentifier)identifier;
@end



@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, getter=isMultitaskingSupported) BOOL multitaskingSupported;)
+ (BOOL)isMultitaskingSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL multitaskingNotificationsSupported;)
+ (BOOL)multitaskingNotificationsSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextDidEnterBackgroundNotification;)
+ (NSString * _Nullable)currentContextDidEnterBackgroundNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextWillEnterForegroundNotification;)
+ (NSString * _Nullable)currentContextWillEnterForegroundNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) GXApplicationStateType applicationState;)
+ (GXApplicationStateType)applicationState SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, getter=isTransitioningFromBackgroundToForeground) BOOL transitioningFromBackgroundToForeground;)
+ (BOOL)isTransitioningFromBackgroundToForeground SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)activeStateNotificationsSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextDidBecomeActiveNotification;)
+ (NSString * _Nullable)currentContextDidBecomeActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextWillResignActiveNotification;)
+ (NSString * _Nullable)currentContextWillResignActiveNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextDidReceiveMemoryWarningNotification;)
+ (NSString * _Nullable)currentContextDidReceiveMemoryWarningNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable currentContextWillTerminateNotification;)
+ (NSString * _Nullable)currentContextWillTerminateNotification SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXExecutionEnvironmentHelper (SWIFT_EXTENSION(GXFoundation))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UITraitCollection * _Nonnull currentTraitCollection;)
+ (UITraitCollection * _Nonnull)currentTraitCollection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIWindow * _Nullable keyWindow SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Should not be used for applications that support multiple scenes as it returns a key window across all connected scenes");)
+ (UIWindow * _Nullable)keyWindow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<UIWindow *> * _Nonnull windows SWIFT_AVAILABILITY(tvos,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.") SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use UIWindowScene.windows on a relevant window scene instead.");)
+ (NSArray<UIWindow *> * _Nonnull)windows SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL supportsMultipleScenes;)
+ (BOOL)supportsMultipleScenes SWIFT_WARN_UNUSED_RESULT;
+ (void)sendActionToFirstResponder:(SEL _Nonnull)action;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, getter=isDarkUIStyle) BOOL darkUIStyle;)
+ (BOOL)isDarkUIStyle SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL darkUIStyleRuntimeChangeSupported;)
+ (BOOL)darkUIStyleRuntimeChangeSupported SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection;)
+ (UIUserInterfaceLayoutDirection)userInterfaceLayoutDirection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLayoutDirectionLeftToRight;)
+ (BOOL)isLayoutDirectionLeftToRight SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isLayoutDirectionRightToLeft;)
+ (BOOL)isLayoutDirectionRightToLeft SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGRect statusBarFrame SWIFT_AVAILABILITY(ios,deprecated=13.0,message="Use the statusBarManager property of the window scene instead.");)
+ (CGRect)statusBarFrame SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIInterfaceOrientation interfaceOrientation;)
+ (UIInterfaceOrientation)interfaceOrientation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIInterfaceOrientationMask supportedInterfaceOrientationsForKeyWindow;)
+ (UIInterfaceOrientationMask)supportedInterfaceOrientationsForKeyWindow SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) UIContentSizeCategory _Nonnull preferredContentSizeCategory;)
+ (UIContentSizeCategory _Nonnull)preferredContentSizeCategory SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL preferredContentSizeCategoryIsAccessibilityCategory;)
+ (BOOL)preferredContentSizeCategoryIsAccessibilityCategory SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXFoundationServices")
@interface GXFoundationServices : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@protocol GXLoggerService;
@protocol GXNetworkActivityIndicatorService;
@protocol GXProgressActivityIndicatorService;
@protocol GXWCSessionService;

@interface GXFoundationServices (SWIFT_EXTENSION(GXFoundation))
+ (id <GXAlertMessageService> _Nonnull)alertMessageService SWIFT_WARN_UNUSED_RESULT;
+ (id <GXLoggerService> _Nullable)loggerService SWIFT_WARN_UNUSED_RESULT;
+ (id <GXNetworkActivityIndicatorService> _Nullable)networkActivityIndicatorService SWIFT_WARN_UNUSED_RESULT;
+ (id <GXProgressActivityIndicatorService> _Nullable)progressActivityIndicatorService SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <GXWCSessionService> _Nullable watchConnectivityService;)
+ (id <GXWCSessionService> _Nullable)watchConnectivityService SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXHTTPWarningHeader")
@interface GXHTTPWarningHeader : NSObject
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull agent;
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (nonnull instancetype)initWithCode:(NSInteger)code agent:(NSString * _Nonnull)agent text:(NSString * _Nonnull)text OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Checks if is a User warning
///
/// returns:
/// YES if text has User: (or Encoded:User:) prefix, NO otherwise
- (BOOL)isUserWarning SWIFT_WARN_UNUSED_RESULT;
/// Checks if is a System warning
///
/// returns:
/// YES if text has System: (or Encoded:System:) prefix, NO otherwise
- (BOOL)isSystemWarning SWIFT_WARN_UNUSED_RESULT;
/// Checks if is a warning is encoded
///
/// returns:
/// YES if text has Encoded: prefix, NO otherwise
- (BOOL)isWarningEncoded SWIFT_WARN_UNUSED_RESULT;
/// Removes text prefixes (Encode:, User: or System:) and unencodes if needed
- (NSString * _Nonnull)warningText SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXInsensitiveMetadata")
@interface GXInsensitiveMetadata : NSObject
+ (id _Nullable)metadataObjectForKey:(NSString * _Nonnull)key fromMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXInvocationWithSelfOperation")
@interface GXInvocationWithSelfOperation : NSOperation
@property (nonatomic) BOOL hasReturnValue;
@property (nonatomic, readonly, strong) id _Nullable result;
@property (nonatomic) id _Nullable context;
- (nonnull instancetype)initWithTarget:(id _Nonnull)target selector:(SEL _Nonnull)sel OBJC_DESIGNATED_INITIALIZER;
- (void)main;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLRequest;
@class NSURLResponse;
@class NSData;
@protocol GXLogListener;

SWIFT_CLASS("_TtC12GXFoundation5GXLog")
@interface GXLog : NSObject
+ (BOOL)isLogEnabled SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logInConsole;)
+ (BOOL)logInConsole SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logInFileEnabled;)
+ (BOOL)logInFileEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isLogRequestsEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isLogResponsesEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isLogResponsesBodyEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)logMessage:(NSString * _Nonnull)message;
+ (void)logJSONObject:(id _Nonnull)object withTitle:(NSString * _Nonnull)title;
+ (void)logURLRequestIfEnabled:(NSURLRequest * _Nonnull)request;
+ (void)logURLResponseIfEnabled:(NSURLResponse * _Nonnull)response request:(NSURLRequest * _Nonnull)request data:(NSData * _Nullable)data;
+ (void)logURLResponseIfEnabled:(NSURLResponse * _Nonnull)response request:(NSURLRequest * _Nonnull)request dataPath:(NSString * _Nonnull)dataPath;
+ (void)logJSONParserElementIfEnabled:(id _Nonnull)element;
+ (void)clearLog;
+ (NSString * _Nullable)logString SWIFT_WARN_UNUSED_RESULT;
+ (void)addListener:(id <GXLogListener> _Nonnull)listener;
+ (void)removeListener:(id <GXLogListener> _Nonnull)listener;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXLog * _Nonnull sharedInstance;)
+ (GXLog * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXLog (SWIFT_EXTENSION(GXFoundation))
+ (id <GXLoggerService> _Null_unspecified)loggerService SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC12GXFoundation24GXLogAlertMessageService")
@interface GXLogAlertMessageService : NSObject <GXAlertMessageService>
- (void)showMessage:(NSString * _Nonnull)message;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages;
- (void)showMessage:(NSString * _Nonnull)message completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showMessages:(NSArray<NSString *> * _Nonnull)messages completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg;
- (void)showAlertWithTitle:(NSString * _Nullable)alertTitle message:(NSString * _Nullable)alertMsg completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (void)showAlertForError:(NSError * _Nullable)error;
- (void)showAlertForError:(NSError * _Nullable)error completion:(void (^ _Nullable)(void))completion dismissedHandler:(void (^ _Nullable)(void))dismissedHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP12GXFoundation13GXLogListener_")
@protocol GXLogListener <NSObject>
- (void)logListenerNotifyMessage:(NSString * _Nonnull)message;
@end

typedef SWIFT_ENUM(NSInteger, GXLoggerLevel, open) {
  GXLoggerLevelOff = 0,
  GXLoggerLevelAlways = 1,
  GXLoggerLevelFatal = 2,
  GXLoggerLevelError = 3,
  GXLoggerLevelWarning = 4,
  GXLoggerLevelInfo = 5,
  GXLoggerLevelDebug = 6,
};

enum GXLoggerType : NSInteger;

SWIFT_PROTOCOL("_TtP12GXFoundation15GXLoggerService_")
@protocol GXLoggerService <NSObject>
- (void)startLogging;
- (void)endLogging;
@property (nonatomic, readonly) BOOL isLogEnabled;
- (enum GXLoggerLevel)logLevelForType:(enum GXLoggerType)type SWIFT_WARN_UNUSED_RESULT;
- (void)logMessage:(NSString * _Nonnull)message forType:(enum GXLoggerType)type withLevel:(enum GXLoggerLevel)level logToConsole:(BOOL)logToConsole;
@end

typedef SWIFT_ENUM(NSInteger, GXLoggerType, open) {
  GXLoggerTypeGeneral = 0,
  GXLoggerTypeNetwork = 1,
  GXLoggerTypeSynchronization = 2,
  GXLoggerTypeDatabase = 3,
};


SWIFT_PROTOCOL_NAMED("GXMutablePropertiesObjectProtocol")
@protocol GXMutablePropertiesObject <GXPropertiesObject>
- (void)setPropertyValue:(id _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)removePropertyFoPropertyName:(NSString * _Nonnull)propertyName;
- (void)setBoolProperty:(BOOL)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setIntegerProperty:(NSInteger)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setFloatProperty:(CGFloat)value forPropertyName:(NSString * _Nonnull)propertyName;
@end


SWIFT_PROTOCOL_NAMED("GXMutableCodingPropertiesObjectProtocol")
@protocol GXMutableCodingPropertiesObject <GXCodingPropertiesObject, GXMutablePropertiesObject>
- (void)setCodingPropertyValue:(id <NSCoding> _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
@end


SWIFT_CLASS_NAMED("GXMutablePropertiesObject")
@interface GXMutablePropertiesObject : GXPropertiesObject <GXMutablePropertiesObject>
- (void)setPropertyValue:(id _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)removePropertyFoPropertyName:(NSString * _Nonnull)propertyName;
- (void)setBoolProperty:(BOOL)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setIntegerProperty:(NSInteger)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)setFloatProperty:(CGFloat)value forPropertyName:(NSString * _Nonnull)propertyName;
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("GXMutableCodingPropertiesObject")
@interface GXMutableCodingPropertiesObject : GXMutablePropertiesObject <GXMutableCodingPropertiesObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (void)setPropertyValue:(id _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (id <NSCoding> _Nullable)getCodingPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (void)setCodingPropertyValue:(id <NSCoding> _Nullable)value forPropertyName:(NSString * _Nonnull)propertyName;
- (void)encodeWithCoder:(NSCoder * _Nonnull)coder;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithProperties:(NSDictionary<NSString *, id> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end





SWIFT_PROTOCOL_NAMED("GXNetworkActivityIndicatorService")
@protocol GXNetworkActivityIndicatorService <NSObject>
- (void)startActivity;
- (void)stopActivity;
- (void)stopAllActivity;
@end

@class NSNumber;

SWIFT_CLASS_NAMED("GXNumberWithPictureFormatter")
@interface GXNumberWithPictureFormatter : NSNumberFormatter
- (nonnull instancetype)initWithNumberFormat:(NSString * _Nonnull)numberFormat OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)stringFromNumber:(NSNumber * _Nonnull)num SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)stringForObjectValue:(id _Nullable)obj SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)numberFromString:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GXObjectHelper (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)parseObjectType:(NSString * _Nullable * _Nullable)objectType objectName:(NSString * _Nullable * _Nullable)objectName from:(id _Nullable)data;
+ (BOOL)parseObjectTypeEnum:(GXObjectType * _Nullable)objectType objectName:(NSString * _Nullable * _Nullable)objectName from:(id _Nullable)data;
+ (NSString * _Nullable)parseObjectNameOfType:(NSString * _Nonnull)objectType from:(id _Nullable)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)parseObjectNameOfTypeEnum:(GXObjectType)objectType from:(id _Nullable)data SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)objectTypeStringFromEnum:(GXObjectType)objectType SWIFT_WARN_UNUSED_RESULT;
+ (GXObjectType)objectTypeEnumFromString:(NSString * _Nullable)objectType SWIFT_WARN_UNUSED_RESULT;
@end

@class GXProgressIndicatorData;

SWIFT_PROTOCOL_NAMED("GXProgressActivityIndicatorService")
@protocol GXProgressActivityIndicatorService <NSObject>
@property (nonatomic, strong) GXProgressIndicatorData * _Nonnull data;
- (void)showIndicator;
- (void)showIndicatorWithTitle:(NSString * _Nullable)title;
- (void)showIndicatorWithTitle:(NSString * _Nullable)title description:(NSString * _Nullable)description;
- (void)hideIndicator;
- (void)invalidate;
- (void)shouldHideOnNewViewController:(BOOL)hide;
- (BOOL)isShowing SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("GXProgressIndicatorData")
@interface GXProgressIndicatorData : NSObject
@property (nonatomic) enum GXActivityIndicatorType type;
@property (nonatomic, copy) NSString * _Nullable styleClassName;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nullable desc;
@property (nonatomic) NSInteger maxValue;
@property (nonatomic) NSInteger value;
@property (nonatomic) BOOL visible;
@property (nonatomic, readonly) float normalizedValue;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface GXPropertiesObject (SWIFT_EXTENSION(GXFoundation)) <GXPropertiesObject>
- (id _Nullable)getPropertyValue:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getPropertyValueBool:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)getPropertyValueInteger:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)getPropertyValueFloat:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPropertyValueString:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)getPropertyValueColor:(NSString * _Nonnull)propertyName SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS_NAMED("GXRecoveryAttempter")
@interface GXRecoveryAttempter : NSObject
@property (nonatomic, copy) BOOL (^ _Nullable attemptRecoverBlock)(NSError * _Nonnull, NSInteger);
@property (nonatomic, copy) BOOL (^ _Nullable asyncAttemptRecoverBlock)(NSError * _Nonnull, NSInteger, id _Nullable, SEL _Nullable, void * _Nullable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class allows the synchronous execution of asynchronous tasks
SWIFT_CLASS("_TtC12GXFoundation28GXSynchronousExecutionHelper")
@interface GXSynchronousExecutionHelper : NSObject
/// Creates a lock and executes the block in the main queue
/// remark:
/// This method cannot be called from the main thread.
/// \param block The block must perform all the operations that involve the setup and execution of the async task. It is executed after creating / obtaining the lock. It might be NULL.
///
/// \param async Whether the given block is dispatched async or sync on the main queue.
///
- (void)startWithBlock:(void (^ _Nullable)(void))block async:(BOOL)async;
/// Calls [self startWithBlock:block async:YES]
- (void)startWithAsyncBlock:(void (^ _Nullable)(void))block;
/// Calls [self startWithBlock:block async:NO]
- (void)startWithSyncBlock:(void (^ _Nullable)(void))block;
/// Calls [self startWithBlock:NULL async:NO]
- (void)start;
/// Releases de lock and allows executing the first waiting block
- (void)signal;
/// The  block passed to this method will be executed after the async task finishes.
/// remark:
/// This method cannot be called from the main thread.
/// \param block The block to be executing after obtaining the lock. It might be NULL (for just waiting).
///
- (void)executeWaitingBlock:(void (^ _Nullable)(void))block;
/// Calls [self executeWaitingBlock:NULL]
- (void)wait;
/// Releases any lock and cancels execution of any pending block
- (void)cancel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

SWIFT_CLASS_NAMED("GXThreadErrorHandler")
@interface GXThreadErrorHandler : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (GXThreadErrorHandler * _Nonnull)errorHandler SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GXThreadErrorHandler * _Nonnull current;)
+ (GXThreadErrorHandler * _Nonnull)current SWIFT_WARN_UNUSED_RESULT;
- (void)addErrorWithCode:(NSInteger)code description:(NSString * _Nullable)desc;
- (void)addError:(NSError * _Nonnull)error;
- (BOOL)hasError SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSError *> * _Nonnull)getErrors SWIFT_WARN_UNUSED_RESULT;
- (void)clearErrors;
- (void)removeErrorsWithCode:(NSInteger)code;
@end

@class NSTimeZone;
@class NSDate;

@interface GXTimeZone (SWIFT_EXTENSION(GXFoundation))
+ (void)initializeIfNeeded;
+ (NSTimeZone * _Nonnull)currentTimeZone SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)currentTimeZoneName SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nonnull)currentTimeZoneOffset SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)setCurrentTimeZoneWithName:(NSString * _Nonnull)tzName;
+ (NSDate * _Nonnull)convertDateTime:(NSDate * _Nonnull)dateTime fromTimeZone:(NSString * _Nonnull)tzName SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nonnull)stringWithGXFormat:(NSString * _Nonnull)format values:(NSArray * _Nonnull)values SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Returns the given object if it’s kind of the given class, otherwise if it conforms to YAJLCoding
/// protocol, checks again with it’s JSON object, and returns it if it’s kind of the given class, and
/// if not returns nil
+ (id _Nullable)jsonObject:(NSObject * _Nullable)object ofClass:(Class _Nonnull)expectedClass SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Checks if the applications plist declaration includes the given background mode
/// remark:
/// See https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW22
/// \param backgroundMode the background mode to check
///
///
/// returns:
/// Returns YES if the given background mode is contained, NO otherwise
+ (BOOL)applicationContainsBackgroundMode:(NSString * _Nonnull)backgroundMode SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (GXConnectivitySupportType)connectivitySupportFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSArray<NSString *> * _Nonnull)alphabetCharacters SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)alphabetCharacters:(BOOL)ascending SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSError * _Nullable)errorFromResponseData:(NSData * _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<GXHTTPWarningHeader *> * _Nullable)httpWarningsFromHeader:(NSString * _Nullable)warningHeader SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSUInteger)stringEncodingFromCharsetString:(NSString * _Nullable)strEncoding SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nonnull)stringByRemovingEnclosingQuotes:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)stringByRemovingEnclosingQuotes:(NSString * _Nonnull)string hasQuotes:(BOOL * _Nullable)quotes isTranslatable:(BOOL * _Nullable)translatable SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSArray * _Nullable)arrayFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)lastObjectIfArrayFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nullable)urlParametersStringFrom:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)urlParametersStringFrom:(NSDictionary<NSString *, id> * _Nonnull)parameters sorted:(BOOL)sorted SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)urlFromMaybeEscapedURLString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)splitString:(NSString * _Nonnull)string byFirstOcurrenceOfString:(NSString * _Nonnull)separator toLeft:(NSString * _Nullable * _Nullable)left andRigth:(NSString * _Nullable * _Nullable)rigth;
+ (BOOL)splitString:(NSString * _Nonnull)string byLastOcurrenceOfString:(NSString * _Nonnull)separator toLeft:(NSString * _Nullable * _Nullable)left andRigth:(NSString * _Nullable * _Nullable)rigth;
+ (BOOL)splitString:(NSString * _Nonnull)string byOcurrenceOfString:(NSString * _Nonnull)separator withOptions:(NSStringCompareOptions)options toLeft:(NSString * _Nullable * _Nullable)left andRigth:(NSString * _Nullable * _Nullable)rigth;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)setExtendedFileAttributeWithName:(NSString * _Nonnull)name data:(NSData * _Nonnull)data at:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error;
+ (BOOL)removeExtendedFileAttributeWithName:(NSString * _Nonnull)name at:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error;
+ (NSData * _Nullable)dataForExtendedFileAttributeWithName:(NSString * _Nonnull)name at:(NSURL * _Nonnull)fileURL error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Flexible client version
/// Format: major.minor.revision (GXFlexibleClientMinorVersionNumber.GXFlexibleClientMinorVersionNumber.GXFlexibleClientRevisionNumber)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull flexibleClientVersion;)
+ (NSString * _Nonnull)flexibleClientVersion SWIFT_WARN_UNUSED_RESULT;
/// Version in numeric format
/// Format: major.minor.maintenance (ie. 6.1.4) -> major x 10000 + minor x 100 + maintenance (ie. 60104)
/// minor and maintenance must be smaller than 100
+ (NSUInteger)numericRepresentationFromVersionString:(NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// Returns:
/// <ul>
///   <li>
///     NSOrderedAscending  if the metadata version1 is smaller than version2
///   </li>
///   <li>
///     NSOrderedSame       if they are equal
///   </li>
///   <li>
///     NSOrderedDescending if the metadata version1 is grater than version2
///   </li>
/// </ul>
+ (enum NSComparisonResult)comparaVersionString:(NSString * _Nonnull)version1 toVersion:(NSString * _Nonnull)version2 SWIFT_WARN_UNUSED_RESULT;
@end

@protocol GXUtilitiesDeveloperInfoExtension;

@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)showDeveloperInfo SWIFT_WARN_UNUSED_RESULT;
+ (void)registerDeveloperInfoExtension:(id <GXUtilitiesDeveloperInfoExtension> _Nonnull)developerInfoExtension;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// System version in numeric format
/// Format: major.minor.maintenance (ie. 6.1.4) -> major x 10000 + minor x 100 + maintenance (ie. 60104)
+ (NSUInteger)deviceSystemVersion SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)currentDeviceIPAD SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE_4INCH SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE_4_7INCH SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)currentDeviceIPHONE_5_5INCH SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (NSString * _Nonnull)stringFromInteger:(NSInteger)integer SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)stringFromFloat:(float)floatValue SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)stringFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)nonEmptyStringFromObject:(id _Nullable)anObject SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isStringNullOrEmpty:(NSString * _Nullable)string SWIFT_WARN_UNUSED_RESULT;
@end



@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
/// Creates a unique file path in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath instead if file needs to be accessible by GXFileSystemObject
+ (NSString * _Nonnull)createUniqueTemporaryFilePath SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique directory path in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryDirectoryPath instead if directory needs to be accessible by GXFileSystemObject
+ (NSString * _Nonnull)createUniqueTemporaryDirectoryPath SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique path in the temp directory of the application with the given file extension
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath instead if file needs to be accessible by GXFileSystemObject
/// \param ext The path extension
///
+ (NSString * _Nonnull)createUniqueTemporaryFilePathWithExtension:(NSString * _Nullable)ext SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique file URL in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath or createUniqueGXDataTemporaryDirectoryPath instead if file needs to be accessible by GXFileSystemObject
/// \param isDirectory Whether the file URL is a directory or file.
///
+ (NSURL * _Nonnull)createUniqueTemporaryFileURL:(BOOL)isDirectory SWIFT_WARN_UNUSED_RESULT;
/// Creates a unique file URL in the temp directory of the application
/// remark:
/// Cosider using createUniqueGXDataTemporaryFilePath instead if file needs to be accessible by GXFileSystemObject
/// \param ext The file path extension
///
+ (NSURL * _Nonnull)createUniqueTemporaryFileURLWithExtension:(NSString * _Nullable)ext SWIFT_WARN_UNUSED_RESULT;
/// Excludes the given path from backup using NSURLIsExcludedFromBackupKey
+ (void)excludePathFromBackup:(NSString * _Nonnull)path;
@end

@class WKTPoint;
@class MKPolyline;

@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (WKTPoint * _Nullable)wktPointFromGeoString:(NSString * _Nullable)locationStr SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationCoordinate2D)coordinateFromGeoString:(NSString * _Nullable)locationStr forType:(GXDataType)fieldType SWIFT_WARN_UNUSED_RESULT;
+ (CLLocationCoordinate2D)coordinateFromGeoLocationString:(NSString * _Nullable)locationStr SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)geoLocationStringFromCoordinate:(CLLocationCoordinate2D)coordinate SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)geoLocationStringFromCoordinate:(CLLocationCoordinate2D)coordinate forType:(GXDataType)fieldType SWIFT_WARN_UNUSED_RESULT;
+ (MKPolyline * _Nullable)polylineFromGeoLine:(NSString * _Nullable)geolineStr SWIFT_WARN_UNUSED_RESULT;
@end


@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (void)installUncaughtExceptionsHandler;
/// Same as [self tryRecoverFatalError:developerDescription withExceptionName:nil recoveryBlock:^BOOL{ return YES; }]
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription;
/// Same as [self tryRecoverFatalError:developerDescription withExceptionName:exceptionName recoveryBlock:^BOOL{ return YES; }]
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName;
/// Same as [self tryRecoverFatalError:developerDescription withExceptionName:nil recoveryBlock:recoveryBlock]
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription withRecoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock;
+ (void)tryRecoverFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName recoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock;
/// Same as [self tryHandleFatalError:developerDescription withExceptionName:nil recoveryBlock:^BOOL{ return YES; }]
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription SWIFT_WARN_UNUSED_RESULT;
/// Same as [self tryHandleFatalError:developerDescription withExceptionName:exceptionName recoveryBlock:^BOOL{ return YES; }]
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName SWIFT_WARN_UNUSED_RESULT;
/// Same as [self tryHandleFatalError:developerDescription withExceptionName:nil recoveryBlock:recoveryBlock]
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription withRecoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)tryHandleFatalError:(NSString * _Nonnull)developerDescription withExceptionName:(NSExceptionName _Nullable)exceptionName recoveryBlock:(BOOL (^ _Nonnull)(void))recoveryBlock SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDecimalNumber;

@interface GXUtilities (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)boolFromValue:(id _Nullable)value defaultValue:(BOOL)defaultValue SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)boolFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSUInteger)unsignedIntegerFromValue:(id _Nullable)value defaultValue:(NSUInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)unsignedIntegerNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)integerFromValue:(id _Nullable)value defaultValue:(NSInteger)defaultValue SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)integerNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)floatNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)doubleNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSDecimalNumber * _Nullable)decimalNumberFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
+ (NSNumber * _Nullable)numberWithBoolIfTrueFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP12GXFoundation33GXUtilitiesDeveloperInfoExtension_")
@protocol GXUtilitiesDeveloperInfoExtension <NSObject>
@property (nonatomic, readonly) BOOL isDeveloperInfoExtensionDynamic;
@property (nonatomic, readonly) BOOL showDeveloperInfo;
@end

@protocol GXWCSessionServiceDelegate;

SWIFT_PROTOCOL_NAMED("GXWCSessionService")
@protocol GXWCSessionService <NSObject>
- (void)registerDelegate:(id <GXWCSessionServiceDelegate> _Nonnull)delegate forIdentifier:(NSString * _Nonnull)identifier;
- (void)executeWithActiveSession:(void (^ _Nonnull)(NSError * _Nullable))handler;
@property (nonatomic, readonly) BOOL isPaired;
@property (nonatomic, readonly) BOOL isWatchAppInstalled;
@property (nonatomic, readonly, copy) NSURL * _Nullable watchDirectoryURL;
@property (nonatomic, readonly) BOOL canSendMessage;
- (void)sendMessage:(NSDictionary<NSString *, id> * _Nonnull)message withIdentifier:(NSString * _Nonnull)identifier replyHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))replyHandler errorHandler:(void (^ _Nullable)(NSError * _Nonnull))errorHandler;
- (void)transferUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey;
@end


SWIFT_PROTOCOL_NAMED("GXWCSessionServiceDelegate")
@protocol GXWCSessionServiceDelegate <NSObject>
@optional
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didReceiveMessage:(NSDictionary<NSString *, id> * _Nonnull)message withIdentifier:(NSString * _Nonnull)identifier replyHandler:(void (^ _Nullable)(NSDictionary<NSString *, id> * _Nonnull, NSError * _Nullable))replyHandler;
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didFinishUserInfoTransfer:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey;
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didFailUserInfoTransfer:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey error:(NSError * _Nonnull)error retry:(void (^ _Nullable)(void))retry;
- (void)sessionService:(id <GXWCSessionService> _Nonnull)service didReceiveUserInfo:(NSDictionary<NSString *, id> * _Nonnull)userInfo withIdentifier:(NSString * _Nonnull)identifier uniqueKey:(NSString * _Nullable)uniqueKey;
@end


@interface NSArray<ObjectType> (SWIFT_EXTENSION(GXFoundation))
/// Applies the selector to each element of the array and returns a dictionary with the results as keys and the elements of the array as values
- (NSDictionary * _Nonnull)dictionaryWithSelectorForKeys:(SEL _Nonnull)keySelector SWIFT_WARN_UNUSED_RESULT;
/// Applies the block to each element of the array and returns a dictionary with the results as keys and the elements of the array as values
- (NSDictionary * _Nonnull)dictionaryWithBlockForKeys:(SWIFT_NOESCAPE NSObject * _Nonnull (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Applies the block to each element and returns an array with the results
- (NSArray * _Nonnull)map:(SWIFT_NOESCAPE id _Nonnull (^ _Nonnull)(id _Nonnull))transform SWIFT_WARN_UNUSED_RESULT;
- (NSArray * _Nonnull)compactMap:(SWIFT_NOESCAPE id _Nullable (^ _Nonnull)(id _Nonnull))transform SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)compactMapFirst:(SWIFT_NOESCAPE id _Nullable (^ _Nonnull)(id _Nonnull))transform SWIFT_WARN_UNUSED_RESULT;
/// Applies the seletor to each element and returns an array with the results
- (NSArray * _Nonnull)mapWithSelector:(SEL _Nonnull)selector SWIFT_WARN_UNUSED_RESULT;
/// Returns the first element of the array that passes the test given by the block
- (id _Nullable)findFirst:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Returns the last element of the array that passes the test given by the block
- (id _Nullable)findLast:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Returns a new array containing only the objects passing the test given by the block
- (NSArray * _Nonnull)filter:(BOOL (^ _Nonnull)(id _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Converts an array of arrays into a flattened array (one-level deep)
- (NSArray * _Nonnull)flatten SWIFT_WARN_UNUSED_RESULT;
/// Randomly shuffles the elements of the array
- (NSArray * _Nonnull)shuffledArray SWIFT_WARN_UNUSED_RESULT;
/// Looks for the given object and returns an array without it
- (NSArray * _Nonnull)arrayByRemovingObject:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// Looks for the given object using reference comparison and returns an array without it
- (NSArray * _Nonnull)arrayByRemovingObjectIdenticalTo:(id _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
/// A Boolean value indicating whether the array is empty.
@property (nonatomic, readonly) BOOL isEmpty;
@end


@interface NSCalendar (SWIFT_EXTENSION(GXFoundation))
/// Gregorian calendar with UTC time zone
+ (NSCalendar * _Nonnull)gxCalendar SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation)) <YAJLCoding>
@property (nonatomic, readonly) id _Null_unspecified JSON;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation))
+ (NSDate * _Nonnull)gxEmptyDate SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nonnull)gxEmptyDateTime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGxEmptyDate SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation))
/// Returns YES if date has values smaller than days, NO otherwise
- (BOOL)isGxDateTime SWIFT_WARN_UNUSED_RESULT;
/// Returns YES if date has same year, month and day than gxEmptyDate, NO otherwise
- (BOOL)isGxTimeOnlyDateTime SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than seconds (yyyy-MM-dd HH:mm:ss)
- (NSDate * _Nonnull)gxDateTimeNSDate SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than milliseconds (yyyy-MM-dd HH:mm:ss.SSS)
- (NSDate * _Nonnull)gxDateTimeNSDateMS SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than seconds and has no values (same as empty) greater than hours (HH:mm:ss)
- (NSDate * _Nonnull)gxDateNSDate SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than seconds and has no values (same as empty) greater than hours (HH:mm:ss). The resulting time is expressed in UTC timezone,
- (NSDate * _Nonnull)gxTimeOnlyDateTimeNSDate SWIFT_WARN_UNUSED_RESULT;
/// Ensures date has no value smaller than milliseconds and has no values (same as empty) greater than hours (HH:mm:ss.SSS). The resulting time is expressed in UTC timezone,
- (NSDate * _Nonnull)gxTimeOnlyDateTimeNSDateMS SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDate (SWIFT_EXTENSION(GXFoundation))
- (NSTimeInterval)localTimeZoneSecondsFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)localTimeZoneDateFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)gmtTimeZoneDateFromLocal SWIFT_WARN_UNUSED_RESULT;
- (NSTimeInterval)currentTimeZoneSecondsFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)currentTimeZoneDateFromGMT SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)gmtTimeZoneDateFromCurrent SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)currentTimeZoneDateFromLocal SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)localTimeZoneDateFromCurrent SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSError (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nullable)userInfoLocalizedDescription SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasUserInfoLocalizedDescription SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable gxDeveloperDescription;
/// Logs localized description if show developer info is enabled
/// remark:
/// See [GXUtilities showDeveloperInfo]
///
/// returns:
/// YES if show developer info is enabled, NO otherwise
- (BOOL)logLocalizedDescriptionIfShowDeveloperInfoIsEnabled;
- (BOOL)isUserCancelledError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLoopExitError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotConnectedToInternetError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isLoginCanceledError SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isNotAuthorizedError SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if the error could be caused due to bad network conditions, <code>false</code> otherwise.
/// Errors include:
/// <ul>
///   <li>
///     TimedOut: the timeout interval in request expires before a load can complete
///   </li>
///   <li>
///     CannotFindHost: the host name for a URL cannot be resolved (DNS lookup failed)
///   </li>
///   <li>
///     CannotConnectToHost: an attempt to connect to a host has failed; this can occur when a host name resolves, but the host is down or may not be accepting connections on a certain port
///   </li>
///   <li>
///     NetworkConnectionLost: a client or server connection is severed in the middle of an in-progress load
///   </li>
///   <li>
///     NotConnectedToInternet: an internet connection is not established and cannot be established automatically, either through a lack of connectivity, or by the user’s choice not to make a network connection automatically
///   </li>
///   <li>
///     InternationalRoamingOff: would require activating a data context while roaming, but international roaming is disabled
///   </li>
///   <li>
///     CallIsActive: a phone call is active on a network that does not support simultaneous phone and data communication (EDGE or GPRS)
///   </li>
///   <li>
///     DataNotAllowed: the cellular network disallows a connection
///   </li>
/// </ul>
- (BOOL)isNetworkPossibleError SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>GXErrCode</code> for the given error
/// if <code>error == nil</code>, <code>.noError</code> is returned, otherwise <code>error.gxErrCode</code> is returned
/// \param error Optional error to return GXErrCode from
///
+ (GXErrCode)gxErrCodeFromError:(NSError * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns the GXErrCode
/// if <code>isUserCancelledError()</code>, returns <code>.userCancelled</code>, otherwise looks for <code>GXErrCode</code> in <code>userInfo[GXErrUserInfoKey]</code>, if no vlue is found (or an invalid one (like <code>.noError</code> or <code>.userCancelled</code>)  <code>.genericError</code> is returned.
/// note:
/// <code>.noError</code> is never returned.
@property (nonatomic, readonly) GXErrCode gxErrCode;
@end


@interface NSError (SWIFT_EXTENSION(GXFoundation))
+ (NSError * _Nonnull)userCancelledError SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)userCancelledErrorWithUnderlyingError:(NSError * _Nullable)underlyingError SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)loopExitError SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain, code and description
+ (NSError * _Nonnull)defaultGXError SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)defaultGXErrorWithDeveloperDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)defaultGXErrorWithDeveloperDescription:(NSString * _Nonnull)description userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Same as defaultGXErrorWithDeveloperDescription: but using GXFatalErrorDomain
+ (NSError * _Nonnull)fatalGXErrorWithDeveloperDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with the given domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)errorWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code developerDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with the given domain and code, and:
/// <ul>
///   <li>
///     the given description if running on the KBN or in the iPhone Simulator
///   </li>
///   <li>
///     the default description if running in the compiled app on a device
///   </li>
/// </ul>
+ (NSError * _Nonnull)errorWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code developerDescription:(NSString * _Nonnull)description userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)defaultGXErrorWithLocalizedDescription:(NSString * _Nullable)description SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)defaultGXErrorWithCode:(NSInteger)code localizedDescription:(NSString * _Nullable)description SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)errorWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code localizedDescription:(NSString * _Nonnull)description SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)errorForHTTPURLResponseStatusCode:(NSInteger)statusCode SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)loginCanceledError SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)notAutorizedErrorWithDescription:(NSString * _Nullable)desc SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)wrongNumberOfParametersDeveloperErrorForMethod:(NSString * _Nonnull)methodName SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)wrongNumberOfParametersDeveloperErrorForMethod:(NSString * _Nonnull)methodName received:(NSInteger)received expected:(NSInteger)expected SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)permissionDeniedErrorWithGoToSettingsRecoveryAttempter SWIFT_WARN_UNUSED_RESULT;
/// Creates an error object with default domain with a recovery attempter
/// \param settingsLocalizedRecoveryOption String used for the recovery option, default “Settings” is used if nil.
///
/// \param localizedDescription String used for the error’s localized description, default “Permission denied” is used if nil.
///
/// \param localizedRecoverySuggestion String used for the recovery suggestion, default “Enable permission in Settings” is used if nil.
///
+ (NSError * _Nonnull)permissionDeniedErrorWithGoToSettingsRecoveryAttempter:(NSString * _Nullable)settingsLocalizedRecoveryOption localizedDescription:(NSString * _Nullable)localizedDescription localizedRecoverySuggestion:(NSString * _Nullable)localizedRecoverySuggestion SWIFT_WARN_UNUSED_RESULT;
+ (NSError * _Nonnull)posixError:(int32_t)err SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSMutableArray<ObjectType> (SWIFT_EXTENSION(GXFoundation))
- (void)addObjectsFromSet:(NSSet * _Nonnull)set;
- (void)filterUsingBlock:(BOOL (^ _Nonnull)(id _Nullable))block;
/// Randomly in-place shuffles the elements of the mutable array
- (void)shuffle;
@end


@interface NSMutableSet<ObjectType> (SWIFT_EXTENSION(GXFoundation))
/// Returns YES if the object was added, NO if it was removed
- (BOOL)addObjectOrRemoveIfContained:(id _Nonnull)object;
/// Returns YES if the object was added, NO if it was already contained
- (BOOL)addObjectIfNotContained:(id _Nonnull)object SWIFT_WARN_UNUSED_RESULT;
/// Retuns YES if the object was contained (and removed), NO otherwise
- (BOOL)removeObjectIfContained:(id _Nonnull)object;
- (void)removeObjectsInArray:(NSArray * _Nonnull)array;
@end


@interface NSMutableString (SWIFT_EXTENSION(GXFoundation))
- (void)xmlSimpleEscape;
- (void)xmlSimpleUnescape;
@end


@interface NSNumber (SWIFT_EXTENSION(GXFoundation))
- (BOOL)gxIsInteger SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToDecimals:(NSNumber * _Nullable)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToDecimalsInt:(NSInteger)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToEvenDecimals:(NSNumber * _Nullable)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberRoundedToEvenDecimalsInt:(NSInteger)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberTruncatedToDecimals:(NSNumber * _Nullable)dec SWIFT_WARN_UNUSED_RESULT;
- (NSDecimalNumber * _Nonnull)gxNumberTruncatedToDecimalsInt:(NSInteger)dec SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
+ (NSUInteger)gxStringEncodingFromURLResponse:(NSURLResponse * _Nullable)response SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)gxStringWithOnlyFirstLetterCapitalized SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)xmlSimpleEscapeString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)xmlSimpleUnescapeString SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)urlSimpleEscapeString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)urlSimpleUnescapeString SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nonnull)ltrim SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)rtrim SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)trim SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSString * _Nullable)mimeTypeForPathExtension SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mimeTypeApplicationOctetStream;)
+ (NSString * _Nonnull)mimeTypeApplicationOctetStream SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(GXFoundation))
- (NSUInteger)gxNumberOfOccurrencesOfString:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
/// Returns the substring of the instance string, just before the occurrence of str.
/// For example
/// test = [@“some test/string” gxStringUpToFirstOccurrenceOfString:@”/”]; // test = @“some test”
/// If str is not found in the original string, it is returned unmodified
- (NSString * _Nonnull)gxStringUpToFirstOccurrenceOfString:(NSString * _Nonnull)str SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)gxSeparateStringWithSeparator:(NSString * _Nonnull)separatorStr escapeString:(NSString * _Nonnull)escapeStr SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the instance string is equals to the parameter string without taking into account their casing
- (BOOL)gxCaseInsensitiveEquals:(NSString * _Nonnull)otherString SWIFT_WARN_UNUSED_RESULT;
@end

@class NSOperationQueue;
@class NSNotification;

@interface NSNotificationCenter (SWIFT_EXTENSION(GXFoundation))
/// Adds observer for the given notification name, object, queue & block, but also removes observer after first call.
- (id <NSObject> _Nonnull)gxAddOnceObserverForName:(NSNotificationName _Nullable)name object:(id _Nullable)object queue:(NSOperationQueue * _Nullable)queue usingBlock:(void (^ _Nonnull)(NSNotification * _Nonnull))block;
@end




@interface NSNumberFormatter (SWIFT_EXTENSION(GXFoundation))
+ (NSNumberFormatter * _Nullable)numberFormatterForGXPicture:(NSString * _Nullable)picture localeId:(NSString * _Nullable)localeId numberHasDecimals:(BOOL)hasDecimals SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForNumberFormat:(NSString * _Nonnull)numberFormat localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForNumberFormat:(NSString * _Nonnull)numberFormat zeroSymbol:(NSString * _Nullable)zeroSymbol localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForMaximumFractionDigits:(NSInteger)maxFractionDigits maximumIntegerDigits:(NSInteger)maxIntegerDigits localeId:(NSString * _Nullable)localeId SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)numberFormatterForLocale_en_US_POSIX SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)decimalNumberFormatterForLocales_en_US_POSIX SWIFT_WARN_UNUSED_RESULT;
@end



@interface NSOperation (SWIFT_EXTENSION(GXFoundation)) <GXCancelableOperation>
@end

@protocol GXParseJsonOperationDelegate;
@protocol GXURLRequestOperationDelegate;

@interface NSOperationQueue (SWIFT_EXTENSION(GXFoundation))
/// Creates a pipe composed of a URL request operation, a data setter operation and a parse JSON operation, and adds them to the operation queue
/// \param request the request for the URL requst operation to perform
///
/// \param delegate the delegate for both the URL request and the parse JSON operations
///
///
/// returns:
/// The last operation in the pipe (i.e., the parse JSON operation)
- (NSOperation * _Nonnull)addURLRequestAndParseJSONOperationsForRequest:(NSURLRequest * _Nonnull)request delegate:(id <GXParseJsonOperationDelegate, GXURLRequestOperationDelegate> _Nonnull)delegate;
@end



@interface NSThread (SWIFT_EXTENSION(GXFoundation))
@property (nonatomic, readonly, strong) GXThreadErrorHandler * _Nonnull gxErrorHandler;
@end


@interface UIColor (SWIFT_EXTENSION(GXFoundation))
+ (UIColor * _Nullable)colorFromValue:(id _Nullable)value SWIFT_WARN_UNUSED_RESULT;
/// Returns the same value as GeneXus RGB function
@property (nonatomic, readonly) NSInteger gxRGBColor;
- (CGFloat)gxColorAlpha SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isGxColorTransparent SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)gxColorPerceivedBrightness SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isColorDark SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isColorBright SWIFT_WARN_UNUSED_RESULT;
@end


@interface UITraitCollection (SWIFT_EXTENSION(GXFoundation))
@property (nonatomic, readonly) BOOL gxIsDarkUIStyle;
@end


@class NSURLSessionConfiguration;
@protocol NSURLSessionDelegate;

@interface NSURLSession (SWIFT_EXTENSION(GXFoundation))
+ (NSURLSession * _Nonnull)gxSessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration delegate:(id <NSURLSessionDelegate> _Nullable)delegate delegateQueue:(NSOperationQueue * _Nullable)queue SWIFT_WARN_UNUSED_RESULT;
+ (NSURLSession * _Nonnull)gxSessionWithConfiguration:(NSURLSessionConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSURLSession * _Nonnull gxSharedSession;)
+ (NSURLSession * _Nonnull)gxSharedSession SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLSessionDataTask;
@class NSURLSessionUploadTask;
@class NSURLSessionDownloadTask;

@interface NSURLSession (SWIFT_EXTENSION(GXFoundation))
+ (BOOL)gxMayBeLocalNetworkPermissionError:(NSError * _Nonnull)error forURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDataTask * _Nonnull)gxDataTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDataTask * _Nonnull)gxDataTaskWaitingForPermissionWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionUploadTask * _Nonnull)gxUploadTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request fromFile:(NSURL * _Nonnull)fileURL completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionUploadTask * _Nonnull)gxUploadTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request from:(NSData * _Nullable)bodyData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDataTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDownloadTask * _Nonnull)gxDownloadTaskWaitingForPermissionWithRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDownloadTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
- (NSURLSessionDownloadTask * _Nonnull)gxDownloadTaskWaitingForPermissionWithURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSURLResponse * _Nullable, NSError * _Nullable))completionHandler onRetryWaitingTaskCreated:(void (^ _Nullable)(NSURLSessionDownloadTask * _Nonnull))retryWaitingTaskCreatedHandler SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSURLSessionTask (SWIFT_EXTENSION(GXFoundation)) <GXCancelableOperation>
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
