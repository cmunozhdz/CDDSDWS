// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7 (swiftlang-5.7.0.127.4 clang-1400.0.29.50)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GXObjectsModel
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import CoreMedia
import Foundation
@_spi(GXInternal) import GXFoundation
@_exported import GXObjectsModel
import Swift
import UIKit
import YAJL
import _Concurrency
import _StringProcessing
import os
@objc public protocol GXDataTypeWithProperties {
  @objc func valueForProperty(name: Swift.String) -> Swift.AnyObject
  @objc func setValue(_: Swift.AnyObject, forPropertyName: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithDragAndDropHelper : GXObjectsModel.GXStyleClassWithStateHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithDragAndDropHelper {
  @objc(startDraggingStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func startDraggingStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(acceptDragStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func acceptDragStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(noAcceptDragStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func noAcceptDragStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(dragOverStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func dragOverStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
}
extension GXObjectsModel.GXStyleClassWithDragAndDropHelper {
  @objc final public class func styleClassWithDragAndDrop(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithDragAndDrop?
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithBackgroundHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithBackgroundHelper {
  @objc(backgroundColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func backgroundColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(backgroundColorFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func backgroundColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> UIKit.UIColor?
  @objc(highlightedBackgroundColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func highlightedBackgroundColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(highlightedBackgroundColorFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func highlightedBackgroundColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> UIKit.UIColor?
  @objc(backgroundImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func backgroundImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(backgroundImageFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func backgroundImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> Swift.String?
  @objc(highlightedBackgroundImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func highlightedBackgroundImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(highlightedBackgroundImageFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func highlightedBackgroundImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> Swift.String?
  @objc(backgroundImageModeFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func __backgroundImageMode(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXBackgroundImageMode
  final public class func backgroundImageMode(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides? = nil) -> GXObjectsModel.GXBackgroundImageMode?
}
extension GXObjectsModel.GXStyleClassWithBackgroundHelper {
  @objc final public class func styleClassWithBackground(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithBackground?
}
extension GXObjectsModel.GXStyleClassWithBackground {
  public var backgroundImageMode: GXObjectsModel.GXBackgroundImageMode? {
    get
  }
  public func backgroundImageModeResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXObjectsModel.GXBackgroundImageMode?
}
extension GXObjectsModel.GXTheme {
  @objc dynamic public var themeClassForm: GXObjectsModel.GXThemeClassForm? {
    @objc get
  }
  @objc dynamic public var themeClassApplication: GXObjectsModel.GXThemeClassApplication? {
    @objc get
  }
  @objc dynamic public var themeClassApplicationBars: GXObjectsModel.GXThemeClassApplicationBars? {
    @objc get
  }
  @objc dynamic public var themeClassAttribute: GXObjectsModel.GXThemeClassAttribute? {
    @objc get
  }
  @objc dynamic public var themeClassAttributeTitle: GXObjectsModel.GXThemeClassAttributeTitle? {
    @objc get
  }
  @objc dynamic public var themeClassAttributeSubtitle: GXObjectsModel.GXThemeClassAttributeSubtitle? {
    @objc get
  }
  @objc dynamic public var themeClassAttributeReadOnly: GXObjectsModel.GXThemeClassAttributeReadOnly? {
    @objc get
  }
  @objc dynamic public var themeClassLabel: GXObjectsModel.GXThemeClassLabel? {
    @objc get
  }
  @objc dynamic public var themeClassLabelTitle: GXObjectsModel.GXThemeClassLabelTitle? {
    @objc get
  }
  @objc dynamic public var themeClassLabelSubTitle: GXObjectsModel.GXThemeClassLabelSubtitle? {
    @objc get
  }
  @objc dynamic public var themeClassList: GXObjectsModel.GXThemeClassList? {
    @objc get
  }
  @objc dynamic public var themeClassListListWorkWith: GXObjectsModel.GXThemeClassListListWorkWith? {
    @objc get
  }
  @objc dynamic public var themeClassListListLevel: GXObjectsModel.GXThemeClassListListLevel? {
    @objc get
  }
  @objc dynamic public var themeClassListItemOddItem: GXObjectsModel.GXThemeClassListItemOddItem? {
    @objc get
  }
  @objc dynamic public var themeClassListItemEvenItem: GXObjectsModel.GXThemeClassListItemEvenItem? {
    @objc get
  }
  @objc dynamic public var themeClassImage: GXObjectsModel.GXThemeClassImage? {
    @objc get
  }
  @objc dynamic public var themeClassTab: GXObjectsModel.GXThemeClassTab? {
    @objc get
  }
  @objc dynamic public var themeClassTabPage: GXObjectsModel.GXThemeClassTabPage? {
    @objc get
  }
  @objc dynamic public var themeClassTabPageSelected: GXObjectsModel.GXThemeClassTabPageSelected? {
    @objc get
  }
  @objc dynamic public var themeClassTabPageUnselected: GXObjectsModel.GXThemeClassTabPageUnselected? {
    @objc get
  }
  @objc dynamic public var themeClassGroup: GXObjectsModel.GXThemeClassGroup? {
    @objc get
  }
  @objc dynamic public var themeClassGroupSeparator: GXObjectsModel.GXThemeClassGroupSeparator? {
    @objc get
  }
  @objc dynamic public var themeClassHorizontalSeparator: GXObjectsModel.GXThemeClassHorizontalSeparator? {
    @objc get
  }
  @objc dynamic public var themeClassDashboard: GXObjectsModel.GXThemeClassDashboard? {
    @objc get
  }
  @objc dynamic public var themeClassDashboardOption: GXObjectsModel.GXThemeClassDashboardOption? {
    @objc get
  }
  @objc dynamic public var themeClassAnimation: GXObjectsModel.GXThemeClassAnimation? {
    @objc get
  }
  @objc dynamic public var themeClassProgress: GXObjectsModel.GXThemeClassAnimation? {
    @objc get
  }
}
extension UIKit.UIColor {
  @objc dynamic public func gxHasLowContrastAgainstCurrentUserInterfaceStyle() -> Swift.Bool
  @objc(gxHasLowContrastAgainstUserInterfaceStyleFromTraitColection:) dynamic public func gxHasLowContrastAgainstUserInterfaceStyle(from traitColection: UIKit.UITraitCollection?) -> Swift.Bool
}
extension GXObjectsModel.GXModel {
  @_spi(GXInternal) public var designSystemTokenDefaultOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String] {
    get
  }
  @_spi(GXInternal) public var designSystemTokenCustomOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String] {
    get
  }
  public var designSystemTokenOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String] {
    get
  }
  public func designSystemTokenOptions(withDefaultFrom designSystem: GXObjectsModel.GXDesignSystemObject?) -> [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]
  public func setDesignSystemTokenOption(_ option: GXObjectsModel.GXDesignSystemToken.OptionName, value: Swift.String?)
  @_spi(GXInternal) public func setDesignSystemTokenDefaultOption(_ option: GXObjectsModel.GXDesignSystemToken.OptionName, value: Swift.String?, postChangedNotifications: Swift.Bool = true)
}
extension Foundation.NSNotification.Name {
  @_spi(GXInternal) public static let GXDesignSystemTokenOptionChangedInternal: Foundation.Notification.Name
  @_spi(GXInternal) public static let GXDesignSystemTokenOptionChangedCustomInternal: Foundation.Notification.Name
}
extension GXObjectsModel.GXThemeClassLabel {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func themeSubClassClass(forFullName subClassFullName: Swift.String) -> Swift.AnyClass
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func newRequiredSubClassesClassesArray() -> [Swift.AnyClass]?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
}
extension GXObjectsModel.GXThemeClassLabel : GXObjectsModel.GXThemeClassWithPadding {
  @objc dynamic public var padding: GXFoundation.GXLayoutQuadDimension {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassLabel : GXObjectsModel.GXThemeClassWithDragAndDrop {
  @objc dynamic public var startDraggingThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var acceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var noAcceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var dragOverThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
@_hasMissingDesignatedInitializers @objc public class GXCallOptionsWithDesignSystemTokenReferences : GXObjectsModel.GXCallOptions {
  @objc final public let enterEffectToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public let closeEffectToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public let typeToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public let targetNameToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public let targetSizeToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public let targetSizeCustomWidthToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public let targetSizeCustomHeightToken: GXObjectsModel.GXDesignSystemToken.Reference?
  @objc(initWithEnterEffect:enterEffectToken:closeEffect:closeEffectToken:type:typeToken:targetName:targetNameToken:targetSize:targetSizeToken:targetSizeCustomWidth:targetSizeCustomWidthToken:targetSizeCustomHeight:targetSizeCustomHeightToken:hideTabs:) required public init(enter enterEffect: GXObjectsModel.GXCallOptionEffect, enterToken enterEffectToken: GXObjectsModel.GXDesignSystemToken.Reference?, close closeEffect: GXObjectsModel.GXCallOptionEffect, closeToken closeEffectToken: GXObjectsModel.GXDesignSystemToken.Reference?, type: GXObjectsModel.GXCallOptionType, typeToken: GXObjectsModel.GXDesignSystemToken.Reference?, targetName: Swift.String?, targetNameToken: GXObjectsModel.GXDesignSystemToken.Reference?, targetSize: GXObjectsModel.GXCallOptionTargetSize, targetSizeToken: GXObjectsModel.GXDesignSystemToken.Reference?, targetSizeCustomWidth: GXFoundation.GXLayoutDimension, targetSizeCustomWidthToken: GXObjectsModel.GXDesignSystemToken.Reference?, targetSizeCustomHeight: GXFoundation.GXLayoutDimension, targetSizeCustomHeightToken: GXObjectsModel.GXDesignSystemToken.Reference?, hideTabs: Swift.Bool)
  @objc public func resolvingTokenReferences(with desingSystem: GXObjectsModel.GXDesignSystemObject) -> GXObjectsModel.GXCallOptions
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc deinit
}
@objc(GXCustomLayoutProtocol) public protocol GXCustomLayoutProtocol {
  @objc static var layoutIdentifier: Swift.String { get }
}
@_inheritsConvenienceInitializers @objc(GXCustomLayoutsManager) public class GXCustomLayoutsManager : ObjectiveC.NSObject {
  @objc public class func registerLayoutProvider(_ customLayoutClass: Swift.AnyClass, for layoutIdentifier: Swift.String)
  @objc(getWithLayoutElementForType:metadata:context:forModelObject:error:) public class func get(layoutElementForType: Swift.String, metadata: [Swift.String : Any], context: Any, for modelObject: GXObjectsModel.GXModelObject?) throws -> GXObjectsModel.GXWorkWithLayoutElement
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GXUserInterfaceContextFactory) public class GXUserInterfaceContextFactory : ObjectiveC.NSObject {
  @objc(userInterfaceContextWithView:) public class func userInterfaceContext(with view: UIKit.UIView?) -> GXObjectsModel.GXViewUserInterfaceContext?
  public class func userInterfaceContext(with view: UIKit.UIView) -> GXObjectsModel.GXViewUserInterfaceContext
  @objc(userInterfaceContextWithBarItem:viewController:) public class func userInterfaceContext(with barItem: UIKit.UIBarItem?, viewController controller: UIKit.UIViewController?) -> GXObjectsModel.GXBarItemUserInterfaceContext?
  public class func userInterfaceContext(with barItem: UIKit.UIBarItem, viewController controller: UIKit.UIViewController?) -> GXObjectsModel.GXBarItemUserInterfaceContext
  @objc(userInterfaceContextWithGestureRecognizer:) public class func userInterfaceContext(with gestureRecognizer: UIKit.UIGestureRecognizer?) -> GXObjectsModel.GXGestureRecognizerUserInterfaceContext?
  public class func userInterfaceContext(with gestureRecognizer: UIKit.UIGestureRecognizer) -> GXObjectsModel.GXGestureRecognizerUserInterfaceContext
  @objc(userInterfaceContextWithViewController:) public class func __userInterfaceContext(withViewController controller: UIKit.UIViewController?) -> GXObjectsModel.GXViewControllerUserInterfaceContext?
  @objc(userInterfaceContextWithController:) public class func userInterfaceContext(with controller: UIKit.UIViewController?) -> GXObjectsModel.GXViewControllerUserInterfaceContext?
  public class func userInterfaceContext(with controller: UIKit.UIViewController) -> GXObjectsModel.GXViewControllerUserInterfaceContext
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXThemeClassDashboardOption {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(imageThemeClass) dynamic public var imageThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(imageStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func imageStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@_spi(GXInternal) @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GXDesignSystemStyleClassWithStyleClassesBase : GXObjectsModel.GXDesignSystemStyleClass {
  @_spi(GXInternal) required public init(name: Swift.String, propertiesValuesByName: [Swift.String : Any]?, innerStyleClasses: [GXObjectsModel.GXDesignSystemStyleClass])
  @_spi(GXInternal) @objc override dynamic public func hasAllPropertiesDefault() -> Swift.Bool
  @_spi(GXInternal) @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @_spi(GXInternal) @objc deinit
}
extension GXObjectsModel.GXApplicationModel {
  @objc(GXApplicationModelBaseColorScheme) public enum BaseColorScheme : Swift.Int {
    case platformDefault
    case light
    case dark
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc dynamic public class var applicationEntryPointPlatformDefaultBaseColorScheme: GXObjectsModel.GXApplicationModel.BaseColorScheme {
    @objc get
  }
  @objc dynamic public var applicationEntryPointBaseColorScheme: GXObjectsModel.GXApplicationModel.BaseColorScheme {
    @objc get
  }
  @objc dynamic public class func applicationEntryPointBaseColorScheme(_ appEntryPoint: GXObjectsModel.GXApplicationEntryPointProtocol?) -> GXObjectsModel.GXApplicationModel.BaseColorScheme
  @objc dynamic public var applicationEntryPointResolvedBaseColorScheme: GXObjectsModel.GXApplicationModel.BaseColorScheme {
    @objc get
  }
  @objc dynamic public class func applicationEntryPointResolvedBaseColorScheme(_ appEntryPoint: GXObjectsModel.GXApplicationEntryPointProtocol?) -> GXObjectsModel.GXApplicationModel.BaseColorScheme
  @objc dynamic public var applicationEntryPointPreferredColorSchemeEnabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public class func applicationEntryPointPreferredColorSchemeEnabled(_ appEntryPoint: GXObjectsModel.GXApplicationEntryPointProtocol?) -> Swift.Bool
}
extension GXObjectsModel.GXDomainEnumValues {
  @objc dynamic public var count: Swift.Int {
    @objc get
  }
  @objc(initWithEnumValues:forModelObject:) convenience dynamic public init(enumValues: [GXObjectsModel.GXDomainEnumValue], for modelObject: GXObjectsModel.GXModelObject?)
  @objc(domainEnumValuesWithMetadata:dataType:forModelObject:) convenience dynamic public init?(metadata: [[Swift.String : Any]]?, dataType: GXFoundation.GXDataType, for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, deprecated, message: "Use init(metadata:dataType:for:) instead")
  @objc(domainEnumValuesWithMetadata:dataType:) convenience dynamic public init?(metadata: [[Swift.String : Any]]?, dataType: GXFoundation.GXDataType)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc dynamic public func description(forEnumValue value: Any?) -> Swift.String?
  @objc dynamic public func allEnumValues() -> [GXObjectsModel.GXDomainEnumValue]
  @objc(indexOfEnumValue:) dynamic public func __index(ofEnumValue value: Any?) -> Swift.UInt
  public func index(ofEnumValue value: Any?) -> Swift.Int?
  @objc(indexOfEnumDescription:) dynamic public func __index(ofEnumDescription desc: Swift.String) -> Swift.UInt
  public func index(ofEnumDescription desc: Swift.String) -> Swift.Int?
  @objc(domainEnumValueAtIndex:) dynamic public func domainEnumValue(at index: Swift.Int) -> GXObjectsModel.GXDomainEnumValue?
  @objc dynamic public func domainEnumValue(atGXIndex gxIndex: Any?) -> GXObjectsModel.GXDomainEnumValue?
}
extension GXObjectsModel.GXDomainEnumValues : Foundation.NSMutableCopying {
  @objc dynamic public func mutableCopy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
extension GXObjectsModel.GXMutableDomainEnumValues {
  @objc(GXDomainEnumValuesModificationType) @frozen public enum ModificationType : Swift.Int {
    @objc(GXDomainEnumValuesModificationNone) case none = 0
    @objc(GXDomainEnumValuesModificationInserted) case inserted
    @objc(GXDomainEnumValuesModificationUpdated) case updated
    @objc(GXDomainEnumValuesModificationDeleted) case deleted
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public typealias ModificationResult = (type: GXObjectsModel.GXMutableDomainEnumValues.ModificationType, index: Swift.Int, desc: Swift.String)
  public func addValue(_ value: Any?, description desc: Swift.String, atGXIndex gxIndex: Any? = nil) -> GXObjectsModel.GXMutableDomainEnumValues.ModificationResult
  @objc(addValue:description:atGXIndex:modificationType:modifiedIndex:) dynamic public func __addValue(_ value: Any?, description desc: Swift.String, atGXIndex gxIndex: Any?, modificationType: Swift.UnsafeMutablePointer<GXObjectsModel.GXMutableDomainEnumValues.ModificationType>?, modifiedIndex: Swift.UnsafeMutablePointer<Swift.UInt>?)
  public func removeValue(atGXIndex gxIndex: Any?) -> GXObjectsModel.GXMutableDomainEnumValues.ModificationResult
  @objc(removeValueAtGXIndex:modificationType:modifiedIndex:) dynamic public func __removeValue(atGXIndex gxIndex: Any?, modificationType: Swift.UnsafeMutablePointer<GXObjectsModel.GXMutableDomainEnumValues.ModificationType>?, modifiedIndex: Swift.UnsafeMutablePointer<Swift.UInt>?)
  @objc dynamic public func removeAllValues()
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithShadowHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithShadowHelper {
  @objc(shadowElevationFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func shadowElevation(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(shadowOffsetFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func shadowOffset(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGSize
  @objc(shadowColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func shadowColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(shadowOpacityFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func shadowOpacity(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(shadowRadiusFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func shadowRadius(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
}
extension GXObjectsModel.GXStyleClassWithShadowHelper {
  @objc final public class func styleClassWithShadow(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithShadow?
}
extension GXObjectsModel.GXThemeClassHorizontalSeparator {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc(height) dynamic public var height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc(heightFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func height(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassHorizontalSeparator : GXObjectsModel.GXThemeClassWithBackground {
  @objc dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var highlightedBackgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var backgroundImage: Swift.String? {
    @objc get
  }
  @objc dynamic public var highlightedBackgroundImage: Swift.String? {
    @objc get
  }
  @objc dynamic public var __backgroundImageMode: GXObjectsModel.GXBackgroundImageMode {
    @objc get
  }
  @objc dynamic public func backgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func highlightedBackgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func backgroundImageResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func highlightedBackgroundImageResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func __backgroundImageModeResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXObjectsModel.GXBackgroundImageMode
}
@objc(GXBCSDTDataProtocol) public protocol GXBCSDTDataProtocol : GXObjectsModel.GXSDTDataProtocol {
  @objc func bcOldValueForFieldName(_ fieldName: Swift.String) -> Swift.AnyObject?
}
@objc(GXBCRootSDTDataProtocol) public protocol GXBCRootSDTDataProtocol : GXObjectsModel.GXBCRootSDTDataCommonProtocol, GXObjectsModel.GXBCSDTDataProtocol {
  @objc var bcMode: Swift.String { get }
  @objc func bcLoad(key: GXObjectsModel.GXEntityDataKey, completion: @escaping () -> Swift.Void)
  @objc func bcSave(completion: @escaping () -> Swift.Void)
  @objc func bcCheck(completion: @escaping () -> Swift.Void)
  @objc var bcMessages: GXObjectsModel.GXSDTDataCollectionProtocol { get }
  @objc var bcSuccess: Swift.Bool { get }
  @objc var bcFail: Swift.Bool { get }
}
@objc(GXBCRootSDTDataCommonProtocol) public protocol GXBCRootSDTDataCommonProtocol : GXObjectsModel.GXSDTDataProtocol {
  @objc func bcInsert(completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc func bcUpdate(completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc func bcInsertOrUpdate(completion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  @objc func bcDelete(completion: @escaping () -> Swift.Void)
  @objc var bcConnectivitySupport: GXFoundation.GXConnectivitySupportType { get }
  @objc optional func bcResolveInheritedConectivitySupport(_ resolver: GXObjectsModel.GXInheritedConnectivitySupportResolver)
}
@objc(GXBCSDTDataCollectionProtocol) public protocol GXBCSDTDataCollectionProtocol : GXObjectsModel.GXSDTDataCollectionProtocol {
  @objc func bcGetItemByKey(_ key: GXObjectsModel.GXEntityDataKey) -> GXObjectsModel.GXBCSDTDataProtocol
  @objc func bcRemoveItemByKey(_ key: GXObjectsModel.GXEntityDataKey) -> Swift.Bool
}
@objc(GXBCRootSDTDataCollectionProtocol) public protocol GXBCRootSDTDataCollectionProtocol : GXObjectsModel.GXBCRootSDTDataCommonProtocol, GXObjectsModel.GXBCSDTDataCollectionProtocol {
}
extension GXObjectsModel.GXModel : GXObjectsModel.GXModelObject {
  @objc dynamic public var gxModel: GXObjectsModel.GXModel? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(GXAttributeInfo) public class GXAttributeInfo : GXObjectsModel.GXTypedObjectInfo {
  @objc override dynamic public class func loadProperties(fromMetadata metadata: [Swift.String : Any], name: Swift.String, gxDataType gxdataType: GXFoundation.GXDataType, intoProperties properties: Foundation.NSMutableDictionary)
  @objc required public init?(metadata: [Swift.String : Any], for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, unavailable)
  @objc required public init(name: Swift.String, dataType: GXFoundation.GXDataType, description: Swift.String?, properties: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public var superType: Swift.String? {
    get
  }
  @objc public var autonumber: Swift.Bool {
    @objc get
  }
  @objc public var controlType: GXObjectsModel.GXAttributeControlType {
    @objc get
  }
  @objc public var controlValues: Swift.String? {
    @objc get
  }
  @objc public var downloadContentOffline: Swift.Bool {
    @objc get
  }
  @objc public func loadSuperType(_ superType: Swift.String)
  @available(*, deprecated, message: "Use GXKBObjectsModel's attributeInfo(forName:) instead")
  @objc(attributeInfoForName:) public class func attributeInfo(forName name: Swift.String) -> GXObjectsModel.GXAttributeInfo?
  @objc deinit
}
extension GXObjectsModel.GXEntityDataFieldInfo {
  public var entityDataFieldInfoSpecialDomain: GXFoundation.GXSpecialDomainType? {
    get
  }
  public var entityDataFieldInfoDateFormat: GXFoundation.GXDataDateFormat? {
    get
  }
  public var entityDataFieldInfoTimeFormat: GXFoundation.GXDataTimeFormat? {
    get
  }
}
extension UIKit.UIImage {
  @objc(gxImageNamed:) dynamic public class func gxImageNamed(_ name: Swift.String) -> UIKit.UIImage?
}
extension UIKit.UIImage {
  @objc(gxNSDataWithPNGFormat:) dynamic public func gxNSData(withPNGFormat png: Swift.Bool) -> Foundation.Data?
  @objc(gxNSDataWithPNGFormat:jpegCompressionQuality:) dynamic public func gxNSData(withPNGFormat png: Swift.Bool, jpegCompressionQuality compressionQuality: CoreFoundation.CGFloat) -> Foundation.Data?
  @objc(saveImageToFileURL:) dynamic public func save(toFileURL fileURL: Foundation.URL) -> Foundation.URL?
  @objc(saveImageToFileURL:jpegCompressionQuality:) dynamic public func save(toFileURL fileURL: Foundation.URL, jpegCompressionQuality compressionQuality: CoreFoundation.CGFloat) -> Foundation.URL?
  @objc(saveToTemporaryFileWithPathExtension:) dynamic public func saveToTemporaryFile(withPathExtension pathExtension: Swift.String?) -> Foundation.URL?
  @objc(saveToTemporaryFileWithPathExtension:jpegCompressionQuality:) dynamic public func saveToTemporaryFile(withPathExtension pathExtension: Swift.String?, jpegCompressionQuality compressionQuality: CoreFoundation.CGFloat) -> Foundation.URL?
}
extension UIKit.UIImage {
  @objc(applyingPropertiesFromGXImage:) dynamic public func applyingProperties(from gxImage: GXObjectsModel.GXImage) -> UIKit.UIImage
  @objc(applyingPropertiesFromGXImage:useTileRezisingMode:) dynamic public func applyingProperties(from gxImage: GXObjectsModel.GXImage, useTileRezisingMode tile: Swift.Bool) -> UIKit.UIImage
  @objc(imageWithGXRenderingMode:) dynamic public func withGXRenderingMode(_ renderingMode: GXObjectsModel.GXImageRenderingMode) -> UIKit.UIImage
  @objc(imageWithGXScalableEdgeInsets:useTileRezisingMode:) dynamic public func __withGXScalableEdgeInsets(_ scalableEdgeInsets: Foundation.NSValue?, useTileRezisingMode tile: Swift.Bool) -> UIKit.UIImage
  public func withGXScalableEdgeInsets(_ scalableEdgeInsets: UIKit.UIEdgeInsets?, useTileRezisingMode tile: Swift.Bool) -> UIKit.UIImage
  @objc(gxResizableImageWithCapInsets:useTileRezisingMode:) dynamic public func gxResizableImage(withCapInsets capInsets: UIKit.UIEdgeInsets, useTileRezisingMode tile: Swift.Bool) -> UIKit.UIImage
  @objc(imageWithGXFlipsForRTL:) dynamic public func withGXFlips(forRTL flipsForRTL: Swift.Bool) -> UIKit.UIImage
  @objc(imageWithGXForcedScale:) dynamic public func withGXForcedScale(_ scale: CoreFoundation.CGFloat) -> UIKit.UIImage
}
extension GXObjectsModel.GXThemeClassAttribute {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func themeSubClassClass(forFullName subClassFullName: Swift.String) -> Swift.AnyClass
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func newRequiredSubClassesClassesArray() -> [Swift.AnyClass]?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassAttribute : GXObjectsModel.GXThemeClassWithPadding {
  @objc dynamic public var padding: GXFoundation.GXLayoutQuadDimension {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassAttribute : GXObjectsModel.GXThemeClassWithLabel {
  @objc dynamic public var labelThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var labelWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var labelHorizontalAlignment: GXFoundation.GXHorizontalAlignType {
    @objc get
  }
  @objc dynamic public var labelVerticalAlignment: GXFoundation.GXVerticalAlignType {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassAttribute : GXObjectsModel.GXThemeClassWithDragAndDrop {
  @objc dynamic public var startDraggingThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var acceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var noAcceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var dragOverThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassListItemEvenItem {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
}
@objc(GXSecurityService) public protocol GXSecurityService : ObjectiveC.NSObjectProtocol {
  typealias AuthorizationCompletionBlock = GXObjectsModel.GXSecurityServiceAuthorizationCompletionBlock
  typealias AuthorizationRequestOptions = GXObjectsModel.GXSecurityServiceAuthorizationRequestOptions
  @objc func hasAuthorization() -> Swift.Bool
  @objc func hasValidAuthorization() -> Swift.Bool
  @objc func requestAuthorizationRequired(forApplicationEntryPoint model: GXObjectsModel.GXModel) -> Swift.Bool
  @discardableResult
  @objc func requestAuthorization(forApplicationEntryPoint model: GXObjectsModel.GXModel, uiContext: GXObjectsModel.GXUserInterfaceContext?, completion: Self.AuthorizationCompletionBlock?) -> ObjectiveC.NSObjectProtocol?
  @discardableResult
  @objc(requestAuthorizationWithOptions:completion:) func requestAuthorization(with options: Self.AuthorizationRequestOptions?, completion: Self.AuthorizationCompletionBlock?) -> ObjectiveC.NSObjectProtocol?
  @objc func cancelAutorizationRequest(_ requestObject: ObjectiveC.NSObjectProtocol?)
  @objc func cancelAllAuthorizationRequests()
  @discardableResult
  @objc(handleSecurityErrorFromResponse:data:error:recoverAuthorizationRequestOptions:) func handleSecurityError(from response: Foundation.HTTPURLResponse, data: Foundation.Data?, error: Foundation.NSErrorPointer, recover recoverOptions: Swift.AutoreleasingUnsafeMutablePointer<Self.AuthorizationRequestOptions?>) -> Swift.Bool
  @objc func logout()
  @discardableResult
  @objc optional func showChangePasswordObject(_ completionBlock: ((_ success: Swift.Bool) -> Swift.Void)?) -> Swift.Bool
  @discardableResult
  @objc optional func showNotAuthorizedObject() -> Swift.Bool
  @objc optional func currentUserIdentifier() -> Swift.String?
}
extension GXObjectsModel.GXSecurityService {
  public func handleSecurityError(from response: Foundation.HTTPURLResponse, data: Foundation.Data?) -> (recover: Self.AuthorizationRequestOptions?, error: Swift.Error)?
}
@_inheritsConvenienceInitializers @objc(GXStructureDataTypeInfo) public class GXStructureDataTypeInfo : GXObjectsModel.GXTypedObjectInfo {
  @objc final public let rootLevel: GXObjectsModel.GXStructureDataTypeLevelInfo
  @objc public func itemInfo(forFieldSpecifier fieldSpecifier: Swift.String) -> GXObjectsModel.GXStructureDataTypeItemInfo?
  @available(*, deprecated, message: "Use sdtFieldInfo(forName:modelObject:) or sdtFieldInfo(from:) instead")
  @objc public class func sdtFieldInfo(forName sdtBasedOnName: Swift.String) -> GXObjectsModel.GXEntityDataSDTFieldInfo?
  @available(*, deprecated, message: "Use sdtFieldInfo(forName:modelObject:) or sdtFieldInfo(from:) instead")
  @objc public class func sdtFieldInfo(forName sdtBasedOnName: Swift.String, model: GXObjectsModel.GXKBObjectsModel?) -> GXObjectsModel.GXEntityDataSDTFieldInfo?
  @objc public class func sdtFieldInfo(forName sdtBasedOnName: Swift.String, modelObject: GXObjectsModel.GXModelObject) -> GXObjectsModel.GXEntityDataSDTFieldInfo?
  @objc(sdtFieldInfoFromFieldInfo:) public class func sdtFieldInfo(from fieldInfo: GXObjectsModel.GXEntityDataFieldInfo) -> GXObjectsModel.GXEntityDataSDTFieldInfo?
  @objc(sdtDataBasedOnNameFromFieldInfo:) public class func sdtDataBasedOnName(from fieldInfo: GXObjectsModel.GXEntityDataFieldInfo) -> Swift.String?
  @objc public class func fieldSpecifier(forIndexer indexer: [Foundation.NSNumber]?, fieldSpecifier: Swift.String?) -> Swift.String?
  public class func fieldSpecifier(forIndexer indexer: [Swift.UInt]?, fieldSpecifier: Swift.String) -> Swift.String
  @objc(resolvedFieldInfoForFieldDescriptor:fieldSpecifier:) public class func resolvedFieldInfo(for fieldDesc: GXObjectsModel.GXEntityDataFieldDescriptor?, fieldSpecifier: Swift.String?) -> GXObjectsModel.GXEntityDataFieldInfo?
  @objc override dynamic public class func dataType(fromMetadata metadata: [Swift.String : Any]) -> GXFoundation.GXDataType
  @objc override dynamic public class func shouldLoadBasedOnFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc override dynamic public class func loadProperties(fromMetadata metadata: [Swift.String : Any], name: Swift.String, gxDataType gxdataType: GXFoundation.GXDataType, intoProperties properties: Foundation.NSMutableDictionary)
  @objc override public func newCollectionItemFieldInfoFromProperties() -> GXObjectsModel.GXTypedObjectCollectionItemInfoWrapper
  @objc required public init?(metadata: [Swift.String : Any], for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, unavailable)
  @objc convenience public init?(name: Swift.String, basedOnName: Swift.String, basedOnType: GXFoundation.GXBasedOnType, for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, unavailable)
  @objc required public init(name: Swift.String, dataType: GXFoundation.GXDataType, description: Swift.String?, properties: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?)
  @_spi(GXInternal) required public init(bc: GXObjectsModel.GXBusinessComponentModel)
  @_spi(GXInternal) public class func handleSDTDefinitionNotFoundForBased(onName sdtBasedOnName: Swift.String?)
  @_spi(GXInternal) public class func newStructureDataTypeInfoForKBNDefinitionNotFoundWithBased(onName sdtBasedOnName: Swift.String?, modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXStructureDataTypeInfo?
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXStructureDataTypeInfo : GXObjectsModel.GXEntityDataSDTFieldInfo {
  @objc dynamic public var entityDataSDTFieldInfoSDTTypeName: Swift.String {
    @objc get
  }
  @objc dynamic public var entityDataSDTFieldInfoSDTLevelInfo: GXObjectsModel.GXStructureDataTypeLevelInfo {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoCollectionItemSDTFieldInfo: GXObjectsModel.GXEntityDataSDTFieldInfo? {
    @objc get
  }
}
extension GXObjectsModel.GXStyleClassWithFont {
  public var fontWeight: GXFoundation.GXFontWeightType? {
    get
  }
  public var fontStyle: GXFoundation.GXFontStyleType? {
    get
  }
  public var fontCategory: GXFoundation.GXFontCategoryType? {
    get
  }
  public var textTransform: GXFoundation.GXTextTransformType? {
    get
  }
  public func fontWeightResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontWeightType?
  public func fontStyleResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontStyleType?
  public func fontCategoryResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontCategoryType?
  public func textTransformResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXTextTransformType?
}
extension GXObjectsModel.GXThemeClassTabPageSelected {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
}
@_inheritsConvenienceInitializers @objc(GXSecurityServiceAuthorizationRequestOptions) @objcMembers public class GXSecurityServiceAuthorizationRequestOptions : ObjectiveC.NSObject {
  @objc public var force: Swift.Bool
  @objc public var anonymousLoginAllowed: Swift.Bool
  @objc public var refreshTokenAllowed: Swift.Bool
  @objc public var uiContext: GXObjectsModel.GXUserInterfaceContext?
  @objc public var associatedError: Swift.Error?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXThemeClassGroupSeparator {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassGroupSeparator : GXObjectsModel.GXThemeClassWithPadding {
  @objc dynamic public var padding: GXFoundation.GXLayoutQuadDimension {
    @objc get
  }
}
extension GXObjectsModel._gxTransformValue {
  public static func from(value: Swift.String?) -> GXObjectsModel._gxTransformValue?
  public static let undefined: GXObjectsModel.GXTransformValue
  public func encode(with aCoder: Foundation.NSCoder, forKey key: Swift.String)
  public static func decode(coder aDecoder: Foundation.NSCoder, forKey key: Swift.String) -> GXObjectsModel._gxTransformValue?
}
public func GXTransformValue(from value: Swift.String?, defaultValue: GXObjectsModel.GXTransformValue? = nil) -> GXObjectsModel.GXTransformValue?
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXBasicTransform) public class GXBasicTransform : ObjectiveC.NSObject, Foundation.NSCoding {
  final public let x: GXObjectsModel.GXTransformValue?
  @objc(x) public var __x: GXObjectsModel.GXTransformValue {
    @objc get
  }
  final public let y: GXObjectsModel.GXTransformValue?
  @objc(y) public var __y: GXObjectsModel.GXTransformValue {
    @objc get
  }
  @objc final public let relativeTo: GXObjectsModel.GXTransformRelativeTo
  @objc final public let customRelativeTo: Swift.String?
  @objc required public init(type transformType: Swift.String, properties: [Swift.String : Any]?)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc(GXTranslationType) public enum GXTranslationType : Darwin.uint_least8_t {
  @objc(GXTranslationTypeTranslateTo) case translateTo
  @objc(GXTranslationTypeTranslateBy) case translateBy
  public init?(rawValue: Darwin.uint_least8_t)
  public typealias RawValue = Darwin.uint_least8_t
  public var rawValue: Darwin.uint_least8_t {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXTranslationTransform) public class GXTranslationTransform : GXObjectsModel.GXBasicTransform {
  @objc public var type: GXObjectsModel.GXTranslationType {
    get
  }
  @objc required public init(type transformType: Swift.String, properties: [Swift.String : Any]?)
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc(GXTransformation) public class GXTransformation : GXObjectsModel.GXNamedModelObjectChild {
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc public var translation: GXObjectsModel.GXTranslationTransform {
    @objc get
  }
  @objc public var resize: GXObjectsModel.GXBasicTransform {
    @objc get
  }
  @objc public var scale: GXObjectsModel.GXBasicTransform {
    @objc get
  }
  @objc public var anchorX: GXObjectsModel.GXTransformValue {
    @objc get
  }
  @objc public var anchorY: GXObjectsModel.GXTransformValue {
    @objc get
  }
  @objc public var angle: Swift.Float {
    @objc get
  }
  @available(*, deprecated, message: "Use init?(properties:for:) instead")
  @objc convenience public init?(properties: [Swift.String : Any]?)
  @objc required public init?(properties: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc public func replaceDefinition(withMetadata metadata: [Swift.String : Any]?)
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc(GXDomainEnumValue) public class GXDomainEnumValue : GXObjectsModel.GXModelObjectChild, Foundation.NSCopying {
  @objc final public let value: Any?
  @objc final public let descNoTranslation: Swift.String
  @objc public var desc: Swift.String {
    @objc get
  }
  @available(*, deprecated, message: "Use init(description:value:for:) instead")
  @objc convenience public init(description desc: Swift.String, value: Any?)
  @objc(initWithDescription:value:forModelObject:) required public init(description desc: Swift.String, value: Any?, for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, deprecated, message: "Use init(metadata:dataType:for:) instead")
  @objc convenience public init(metadata: [Swift.String : Any], dataType: GXFoundation.GXDataType) throws
  @objc(initWithMetadata:dataType:forModelObject:error:) convenience public init(metadata: [Swift.String : Any], dataType: GXFoundation.GXDataType, for modelObject: GXObjectsModel.GXModelObject?) throws
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension GXObjectsModel.GXDomainEnumValue {
  @objc dynamic public func fieldEnumValue() -> Any?
  @objc dynamic public func fieldEnumValueDescription() -> Swift.String
}
extension GXObjectsModel.GXApplicationHelper {
  @objc dynamic public class func isEmbeddedApplication(_ app: GXObjectsModel.GXApplicationProtocol) -> Swift.Bool
  @objc dynamic public class func isValidServerBaseURL(_ url: Foundation.URL?) -> Swift.Bool
  @objc dynamic public class func isMiniAppApplication(_ app: GXObjectsModel.GXApplicationProtocol) -> Swift.Bool
}
@objc(GXExpressionEvaluatorService) public protocol GXExpressionEvaluatorService : ObjectiveC.NSObjectProtocol {
  @discardableResult
  @objc(evaluateExpressionValue:withEntityData:actionHandlerContext:completionWithError:) func __evaluateExpressionValue(_ expression: GXObjectsModel.GXExpression, with entityData: GXObjectsModel.GXEntityData?, actionHandlerContext context: GXObjectsModel.GXActionHandlerContextProtocol?, completionWithError completion: @escaping (_ expValue: Any?, _ error: Swift.Error?) -> Swift.Void) -> GXFoundation.GXCancelableOperation?
  @objc(tryResolveExpression:fieldSpecifier:rootTargetExpression:withEntityData:actionHandlerContext:) func __tryResolveExpression(_ expression: GXObjectsModel.GXExpressionWithFieldSpecifierResolver, fieldSpecifier: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>, rootTargetExpression: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXExpression?>, with entityData: GXObjectsModel.GXEntityData?, actionHandlerContext context: GXObjectsModel.GXActionHandlerContextProtocol?) -> Swift.Bool
}
extension GXObjectsModel.GXExpressionEvaluatorService {
  @discardableResult
  public func evaluateExpressionValue(_ expression: GXObjectsModel.GXExpression, with entityData: GXObjectsModel.GXEntityData?, actionHandlerContext context: GXObjectsModel.GXActionHandlerContextProtocol?, completion: @escaping (_ expValue: Swift.Result<Any?, Swift.Error>) -> Swift.Void) -> GXFoundation.GXCancelableOperation?
  public func tryResolveExpression(_ expression: GXObjectsModel.GXExpressionWithFieldSpecifierResolver, with entityData: GXObjectsModel.GXEntityData?, actionHandlerContext context: GXObjectsModel.GXActionHandlerContextProtocol?) -> (GXObjectsModel.GXExpression, Swift.String)?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXSecurityHelper) public class GXSecurityHelper : ObjectiveC.NSObject {
  @objc deinit
}
extension GXObjectsModel.GXSecurityHelper {
  @objc dynamic public class func requestAuthorizationRequired(forApplicationEntryPoint model: GXObjectsModel.GXModel) -> Swift.Bool
  @discardableResult
  @objc dynamic public class func requestAuthorization(forApplicationEntryPoint model: GXObjectsModel.GXModel, uiContext: GXObjectsModel.GXUserInterfaceContext?, completion: GXObjectsModel.GXSecurityServiceAuthorizationCompletionBlock?) -> ObjectiveC.NSObjectProtocol?
  @discardableResult
  @objc(handleSecurityErrorFromResponse:data:error:recoverAuthorizationRequestOptions:) dynamic public class func handleSecurityError(from response: Foundation.HTTPURLResponse, data: Foundation.Data?, error: Foundation.NSErrorPointer, recover recoverOptions: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXSecurityServiceAuthorizationRequestOptions?>) -> Swift.Bool
  public class func handlingSecurityError(from response: Foundation.HTTPURLResponse, data: Foundation.Data?) -> (recover: GXObjectsModel.GXSecurityServiceAuthorizationRequestOptions?, error: Swift.Error)?
  @objc dynamic public class func canLogoutEntryPoint(_ appEntryPoint: GXObjectsModel.GXApplicationEntryPointProtocol?) -> Swift.Bool
  @discardableResult
  @objc dynamic public class func showChangePasswordObject(_ completionBlock: ((_ success: Swift.Bool) -> Swift.Void)? = nil) -> Swift.Bool
  @discardableResult
  @objc dynamic public class func showNotAuthorizedObject() -> Swift.Bool
}
extension GXObjectsModel.GXThemeClassGroup {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(groupCaptionThemeClass) dynamic public var groupCaptionThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(groupSeparatorThemeClass) dynamic public var groupSeparatorThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(groupCaptionClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func groupCaptionClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(groupSeparatorClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func groupSeparatorClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@objc(GXTypedObjectCollectionItemInfoWrapper) open class GXTypedObjectCollectionItemInfoWrapper : ObjectiveC.NSObject {
  public var collectionFieldInfo: GXObjectsModel.GXEntityDataFieldInfo & GXObjectsModel.GXModelObject {
    get
  }
  @objc required public init(collectionFieldInfo: GXObjectsModel.GXEntityDataFieldInfo & GXObjectsModel.GXModelObject)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension GXObjectsModel.GXTypedObjectCollectionItemInfoWrapper : GXObjectsModel.GXModelObject {
  @objc dynamic public var gxModel: GXObjectsModel.GXModel? {
    @objc get
  }
}
extension GXObjectsModel.GXTypedObjectCollectionItemInfoWrapper : GXObjectsModel.GXEntityDataFieldInfo {
  @objc dynamic public var entityDataFieldInfoDataType: GXFoundation.GXDataType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoIsCollection: Swift.Bool {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoLength: Swift.UInt {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoDecimals: Swift.UInt {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoSpecialDomain: GXFoundation.GXSpecialDomainType {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoDateFormat: GXFoundation.GXDataDateFormat {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoTimeFormat: GXFoundation.GXDataTimeFormat {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoIsPassword: Swift.Bool {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoInputPicture: Swift.String? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOnName: Swift.String? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOnType: GXFoundation.GXBasedOnType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoModelObject: GXObjectsModel.GXModelObject {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOn: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
}
@objc(GXTypedObjectCollectionItemInfoContainerWrapper) open class GXTypedObjectCollectionItemInfoContainerWrapper : ObjectiveC.NSObject {
  @objc public var collectionItemFieldInfo: GXObjectsModel.GXEntityDataFieldInfo & GXObjectsModel.GXModelObject {
    get
  }
  @objc required public init(collectionFieldInfo collectionItemFieldInfo: GXObjectsModel.GXEntityDataFieldInfo & GXObjectsModel.GXModelObject)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension GXObjectsModel.GXTypedObjectCollectionItemInfoContainerWrapper : GXObjectsModel.GXModelObject {
  @objc dynamic public var gxModel: GXObjectsModel.GXModel? {
    @objc get
  }
}
extension GXObjectsModel.GXTypedObjectCollectionItemInfoContainerWrapper : GXObjectsModel.GXEntityDataFieldInfo {
  @objc dynamic public var entityDataFieldInfoDataType: GXFoundation.GXDataType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoIsCollection: Swift.Bool {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoLength: Swift.UInt {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoDecimals: Swift.UInt {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoSpecialDomain: GXFoundation.GXSpecialDomainType {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoDateFormat: GXFoundation.GXDataDateFormat {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoTimeFormat: GXFoundation.GXDataTimeFormat {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoIsPassword: Swift.Bool {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoInputPicture: Swift.String? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOnName: Swift.String? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOnType: GXFoundation.GXBasedOnType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOn: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoModelObject: GXObjectsModel.GXModelObject {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoCollectionItem: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassAttributeReadOnly {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
}
@_hasMissingDesignatedInitializers @objc(GXStructureDataTypeLevelInfo) public class GXStructureDataTypeLevelInfo : GXObjectsModel.GXNamedElement {
  @objc final public let isCollection: Swift.Bool
  @objc final public let collectionItemName: Swift.String?
  @objc public var collectionItemSDTFieldInfo: GXObjectsModel.GXEntityDataSDTFieldInfo? {
    @objc get
  }
  @objc final public let jsonName: Swift.String?
  @objc final public let levelsByName: [Swift.String : GXObjectsModel.GXStructureDataTypeLevelInfo]?
  @objc final public let itemsByName: [Swift.String : GXObjectsModel.GXStructureDataTypeItemInfo]?
  @objc public var sdtInfo: GXObjectsModel.GXStructureDataTypeInfo! {
    @objc get
  }
  @objc public var parentLevel: GXObjectsModel.GXStructureDataTypeLevelInfo? {
    @objc get
  }
  @objc public func level(forName name: Swift.String) -> GXObjectsModel.GXStructureDataTypeLevelInfo?
  @objc public func level(withCollectionItemName colItemName: Swift.String) -> GXObjectsModel.GXStructureDataTypeLevelInfo?
  @objc public func level(withCollectionItemName colItemName: Swift.String, compareOptions options: Swift.String.CompareOptions = [], recursinveIntoNonCollectionLevels recursive: Swift.Bool = false) -> GXObjectsModel.GXStructureDataTypeLevelInfo?
  @objc public func item(forName name: Swift.String) -> GXObjectsModel.GXStructureDataTypeItemInfo?
  @objc public func itemInfo(forFieldSpecifier fieldSpecifier: Swift.String) -> GXObjectsModel.GXStructureDataTypeItemInfo?
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension GXObjectsModel.GXStructureDataTypeLevelInfo : GXObjectsModel.GXModelObject {
  @objc dynamic public var gxModel: GXObjectsModel.GXModel? {
    @objc get
  }
}
extension GXObjectsModel.GXStyleClassHelper {
  public class func typedProperty<T>(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: @autoclosure () -> GXObjectsModel.GXStyleClassPropertyDefaultResolver?, overrides: GXObjectsModel.GXStyleClassPropertiesOverrides? = nil, validFilter: ((T) -> Swift.Bool)? = nil) -> T?
  @objc(property:fromStyleClass:resolvingToDefaultWith:) dynamic public class func _property(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.AnyObject?
  @objc(property:fromStyleClass:resolvingToDefaultWith:withOverrides:) dynamic public class func _property(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, overrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> Swift.AnyObject?
  @objc(property:fromStyleClass:resolvingToDefaultWith:validFilter:) dynamic public class func _property(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, validFilter: ((Swift.AnyObject) -> Swift.Bool)?) -> Swift.AnyObject?
  @objc(property:fromStyleClass:resolvingToDefaultWith:withOverrides:validFilter:) dynamic public class func _property(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, overrides: GXObjectsModel.GXStyleClassPropertiesOverrides?, validFilter: ((Swift.AnyObject) -> Swift.Bool)?) -> Swift.AnyObject?
  @objc(styleClassProperty:from:resolvingToDefaultWith:) dynamic public class func __styleClassProperty(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  public class func styleClassProperty(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: @autoclosure () -> GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(propertyDefaultResolverForStyleClass:fallback:) final public class func __propertyDefaultResolver(for styleClass: GXObjectsModel.GXStyleClass?, fallback: Any?) -> GXObjectsModel.GXStyleClassPropertyDefaultResolver?
  @objc(propertyDefaultResolverForStyleClass:fallbackProvider:) final public class func propertyDefaultResolver(for styleClass: GXObjectsModel.GXStyleClass?, fallback: @autoclosure () -> Any?) -> GXObjectsModel.GXStyleClassPropertyDefaultResolver?
  @objc(modelObjectFromStyleClass:resolver:) final public class func __modelObjectFromStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXModelObject?
  @objc(modelObjectFromStyleClass:resolverProvider:) final public class func modelObjectFromStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolver: @autoclosure () -> GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXModelObject?
  @objc(styleObjectFromStyleClass:resolver:) final public class func __styleObjectFromStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleKBObject?
  @objc(styleObjectFromStyleClass:resolverProvider:) final public class func styleObjectFromStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolver: @autoclosure () -> GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleKBObject?
}
extension GXObjectsModel.GXDesignSystemObject {
  @_hasMissingDesignatedInitializers @objc(GXDesignSystemObjectImport) public class Import : ObjectiveC.NSObject, Foundation.NSCoding {
    @objc(GXDesignSystemObjectImportType) public enum ImportType : Swift.Int {
      case object
      case tokens
      case styles
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    @objc final public let type: GXObjectsModel.GXDesignSystemObject.Import.ImportType
    @objc final public let sourceDesignSystem: GXObjectsModel.GXDesignSystemObject
    @objc public func encode(with coder: Foundation.NSCoder)
    @objc required public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension GXObjectsModel.GXStyleClass {
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc dynamic public var styleKBObject: GXObjectsModel.GXStyleKBObject? {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc(propertyValueForName:) dynamic public func propertyValue(forName propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public func hasAllPropertiesDefault() -> Swift.Bool
}
extension GXObjectsModel.GXThemeClassDashboard {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(dashboardGridClass) dynamic public var dashboardGridClass: GXObjectsModel.GXThemeClassList? {
    @objc get
  }
  @objc(dashboardTabClass) dynamic public var dashboardTabClass: GXObjectsModel.GXThemeClassTab? {
    @objc get
  }
  @objc(dashboardGridClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func dashboardGridClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(dashboardTabClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func dashboardTabClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassForm {
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc(callOptions) dynamic public var callOptions: GXObjectsModel.GXCallOptions {
    @objc get
  }
  @objc(contentSizeChange) dynamic public var contentSizeChange: GXObjectsModel.GXFormContentSizeChangeType {
    @objc get
  }
  @objc(inputViewAppearance) dynamic public var inputViewAppearance: GXFoundation.GXInputViewAppearance {
    @objc get
  }
  @objc(callOptionsFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func callOptions(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXCallOptions?
  @objc(contentSizeChangeFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func contentSizeChange(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXFormContentSizeChangeType
  @objc(inputViewAppearanceFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func inputViewAppearance(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXInputViewAppearance
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassForm : GXObjectsModel.GXThemeClassWithLoadingAnimation {
  @objc dynamic public var loadingAnimationThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
extension GXObjectsModel.GXStyleHelper {
  final public class func fontDescriptor(for category: GXFoundation.GXFontCategoryType?, familyName: Swift.String?, weight: GXFoundation.GXFontWeightType?, style: GXFoundation.GXFontStyleType?) -> UIKit.UIFontDescriptor?
  final public class func fontName(forFamilyName familyName: Swift.String?, weight: GXFoundation.GXFontWeightType?, style: GXFoundation.GXFontStyleType?) -> Swift.String?
  final public class func textTransform(fromValue value: Any?) -> GXFoundation.GXTextTransformType?
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithBorderHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithBorderHelper {
  @objc(bordersRadiusFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func bordersRadius(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXBordersRadius
  @objc(bordersRadiusFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func bordersRadius(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> GXFoundation.GXBordersRadius
  @objc(borderRadiusFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func borderRadius(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(borderRadiusFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func borderRadius(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> CoreFoundation.CGFloat
  @objc(borderStyleFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func __borderStyle(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXBorderStyleType
  final public class func borderStyle(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides? = nil) -> GXFoundation.GXBorderStyleType?
  @objc(borderWidthFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func borderWidth(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(borderWidthFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func borderWidth(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> CoreFoundation.CGFloat
  @objc(borderColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func borderColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(borderColorFromStyleClass:resolvingToDefaultWithPropertyResolver:withOverrides:) final public class func borderColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, withOverrides classOverrides: GXObjectsModel.GXStyleClassPropertiesOverrides?) -> UIKit.UIColor?
}
extension GXObjectsModel.GXStyleClassWithBorderHelper {
  @objc final public class func styleClassWithBorder(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithBorder?
}
@_inheritsConvenienceInitializers @objc public class GXMiniProgramId : ObjectiveC.NSObject {
  final public let servicesURL: Foundation.URL
  final public let entryPointName: Swift.String
  final public let entryPointType: GXObjectsModel.GXApplicationEntryPointType
  required public init(servicesURL: Foundation.URL, entryPointName: Swift.String, entryPointType: GXObjectsModel.GXApplicationEntryPointType)
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class GXMiniAppProgramId : GXObjectsModel.GXMiniProgramId {
  final public let miniAppInfo: GXObjectsModel.GXMiniAppInformation
  required public init?(miniAppInformation miniAppInfo: GXObjectsModel.GXMiniAppInformation)
  @available(*, unavailable)
  required public init(servicesURL: Foundation.URL, entryPointName: Swift.String, entryPointType: GXObjectsModel.GXApplicationEntryPointType)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class GXMiniProgramsHelper : ObjectiveC.NSObject {
  @objc public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc public static var currentMiniProgramId: GXObjectsModel.GXMiniProgramId? {
    @objc get
    @objc set
  }
  @objc public static let isSuperAppGXApp: Swift.Bool
  @objc public static let isSuperAppNonGXApp: Swift.Bool
  public static let provisioningServerBaseURL: Foundation.URL?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXMiniProgramsHelper {
  @_spi(GXInternal) public static let miniAppsRelativePathComponent: Swift.String
  public static let miniAppsCachesDirectoryURL: Foundation.URL?
  public static func miniAppCacheURL(forIdentifier miniAppId: Swift.String) -> Foundation.URL?
  public class func miniAppId(fromMiniAppCacheURL miniAppCacheURL: Foundation.URL, validateBaseURL: Swift.Bool = true) -> Swift.String?
  public static let miniAppsDocumentsDirectoryURL: Foundation.URL?
  public class func miniAppDocumentsURL(forIdentifier miniAppId: Swift.String) -> Foundation.URL?
  public static let miniAppsApplicationSupportDirectoryURL: Foundation.URL?
  public class func miniAppApplicationSupportURL(forIdentifier miniAppId: Swift.String) -> Foundation.URL?
}
extension GXObjectsModel.GXThemeClassAttributeTitle {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension Foundation.NSCalendar {
  @objc(gxCalendarCurrentTimeZone) dynamic public class func gxCalendarCurrentTimeZone() -> Foundation.Calendar
}
extension Foundation.Calendar {
  public static var gxCalendarCurrentTimeZone: Foundation.Calendar {
    get
  }
}
extension GXFoundation.GXTimeZone {
  @objc(currentTimeZoneWithUTCConversionIfNeeded) dynamic public class var currentTimeZoneWithUTCConversionIfNeeded: Foundation.TimeZone {
    @objc get
  }
}
extension GXObjectsModel.GXApplication {
  @_spi(GXInternal) public struct UserDefautsKeys {
    @_spi(GXInternal) public static let embeddedApplicationStoredServerURLString: Swift.String
    @_spi(GXInternal) public static let embeddedApplicationEntryPoint: Swift.String
    @_spi(GXInternal) public static let embeddedApplicationAdvancedResetFlag: Swift.String
  }
  @_spi(GXInternal) public struct MainBundleInfoKeys {
    @_spi(GXInternal) public static let embeddedApplicationServerURLString: Swift.String
    @_spi(GXInternal) public static let embeddedApplicationEntryPoint: Swift.String
    @_spi(GXInternal) public static let embeddedApplicationEntryPoint_iPad: Swift.String
  }
  @_spi(GXInternal) public static let embeddedApplicationDefaultServerAddress: Swift.String
  @_spi(GXInternal) public class var embeddedApplicationStoredServerURLString: Swift.String? {
    get
    set
  }
  @objc dynamic public class var hasEmbeddedApp: Swift.Bool {
    @objc get
  }
  @objc(defaultApplication) dynamic public class func `default`() -> GXObjectsModel.GXApplication
  @objc(embeddedApplication) dynamic public class var embedded: GXObjectsModel.GXApplication? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassTab {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(selectedTabPageClass) dynamic public var selectedTabPageClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(unselectedTabPageClass) dynamic public var unselectedTabPageClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(tabsPosition) dynamic public var tabsPosition: GXObjectsModel.GXThemeClassTabPosition {
    @objc get
  }
  @objc(tabStripSeparatorColor) dynamic public var tabStripSeparatorColor: UIKit.UIColor {
    @objc get
  }
  @objc(tabStripSeparatorColorResolvingToDefaultValue:) dynamic public func tabStripSeparatorColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc(tabStripIndicatorColor) dynamic public var tabStripIndicatorColor: UIKit.UIColor? {
    @objc get
  }
  @objc(tabStripIndicatorColorResolvingToDefaultValue:) dynamic public func tabStripIndicatorColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc(tabStripBackgroundColor) dynamic public var tabStripBackgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc(tabStripBackgroundColorResolvingToDefaultValue:) dynamic public func tabStripBackgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc(tabStripHeight) dynamic public var tabStripHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc(selectedTabPageClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func selectedTabPageClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(unselectedTabPageClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func unselectedTabPageClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(tabsPositionFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func tabsPosition(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXObjectsModel.GXThemeClassTabPosition) -> GXObjectsModel.GXThemeClassTabPosition
  @objc(tabStripSeparatorColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func tabStripSeparatorColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(tabStripIndicatorColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func tabStripIndicatorColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(tabStripBackgroundColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func tabStripBackgroundColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(tabStripHeightFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func tabStripHeight(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithScrollHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithScrollHelper {
  @objc(scrollIndicatorsStyleFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func scrollIndicatorsStyle(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXScrollIndicatorsStyle
  @objc(scrollIndicatorsVisibilityFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func scrollIndicatorsVisibility(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXScrollIndicatorsVisibility
  @objc(scrollBouncingStyleFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func scrollBouncingStyle(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXScrollBouncingStyle
}
extension GXObjectsModel.GXStyleClassWithScrollHelper {
  @objc final public class func styleClassWithScroll(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithScroll?
}
extension GXObjectsModel.GXThemeClassBase {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassBase : GXObjectsModel.GXThemeClassWithBackground {
  @objc dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var highlightedBackgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var backgroundImage: Swift.String? {
    @objc get
  }
  @objc dynamic public var highlightedBackgroundImage: Swift.String? {
    @objc get
  }
  @objc dynamic public var __backgroundImageMode: GXObjectsModel.GXBackgroundImageMode {
    @objc get
  }
  @objc dynamic public func backgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func highlightedBackgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func backgroundImageResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func highlightedBackgroundImageResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func __backgroundImageModeResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXObjectsModel.GXBackgroundImageMode
}
extension GXObjectsModel.GXThemeClassBase : GXObjectsModel.GXThemeClassWithBorder {
  @objc dynamic public var bordersRadius: GXFoundation.GXBordersRadius {
    @objc get
  }
  @objc dynamic public var borderRadius: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var __borderStyle: GXFoundation.GXBorderStyleType {
    @objc get
  }
  @objc dynamic public var borderWidth: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var borderColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public func bordersRadiusResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXBordersRadius
  @objc dynamic public func borderRadiusResolving(toDefaultValue resolveToDefault: Swift.Bool) -> CoreFoundation.CGFloat
  @objc dynamic public func __borderStyleResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXBorderStyleType
  @objc dynamic public func borderWidthResolving(toDefaultValue resolveToDefault: Swift.Bool) -> CoreFoundation.CGFloat
  @objc dynamic public func borderColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
}
extension GXObjectsModel.GXThemeClassBase : GXObjectsModel.GXStyleClassWithMargin {
  @objc dynamic public var margin: GXFoundation.GXLayoutQuadDimension {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassBase : GXObjectsModel.GXStyleClassWithShadow {
  @objc dynamic public var shadowOffset: CoreFoundation.CGSize {
    @objc get
  }
  @objc dynamic public var shadowColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var shadowOpacity: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var shadowRadius: CoreFoundation.CGFloat {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassBase : GXObjectsModel.GXStyleClassWithTransformation {
  @objc dynamic public var transformation: GXObjectsModel.GXTransformation? {
    @objc get
  }
  @objc dynamic public var animated: Swift.Bool {
    @objc get
  }
  @objc dynamic public var animationDuration: Foundation.NSNumber? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassBase : GXObjectsModel.GXThemeClassWithFont {
  @objc dynamic public var font: UIKit.UIFont? {
    @objc get
  }
  @objc dynamic public var foreColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var highlightedForeColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var inviteMessageColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var fontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var __fontWeight: GXFoundation.GXFontWeightType {
    @objc get
  }
  @objc dynamic public var fontStrikeThrough: Swift.Bool {
    @objc get
  }
  @objc dynamic public var __fontStyle: GXFoundation.GXFontStyleType {
    @objc get
  }
  @objc dynamic public var __fontCategory: GXFoundation.GXFontCategoryType {
    @objc get
  }
  @objc dynamic public var fontFamily: Swift.String? {
    @objc get
  }
  @objc dynamic public var __textTransform: GXFoundation.GXTextTransformType {
    @objc get
  }
  @objc dynamic public func fontResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIFont?
  @objc dynamic public func foreColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func highlightedForeColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func inviteMessageColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func fontSizeResolving(toDefaultValue resolveToDefault: Swift.Bool) -> CoreFoundation.CGFloat
  @objc dynamic public func __fontWeightResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontWeightType
  @objc dynamic public func __fontStyleResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontStyleType
  @objc dynamic public func __fontCategoryResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontCategoryType
  @objc dynamic public func fontFamilyResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func __textTransformResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXTextTransformType
}
extension GXObjectsModel.GXThemeClassButton {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassButton : GXObjectsModel.GXThemeClassWithPadding {
  @objc dynamic public var padding: GXFoundation.GXLayoutQuadDimension {
    @objc get
  }
}
extension GXObjectsModel.GXApplicationModel {
  @objc dynamic public var isEmbeddedApplication: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isMiniAppApplication: Swift.Bool {
    @objc get
  }
}
@objc public class GXDesignSystemToken : ObjectiveC.NSObject, Foundation.NSCoding {
  public typealias OptionName = Swift.String
  @objc final public let values: [Swift.String : GXObjectsModel.GXDesignSystemToken.Value]
  @objc final public let options: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]?
  @objc required public init(values: [Swift.String : GXObjectsModel.GXDesignSystemToken.Value], options: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]?)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXDesignSystemToken {
  @objc(GXDesignSystemTokenValue) public class Value : ObjectiveC.NSObject, Foundation.NSCoding {
    @objc final public let value: Any
    @objc public var stringValue: Swift.String {
      @objc get
    }
    @objc public init(value: Any)
    @objc convenience public init(stringValue: Swift.String)
    @objc public func encode(with coder: Foundation.NSCoder)
    @objc required public init?(coder: Foundation.NSCoder)
    @objc deinit
  }
}
extension GXObjectsModel.GXDesignSystemToken {
  @_hasMissingDesignatedInitializers @objc(GXDesignSystemTokenReference) public class Reference : GXObjectsModel.GXNamedElement {
    @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
    @objc override dynamic public var hash: Swift.Int {
      @objc get
    }
    @objc override dynamic public var name: Swift.String {
      @objc get
    }
    @objc deinit
  }
}
extension GXObjectsModel.GXDesignSystemToken {
  public struct GXOptionNames {
    public static let colorScheme: Swift.String
    public enum ColorSchemeValue : Swift.String {
      case light
      case dark
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithTransformationHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithTransformationHelper {
  @objc(transformationFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func transformation(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXTransformation?
  @objc(animatedFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedValue:) final public class func animated(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedValue: Swift.Bool) -> Swift.Bool
  @objc(animationDurationFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedValue:) final public class func animationDuration(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedValue: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc(animationDurationNumberFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func animationDurationNumber(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Foundation.NSNumber?
}
extension GXObjectsModel.GXStyleClassWithTransformationHelper {
  @objc final public class func styleClassWithTransformation(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithTransformation?
}
extension GXObjectsModel.GXApplicationEntryPointType {
  public static func from(objectType: GXFoundation.GXObjectType) -> GXObjectsModel.GXApplicationEntryPointType?
}
extension GXObjectsModel.GXWorkWithPanelBase : GXObjectsModel.GXModelObject {
  @objc dynamic public var gxModel: GXObjectsModel.GXModel? {
    @objc get
  }
}
extension GXObjectsModel.GXTypedObjectInfo {
  @objc dynamic public class func loadProperties(fromMetadata metadata: [Swift.String : Any], name: Swift.String, gxDataType: GXFoundation.GXDataType, intoProperties properties: Foundation.NSMutableDictionary)
  @objc dynamic public class func dataType(fromMetadata metadata: [Swift.String : Any]) -> GXFoundation.GXDataType
  @objc(shouldLoadLengthFromMetadataForDataType:) dynamic public class func shouldLoadLengthFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadDecimalsFromMetadataForDataType:) dynamic public class func shouldLoadDecimalsFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadRegularExpressionFromMetadataForDataType:) dynamic public class func shouldLoadRegularExpressionFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadSuggestFromMetadataForDataType:) dynamic public class func shouldLoadSuggestFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadPasswordFromMetadataForDataType:) dynamic public class func shouldLoadPasswordFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadInputPictureFromMetadataForDataType:) dynamic public class func shouldLoadInputPictureFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadBasedOnFromMetadataForDataType:) dynamic public class func shouldLoadBasedOnFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadImageUploadResolutionFromMetadataForDataType:) dynamic public class func shouldLoadImageUploadResolutionFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
  @objc(shouldLoadSignedFromMetadataForDataType:) dynamic public class func shouldLoadSignedFromMetadata(for gxdataType: GXFoundation.GXDataType) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class GXApplicationModelLoadOperation : GXObjectsModel.GXModelLoadOperation {
  @_spi(GXInternal) public var _attributeInfoByName: [Swift.String : GXObjectsModel.GXAttributeInfo]?
  @_spi(GXInternal) public var _domainsInfoByName: [Swift.String : GXObjectsModel.GXDomainInfo]?
  @_spi(GXInternal) public var _sdtInfoByName: [Swift.String : GXObjectsModel.GXStructureDataTypeInfo]?
  @_spi(GXInternal) public var _settings: GXObjectsModel.GXApplicationSettings?
  @_spi(GXSameModuleInternal) public var _processingPath: [Swift.String]
  @_spi(GXSameModuleInternal) public var _tempDirURL: Foundation.URL?
  @_spi(GXSameModuleInternal) public var _serverType: GXObjectsModel.GXApplicationServerType
  @objc override dynamic public init(context: GXObjectsModel.GXModelLoadOperationContext)
  @objc deinit
}
@_spi(GXInternal) extension GXObjectsModel.GXApplicationModelLoadOperation {
  @_spi(GXInternal) public func loadWorkWith(from metadata: [Swift.String : Any], workWithName: Swift.String) throws -> GXObjectsModel.GXWorkWithModel?
}
extension GXObjectsModel.GXModelManager {
  @objc(defaultModelFileDirectoryURLForApplication:createIfNeeded:) dynamic public class func defaultModelFileDirectoryURL(for app: GXObjectsModel.GXApplicationProtocol, createIfNeeded: Swift.Bool = false) -> Foundation.URL?
  @objc(defaultModelFileApplicationCacheDirectoryURLForApplication:createIfNeeded:) dynamic public class func defaultModelFileApplicationCacheDirectoryURL(for app: GXObjectsModel.GXApplicationProtocol, createIfNeeded: Swift.Bool = false) -> Foundation.URL?
  @objc(defaultModelFileApplicationCacheDirectoryForApplication:createIfNeeded:) dynamic public class func defaultModelFileApplicationCacheDirectory(for app: GXObjectsModel.GXApplicationProtocol, createIfNeeded: Swift.Bool = false) -> Swift.String?
  @objc(modelFileURLForDirectoryURL:extension:) dynamic public class func modelFileURL(forDirectoryURL dirURL: Foundation.URL, extension pathExt: Swift.String) -> Foundation.URL
  @objc(modelFileFullPathForDirectoryPath:extension:) dynamic public class func modelFileFullPath(forDirectoryPath dirPath: Swift.String, extension pathExt: Swift.String) -> Swift.String
  @objc(modelCustomFontsDirectoryURLForDirectoryURL:) dynamic public class func modelCustomFontsDirectoryURL(forDirectoryURL dirURL: Foundation.URL) -> Foundation.URL
  @objc(modelCustomFontsDirectoryFullPathForDirectoryPath:) dynamic public class func modelCustomFontsDirectoryFullPath(forDirectoryPath dirPath: Swift.String) -> Swift.String
}
@_spi(GXInternal) extension GXObjectsModel.GXModelManager {
  @_spi(GXInternal) public class func modelInfoFileURL(forDirectoryURL dirURL: Foundation.URL) -> Foundation.URL
  @_spi(GXInternal) public class func applicationModelFileURL(forDirectoryURL dirURL: Foundation.URL) -> Foundation.URL
}
extension GXFoundation.GXUtilities {
  @objc dynamic public class func tryHandleGXModelNotAvailableFatalError() -> Swift.Error
  @objc dynamic public class func tryHandleGXModelNotAvailableFatalError(modelObject: GXObjectsModel.GXModelObject) throws -> GXObjectsModel.GXModel
  @objc dynamic public class func tryRecoverGXModelNotAvailableFatalError(modelObject: GXObjectsModel.GXModelObject) -> GXObjectsModel.GXModel?
}
extension GXObjectsModel.GXThemeClassApplication {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(datePickerImage) dynamic public var datePickerImage: Swift.String? {
    @objc get
  }
  @objc(promptImage) dynamic public var promptImage: Swift.String? {
    @objc get
  }
  @objc(primaryColor) dynamic public var primaryColor: UIKit.UIColor? {
    @objc get
  }
  @objc(primaryColorDark) dynamic public var primaryColorDark: UIKit.UIColor? {
    @objc get
  }
  @objc(accentColor) dynamic public var accentColor: UIKit.UIColor? {
    @objc get
  }
  @objc(actionTintColor) dynamic public var actionTintColor: UIKit.UIColor? {
    @objc get
  }
  @objc(datePickerImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func datePickerImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(promptImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func promptImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(primaryColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func primaryColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(primaryColorDarkFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func primaryColorDark(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(accentColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func accentColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(actionTintColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func actionTintColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXStyleKBObject) public class GXStyleKBObject : GXObjectsModel.GXNamedModelObjectChild {
  @objc public var styleClassesByName: [Swift.String : GXObjectsModel.GXStyleClass] {
    get
  }
  @objc public var transformationsByName: [Swift.String : GXObjectsModel.GXTransformation]? {
    get
  }
  @objc final public let customFonts: [GXObjectsModel.GXStyleCustomFont]?
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc public var keyColor: UIKit.UIColor? {
    @objc get
  }
  @objc(styleClassForName:) public func styleClass(forName name: Swift.String) -> GXObjectsModel.GXStyleClass?
  @objc(transformationForName:) public func transformation(forName name: Swift.String) -> GXObjectsModel.GXTransformation?
  @available(*, unavailable)
  @objc override dynamic public init(name: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXStyleKBObject {
  @available(*, deprecated, message: "Use GXModel currentStyleObject instead")
  @objc(currentStyleObject) public static var current: GXObjectsModel.GXStyleKBObject? {
    @objc get
  }
}
@objc(GXApplicationStorageService) public protocol GXApplicationStorageService : ObjectiveC.NSObjectProtocol {
  @objc func applicationDocumentsDirectory() -> Swift.String
  @objc(applicationDocumentsDirectoryForApplication:) func applicationDocumentsDirectory(for application: GXObjectsModel.GXApplicationProtocol) -> Swift.String?
  @objc(applicationDocumentsDirectoryForAppModel:) func applicationDocumentsDirectory(for appModel: GXObjectsModel.GXApplicationModel) -> Swift.String
  @objc(applicationDocumentsDirectoryForApplication:createIfNeeded:) func applicationDocumentsDirectory(for application: GXObjectsModel.GXApplicationProtocol, createIfNeeded: Swift.Bool) -> Swift.String?
  @objc(applicationDocumentsDirectoryForAppModel:createIfNeeded:) func applicationDocumentsDirectory(for appModel: GXObjectsModel.GXApplicationModel, createIfNeeded: Swift.Bool) -> Swift.String
  @objc func applicationAppSupportDirectory() -> Swift.String
  @objc(applicationAppSupportDirectoryForApplication:) func applicationAppSupportDirectory(for application: GXObjectsModel.GXApplicationProtocol) -> Swift.String?
  @objc(applicationAppSupportDirectoryForAppModel:) func applicationAppSupportDirectory(for appModel: GXObjectsModel.GXApplicationModel) -> Swift.String
  @objc(applicationAppSupportDirectoryForApplication:createIfNeeded:) func applicationAppSupportDirectory(for application: GXObjectsModel.GXApplicationProtocol, createIfNeeded: Swift.Bool) -> Swift.String?
  @objc(applicationAppSupportDirectoryForAppModel:createIfNeeded:) func applicationAppSupportDirectory(for appModel: GXObjectsModel.GXApplicationModel, createIfNeeded: Swift.Bool) -> Swift.String
  @objc func applicationCachesDirectory() -> Swift.String
  @objc(applicationCachesDirectoryForApplication:) func applicationCachesDirectory(for application: GXObjectsModel.GXApplicationProtocol) -> Swift.String?
  @objc(applicationCachesDirectoryForAppModel:) func applicationCachesDirectory(for appModel: GXObjectsModel.GXApplicationModel) -> Swift.String
  @objc(applicationCachesDirectoryForApplication:createIfNeeded:) func applicationCachesDirectory(for application: GXObjectsModel.GXApplicationProtocol, createIfNeeded: Swift.Bool) -> Swift.String?
  @objc(applicationCachesDirectoryForAppModel:createIfNeeded:) func applicationCachesDirectory(for appModel: GXObjectsModel.GXApplicationModel, createIfNeeded: Swift.Bool) -> Swift.String
}
extension GXObjectsModel.GXThemeClassAttributeSubtitle {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@_inheritsConvenienceInitializers @objc(GXWorkWithExpression) public class GXWorkWithExpression : GXObjectsModel.GXModelObjectChild {
  @available(*, unavailable)
  @objc override dynamic public init(modelObject: GXObjectsModel.GXModelObject?)
  @available(*, deprecated, message: "Use init(metadata:dataElementsByName:for:) instead")
  @objc(initWithMetadata:dataElementsByName:error:) convenience public init(metadata: [Swift.String : Any]?, dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?) throws
  @objc(initWithMetadata:dataElementsByName:forModelObject:error:) required public init(metadata: [Swift.String : Any]?, dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?, for modelObject: GXObjectsModel.GXModelObject?) throws
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXWorkWithExpression : GXObjectsModel.GXExpression {
  @objc dynamic public var expressionType: GXObjectsModel.GXExpressionType {
    @objc get
  }
  @objc dynamic public func expressionDataFieldInfo() -> GXObjectsModel.GXEntityDataFieldInfo?
}
extension GXObjectsModel.GXStyleClass : GXObjectsModel.GXStyleClassProvider {
  @objc final public var styleClass: GXObjectsModel.GXStyleClass {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassImage {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc(imageLoadingIndicator) dynamic public var imageLoadingIndicator: Swift.Bool {
    @objc get
  }
  @objc(placeholderImage) dynamic public var placeholderImage: Swift.String? {
    @objc get
  }
  @objc(scaleType) dynamic public var scaleType: GXObjectsModel.GXImageScaleType {
    @objc get
  }
  @objc(showImageLoadingIndicatorFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) dynamic public class func showImageLoadingIndicator(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: Swift.Bool) -> Swift.Bool
  @objc(placeholderImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func placeholderImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(scaleTypeFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) dynamic public class func scaleType(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXObjectsModel.GXImageScaleType) -> GXObjectsModel.GXImageScaleType
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassImage : GXObjectsModel.GXThemeClassWithMotionEffect {
  @objc dynamic public var motionEffectMaxVerticalOffset: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var motionEffectMaxHorizontalOffset: CoreFoundation.CGFloat {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassImage : GXObjectsModel.GXStyleClassWithDimensions {
  @objc dynamic public var width: Swift.UInt {
    @objc get
  }
  @objc dynamic public var height: Swift.UInt {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(GXDashboardModel) public class GXDashboardModel : GXObjectsModel.GXSDObjectModel, GXObjectsModel.GXMenu {
  @objc(initWithName:instanceProperties:title:backgroundImageName:headerImageName:controlType:items:notifications:events:showApplicationBars:appBarsClassName:showLogoutButton:styleClassName:forModelObject:) required public init(name: Swift.String, instanceProperties: [Swift.String : Any]?, title: Swift.String?, backgroundImageName: Swift.String?, headerImageName: Swift.String?, controlType: GXObjectsModel.GXMenuControlType, items: [GXObjectsModel.GXMenuItem]?, notifications: [GXObjectsModel.GXEventDescriptorProtocol]?, events: [GXObjectsModel.GXEventDescriptorProtocol]?, showApplicationBars: Swift.Bool, appBarsClassName: Swift.String?, showLogoutButton: Swift.Bool, styleClassName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc override convenience dynamic public init(name: Swift.String, instanceProperties: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public var menuName: Swift.String {
    @objc get
  }
  @objc public var menuTitle: Swift.String? {
    @objc get
  }
  @objc final public let menuBackgroundImageName: Swift.String?
  @objc final public let menuHeaderImageName: Swift.String?
  @objc final public let menuItems: [GXObjectsModel.GXMenuItem]
  @objc final public let menuEvents: [GXObjectsModel.GXEventDescriptorProtocol]
  @objc public var menuNotificationEvents: [GXObjectsModel.GXEventDescriptorProtocol] {
    @objc get
    @objc set
  }
  @objc final public let menuShowApplicationBars: Swift.Bool
  @objc final public let menuApplicationBarsClassName: Swift.String?
  @objc final public let menuShowLogoutButton: Swift.Bool
  @objc final public let menuStyleClassName: Swift.String?
  @objc final public let menuControlType: GXObjectsModel.GXMenuControlType
  @objc public var menuSecurityLevel: Swift.String? {
    @objc get
  }
  @objc public var menuConnectivitySupport: GXFoundation.GXConnectivitySupportType {
    @objc get
  }
  public var menuThemeClassFullName: Swift.String? {
    get
  }
  @objc deinit
}
extension GXObjectsModel.GXThemeClassLabelTitle {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassTabPageUnselected {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXObjectsModelServices) public class GXObjectsModelServices : ObjectiveC.NSObject {
  @objc deinit
}
extension GXObjectsModel.GXObjectsModelServices {
  @objc dynamic public class func alertUIMessageService() -> GXObjectsModel.GXAlertUIMessageService
  @objc dynamic public class func applicationStorageService() -> GXObjectsModel.GXApplicationStorageService
  @objc dynamic public class func controlModelService() -> GXObjectsModel.GXControlModelService
  @objc dynamic public class func debuggerService() -> GXObjectsModel.GXDebuggerModelService?
  @objc dynamic public class func expressionEvaluatorService() -> GXObjectsModel.GXExpressionEvaluatorService
  @objc dynamic public class func securityService() -> GXObjectsModel.GXSecurityService?
}
@_inheritsConvenienceInitializers @objc(GXActionParameters) public class GXActionParameters : GXObjectsModel.GXModelObjectChild {
  @objc convenience override dynamic public init(modelObject: GXObjectsModel.GXModelObject?)
  @objc(initWithParameters:forModelObject:) required public init(parameters: [GXObjectsModel.GXActionParameterDescriptor]?, for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, deprecated, message: "Use actionParameters(fromMetadata:withDataElements:for:error:) instead")
  @objc(actionParametersFromMetadata:withDataElements:error:) public class func actionParameters(fromMetadata metadata: [Swift.String : Any]?, withDataElements dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?, error: Swift.UnsafeMutablePointer<Foundation.NSError?>?) -> GXObjectsModel.GXActionParameters?
  @objc(actionParametersFromMetadata:withDataElements:forModelObject:error:) public class func actionParameters(fromMetadata metadata: [Swift.String : Any]?, withDataElements dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?, for modelObject: GXObjectsModel.GXModelObject?, error: Swift.UnsafeMutablePointer<Foundation.NSError?>?) -> GXObjectsModel.GXActionParameters?
  convenience public init?(fromMetadata metadata: [Swift.String : Any]?, withDataElements dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?, for modelObject: GXObjectsModel.GXModelObject?) throws
  @objc(actionParameterFromMetadata:expressionElementName:withDataElements:forModelObject:error:) public class func actionParameter(fromMetadata metadata: [Swift.String : Any]?, expressionElementName exprElementName: Swift.String, withDataElements dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?, for modelObject: GXObjectsModel.GXModelObject?) throws -> GXObjectsModel.GXActionParameter
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXActionParameters : GXObjectsModel.GXActionParametersDescriptor {
  @objc dynamic public var actionParametersDescriptors: [GXObjectsModel.GXActionParameterDescriptor] {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassList {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func themeSubClassClass(forFullName subClassFullName: Swift.String) -> Swift.AnyClass
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func newRequiredSubClassesClassesArray() -> [Swift.AnyClass]?
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc public static let defaultShowLineSeparator: Swift.Bool
  @objc(listItemOddItemThemeClass) dynamic public var listItemOddItemThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(listItemEvenItemThemeClass) dynamic public var listItemEvenItemThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(showLineSeparator) dynamic public var showLineSeparator: Swift.Bool {
    @objc get
  }
  @objc(groupSeparatorThemeClass) dynamic public var groupSeparatorThemeClass: GXObjectsModel.GXThemeClassGroupSeparator? {
    @objc get
  }
  @objc(horizontalSeparatorThemeClass) dynamic public var horizontalSeparatorThemeClass: GXObjectsModel.GXThemeClassHorizontalSeparator? {
    @objc get
  }
  @objc(listItemOddItemClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func listItemOddItemClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(listItemEvenItemClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func listItemEvenItemClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(showLineSeparatorFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) dynamic public class func showLineSeparator(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: Swift.Bool) -> Swift.Bool
  @objc(groupSeparatorClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func groupSeparatorClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(horizontalSeparatorClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func horizontalSeparatorClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassList : GXObjectsModel.GXThemeClassWithDragAndDrop {
  @objc dynamic public var startDraggingThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var acceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var noAcceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var dragOverThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassList : GXObjectsModel.GXThemeClassWithLoadingAnimation {
  @objc dynamic public var loadingAnimationThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
@objc @frozen public enum GXImageType : Darwin.uint_least8_t {
  case `internal`
  case external
  public init?(rawValue: Darwin.uint_least8_t)
  public typealias RawValue = Darwin.uint_least8_t
  public var rawValue: Darwin.uint_least8_t {
    get
  }
}
@objc public enum GXImageRenderingMode : Darwin.uint_least8_t {
  case automatic
  case original
  case template
  public init?(rawValue: Darwin.uint_least8_t)
  public typealias RawValue = Darwin.uint_least8_t
  public var rawValue: Darwin.uint_least8_t {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXImage) public class GXImage : GXObjectsModel.GXNamedElement {
  @objc weak public var imageObject: GXObjectsModel.GXLocalizedImageObject? {
    @objc get
  }
  @objc public var location: Swift.String {
    @objc get
  }
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc public var type: GXObjectsModel.GXImageType {
    @objc get
  }
  @objc public var guid: Swift.String? {
    @objc get
  }
  @objc public var renderingMode: GXObjectsModel.GXImageRenderingMode {
    @objc get
  }
  public var scalableEdgeInsets: UIKit.UIEdgeInsets? {
    get
  }
  @objc(scalableEdgeInsets) public var __scalableEdgeInsets: Foundation.NSValue? {
    @objc get
  }
  @objc public var flipsForRTL: Swift.Bool {
    @objc get
  }
  @objc public var internalName: Swift.String {
    @objc get
  }
  @objc public var internalNameRetina: Swift.String {
    @objc get
  }
  @objc public var internalNameRetinaHD: Swift.String {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXImage {
  @available(*, deprecated, message: "This method will always fail.")
  @objc(imageWithMetadata:error:) dynamic public class func image(metadata: Any) throws -> Self
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXImageVariant) public class GXImageVariant : GXObjectsModel.GXImage {
  @objc override public var imageObject: GXObjectsModel.GXLocalizedImageObject? {
    @objc get
  }
  @objc override public var location: Swift.String {
    @objc get
  }
  @objc override public var renderingMode: GXObjectsModel.GXImageRenderingMode {
    @objc get
  }
  override public var scalableEdgeInsets: UIKit.UIEdgeInsets? {
    get
  }
  @objc override public var flipsForRTL: Swift.Bool {
    @objc get
  }
  @objc public var options: [Swift.String : Swift.String]? {
    @objc get
  }
  public var scale: CoreFoundation.CGFloat? {
    get
  }
  @objc(scale) public var __scale: Foundation.NSNumber? {
    @objc get
  }
  @objc override public var internalName: Swift.String {
    @objc get
  }
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXLocalizedImageObject) public class GXLocalizedImageObject : GXObjectsModel.GXImage {
  @objc final public let variants: [GXObjectsModel.GXImageVariant]
  @objc weak public var localization: GXObjectsModel.GXImagesLocalization? {
    @objc get
  }
  @objc override public var imageObject: GXObjectsModel.GXLocalizedImageObject? {
    @objc get
  }
  @objc override public var location: Swift.String {
    @objc get
  }
  @objc override public var type: GXObjectsModel.GXImageType {
    @objc get
  }
  @objc override public var guid: Swift.String? {
    @objc get
  }
  @objc override public var renderingMode: GXObjectsModel.GXImageRenderingMode {
    @objc get
  }
  override public var scalableEdgeInsets: UIKit.UIEdgeInsets? {
    get
  }
  @objc override public var flipsForRTL: Swift.Bool {
    @objc get
  }
  @objc public var currentVariantCanChange: Swift.Bool {
    @objc get
  }
  @objc public var currentVariant: GXObjectsModel.GXImageVariant? {
    @objc get
  }
  @objc public func invalidateCurrentVariant()
  @objc deinit
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
}
extension GXObjectsModel.GXImageVariant {
  @objc dynamic public var isCurrentVariant: Swift.Bool {
    @objc get
  }
}
extension GXFoundation.GXExecutionEnvironmentHelper {
  public class func allConnectedWindows(for modelObject: GXObjectsModel.GXModelObject) -> [UIKit.UIWindow]
}
extension GXObjectsModel.GXThemeClassTabPage {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func themeSubClassClass(forFullName subClassFullName: Swift.String) -> Swift.AnyClass
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func newRequiredSubClassesClassesArray() -> [Swift.AnyClass]?
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@_inheritsConvenienceInitializers @objc(GXApplicationSettings) public class GXApplicationSettings : ObjectiveC.NSObject, Foundation.NSCoding {
  @available(*, deprecated, message: "Use init(version:styleObjectName:styleObjectType:navigationStyle:convertTimesFromUTC:defaultInterfaceOrientation:defaultLabelPosition:imageUploadSizes:imageUploadSizes:validPlatformNames:ideConnectionString:) instead.")
  @objc convenience public init(version: Swift.String?, styleObjectName: Swift.String?, styleObjectType: GXFoundation.GXObjectType, navigationStyle: Swift.String?, convertTimesFromUTC convertFromUTC: Swift.Bool, defaultInterfaceOrientation orientation: GXFoundation.GXInterfaceOrientation, imageUploadSizes imgUploadSizes: GXObjectsModel.GXApplicationImageUploadSettings?, validPlatformNames: [Swift.String]?, ideConnectionString: Swift.String?)
  @objc required public init(version: Swift.String?, styleObjectName: Swift.String?, styleObjectType: GXFoundation.GXObjectType, navigationStyle: Swift.String?, convertTimesFromUTC convertFromUTC: Swift.Bool, defaultInterfaceOrientation orientation: GXFoundation.GXInterfaceOrientation, defaultLabelPosition labelPosition: GXFoundation.GXLayoutLabelPositionType, imageUploadSizes imgUploadSizes: GXObjectsModel.GXApplicationImageUploadSettings?, validPlatformNames: [Swift.String]?, ideConnectionString: Swift.String?)
  @objc convenience override dynamic public init()
  @objc final public let version: Swift.String?
  @objc final public let styleObjectName: Swift.String?
  @objc final public let styleObjectType: GXFoundation.GXObjectType
  @objc final public let navigationStyle: Swift.String
  @objc final public let convertTimesFromUTC: Swift.Bool
  @objc final public let defaultInterfaceOrientation: GXFoundation.GXInterfaceOrientation
  @objc final public let defaultLabelPosition: GXFoundation.GXLayoutLabelPositionType
  @objc final public let imageUploadSizes: GXObjectsModel.GXApplicationImageUploadSettings
  @objc final public let validPlatformNames: [Swift.String]
  @objc public var ideConnectionString: Swift.String?
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXApplicationSettings {
  @available(*, deprecated, message: "Use GXApplicationModel settings instead")
  @objc(currentModelSettings) dynamic public class func currentModel() -> GXObjectsModel.GXApplicationSettings?
}
public typealias GXUserInterfaceController = UIKit.UIViewController
extension GXObjectsModel.GXApplicationModel {
  @objc dynamic public var applicationEntryPointDeepLinkBaseURLs: [Swift.String] {
    @objc get
  }
  public class func applicationEntryPointDeepLinkBaseURLs(_ appEntryPoint: GXObjectsModel.GXApplicationEntryPointProtocol) -> [Swift.String]
}
extension GXObjectsModel.GXImage : GXObjectsModel.GXModelObject {
  @objc dynamic public var gxModel: GXObjectsModel.GXModel? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassListItemOddItem {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithMarginHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithMarginHelper {
  @objc(marginFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func margin(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXLayoutQuadDimension
}
extension GXObjectsModel.GXStyleClassWithMarginHelper {
  @objc final public class func styleClassWithMargin(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithMargin?
}
@objc(GXAlertUIMessageServiceRecoveryAttempterMode) public enum GXAlertUIMessageServiceRecoveryAttempterMode : Swift.Int {
  @objc(GXAlertUIMessageServiceRecoveryAttempterMode_RecoveryAttempterOnly) case recoveryAttempterOnly
  @objc(GXAlertUIMessageServiceRecoveryAttempterMode_ActionsOnly) case actionsOnly
  @objc(GXAlertUIMessageServiceRecoveryAttempterMode_FallbackToActions) case fallbackToActions
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(GXAlertUIMessageService) public protocol GXAlertUIMessageService : GXFoundation.GXAlertMessageService {
  typealias RecoveryAttempterMode = GXObjectsModel.GXAlertUIMessageServiceRecoveryAttempterMode
  @objc func showAlert(withTitle alertTitle: Swift.String?, message alertMsg: Swift.String?, uiContext: GXObjectsModel.GXUserInterfaceContext?)
  @objc func showAlert(withTitle alertTitle: Swift.String?, message alertMsg: Swift.String?, completion: (() -> Swift.Void)?, dismissedHandler: (() -> Swift.Void)?, uiContext: GXObjectsModel.GXUserInterfaceContext?)
  @objc func showAlert(withTitle alertTitle: Swift.String?, message alertMsg: Swift.String?, actions: [GXObjectsModel.GXAlertUIAction]?, completion: (() -> Swift.Void)?, dismissedHandler: (() -> Swift.Void)?, uiContext: GXObjectsModel.GXUserInterfaceContext?)
  @objc func showAlert(forError error: Swift.Error?, uiContext: GXObjectsModel.GXUserInterfaceContext?)
  @objc func showAlert(forError error: Swift.Error?, completion: (() -> Swift.Void)?, dismissedHandler: (() -> Swift.Void)?, uiContext: GXObjectsModel.GXUserInterfaceContext?)
  @objc func showAlert(forError error: Swift.Error?, recoveryAttempterMode: Self.RecoveryAttempterMode, actions: [GXObjectsModel.GXAlertUIAction]?, completion: (() -> Swift.Void)?, dismissedHandler: (() -> Swift.Void)?, uiContext: GXObjectsModel.GXUserInterfaceContext?)
}
extension GXObjectsModel.GXResources {
  @available(*, deprecated, message: "Use imageOrURLForName:modelObject:image:url:gxImage: instead")
  @objc(imageOrURLForName:image:url:gxImage:) dynamic public class func imageOrURL(forName name: Swift.String, image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, url urlPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?, gxImage gxImagePtr: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  @objc(imageOrURLForName:modelObject:image:url:gxImage:) dynamic public class func __imageOrURL(forName name: Swift.String, modelObject: GXObjectsModel.GXModelObject?, image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, nsURL nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?, gxImage gxImagePtr: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  @objc(imageOrURLForName:image:url:gxImage:) dynamic public func __imageOrURL(forName name: Swift.String, image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, nsURL nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?, gxImage gxImagePtr: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  public func imageOrURL(forName name: Swift.String, loadOptions: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions = .all) -> (value: GXObjectsModel.GXImagesLocalization.ImageOrURL?, gxImage: GXObjectsModel.GXImage?)
  @objc(translationFor:notFoundMessage:) dynamic public func translation(for message: Swift.String, notFoundMessage: Swift.String) -> Swift.String
  @objc(translationFor:notFoundOptionalMessage:) dynamic public func translation(for message: Swift.String, notFoundOptionalMessage: Swift.String?) -> Swift.String?
  @objc(translationFor:) dynamic public func translation(for message: Swift.String) -> Swift.String
  @objc(translationWithFormat:values:) dynamic public func translation(withFormat formatMessageKey: Swift.String, values: [Any]) -> Swift.String
  @objc(translationFor:modelObject:notFoundMessage:) dynamic public class func translation(for message: Swift.String, modelObject: GXObjectsModel.GXModelObject?, notFoundMessage: Swift.String) -> Swift.String
  @objc(translationFor:modelObject:notFoundOptionalMessage:) dynamic public class func translation(for message: Swift.String, modelObject: GXObjectsModel.GXModelObject?, notFoundOptionalMessage: Swift.String?) -> Swift.String?
  @objc(translationFor:modelObject:) dynamic public class func translation(for message: Swift.String, modelObject: GXObjectsModel.GXModelObject?) -> Swift.String
}
extension GXObjectsModel.GXApplicationHelper {
  @available(*, deprecated, message: "Use request(url:,for:) instead")
  @objc(requestWithURL:) dynamic public class func request(with url: Foundation.URL) -> Foundation.NSMutableURLRequest
  @available(*, deprecated, message: "Use request(url:,for:options:) instead")
  @objc(requestWithURL:options:) dynamic public class func request(with url: Foundation.URL, options: [Swift.String : Any]?) -> Foundation.NSMutableURLRequest
  @objc(requestWithURL:forModelObject:) dynamic public class func __request(url: Foundation.URL, for modelObject: GXObjectsModel.GXModelObject) -> Foundation.NSMutableURLRequest
  @objc(requestWithURL:forModelObject:options:) dynamic public class func __request(url: Foundation.URL, for modelObject: GXObjectsModel.GXModelObject, options: [Swift.String : Any]?) -> Foundation.NSMutableURLRequest
  public class func request(url: Foundation.URL, for modelObject: GXObjectsModel.GXModelObject, options: [Swift.String : Any]? = nil) -> Foundation.URLRequest
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithFontHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithFontHelper {
  @objc(fontWithNonDefaultValuesFromStyleClass:defaultPropertyResolver:) final public class func fontWithNonDefaultValues(from styleClass: GXObjectsModel.GXStyleClass, defaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIFont?
  @objc(fontFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func font(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIFont?
  @objc(foreColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func foreColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(highlightedForeColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func highlightedForeColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(fontInviteMessageColorFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func fontInviteMessageColor(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> UIKit.UIColor?
  @objc(fontSizeFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func fontSize(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc(fontWeightFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func fontWeight(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXFoundation.GXFontWeightType) -> GXFoundation.GXFontWeightType
  final public class func fontWeight(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXFontWeightType?
  @objc(fontStrikeThroughFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func fontStrikeThrough(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: Swift.Bool) -> Swift.Bool
  @objc(fontStyleFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func fontStyle(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXFoundation.GXFontStyleType) -> GXFoundation.GXFontStyleType
  final public class func fontStyle(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXFontStyleType?
  @objc(fontCategoryFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func fontCategory(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXFoundation.GXFontCategoryType) -> GXFoundation.GXFontCategoryType
  final public class func fontCategory(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXFontCategoryType?
  @objc(fontFamilyFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func fontFamily(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(textTransformFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) final public class func textTransform(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXFoundation.GXTextTransformType) -> GXFoundation.GXTextTransformType
  final public class func textTransform(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXTextTransformType?
  @objc(textWithTransform:fromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func textWithTransform(_ text: Swift.String, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String
}
extension GXObjectsModel.GXStyleClassWithFontHelper {
  @objc final public class func styleClassWithFont(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithFont?
}
extension UIKit.UIFontDescriptor {
  @objc(gxPreferredFontDescriptor) final public class func gxPreferred() -> UIKit.UIFontDescriptor
}
@objc(GXControlModelService) public protocol GXControlModelService : ObjectiveC.NSObjectProtocol {
  @objc func transformControlType(_ controlType: Swift.String, customPropertiesFromMetadata customProperties: [Swift.String : Any]?) -> [Swift.String : Any]?
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithMotionEffectHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithMotionEffectHelper {
  @objc(motionEffectMaxHorizontalOffsetFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func motionEffectMaxHorizontalOffset(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(motionEffectMaxVerticalOffsetFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func motionEffectMaxVerticalOffset(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
}
extension GXObjectsModel.GXStyleClassWithMotionEffectHelper {
  @objc final public class func styleClassWithMotionEffect(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithMotionEffect?
}
@_spi(GXInternal) extension GXObjectsModel.GXImage {
  @_spi(GXInternal) public struct ScaleSuffixInfo {
    @_spi(GXInternal) public var range: Swift.Range<Swift.String.Index>
    @_spi(GXInternal) public var scale: CoreFoundation.CGFloat
    @_spi(GXInternal) public var kind: GXObjectsModel.GXImage.ScaleSuffixInfo.Kind
    @_spi(GXInternal) public enum Kind {
      @_spi(GXInternal) case native
      @_spi(GXInternal) case gx
      @_spi(GXInternal) public static func == (a: GXObjectsModel.GXImage.ScaleSuffixInfo.Kind, b: GXObjectsModel.GXImage.ScaleSuffixInfo.Kind) -> Swift.Bool
      @_spi(GXInternal) public func hash(into hasher: inout Swift.Hasher)
      @_spi(GXInternal) public var hashValue: Swift.Int {
        @_spi(GXInternal) get
      }
    }
  }
  @_spi(GXInternal) public class func scaleSuffix(for scale: CoreFoundation.CGFloat, of kind: GXObjectsModel.GXImage.ScaleSuffixInfo.Kind) -> Swift.String
  @_spi(GXInternal) public class func scanScaleSuffix(from imageName: Swift.String, of kind: GXObjectsModel.GXImage.ScaleSuffixInfo.Kind? = nil) -> GXObjectsModel.GXImage.ScaleSuffixInfo?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXStructureDataTypeBCLevelInfo) public class GXStructureDataTypeBCLevelInfo : GXObjectsModel.GXStructureDataTypeLevelInfo {
  @objc final public let bcLevel: GXObjectsModel.GXBusinessComponentLevel
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXThemeClassAnimation {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc(registerExtensionPropertiesNames:forTypeIdentifier:) dynamic public class func registerExtensionPropertiesNames(_ extensionPropertiesNames: [GXObjectsModel.GXStyleClass.PropertyName], forTypeIdentifier typeIdentifier: Swift.String)
  @objc public static let defaultWidth: GXFoundation.GXLayoutDimension
  @objc public static let defaultHeight: GXFoundation.GXLayoutDimension
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(typeIdentifier) dynamic public var typeIdentifier: Swift.String? {
    @objc get
  }
  @objc(width) dynamic public var width: GXFoundation.GXLayoutDimension {
    @objc get
  }
  @objc(height) dynamic public var height: GXFoundation.GXLayoutDimension {
    @objc get
  }
  @objc(typeIdentifierFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func typeIdentifier(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(widthFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) dynamic public class func width(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXFoundation.GXLayoutDimension) -> GXFoundation.GXLayoutDimension
  public class func width(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXLayoutDimension?
  @objc(heightFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) dynamic public class func height(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXFoundation.GXLayoutDimension) -> GXFoundation.GXLayoutDimension
  public class func height(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXLayoutDimension?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@objc(GXAttributeControlType) public enum GXAttributeControlType : Darwin.uint_least8_t {
  @objc(GXAttributeControlTypeEdit) case edit
  @objc(GXAttributeControlTypeComboBox) case comboBox
  @objc(GXAttributeControlTypeRadioButton) case radioButton
  @objc(GXAttributeControlTypeCheckBox) case checkBox
  @objc(GXAttributeControlTypeDynamicComboBox) case dynamicComboBox
  @objc(GXAttributeControlTypeListBox) case listBox
  @objc(GXAttributeControlTypeDynamicListBox) case dynamicListBox
  public init?(rawValue: Darwin.uint_least8_t)
  public typealias RawValue = Darwin.uint_least8_t
  public var rawValue: Darwin.uint_least8_t {
    get
  }
}
@objc(GXTypedObjectInfo) open class GXTypedObjectInfo : GXObjectsModel.GXDescriptionModelObjectChild {
  public struct PropertyName {
    public static let lenght: Swift.String
    public static let decimals: Swift.String
    public static let specialDomain: Swift.String
    public static let isPassword: Swift.String
    public static let enumValues: Swift.String
    public static let basedOnName: Swift.String
    public static let basedOnType: Swift.String
    public static let isCollection: Swift.String
    public static let signed: Swift.String
    public static let regularExpression: Swift.String
    public static let control: Swift.String
    public static let suggest: Swift.String
    public static let inputPicture: Swift.String
    public static let imageUploadResolution: Swift.String
  }
  public struct MetadataKey {
    public static let name: Swift.String
    public static let description: Swift.String
    public static let length: Swift.String
    public static let decimals: Swift.String
    public static let domain: Swift.String
    public static let typeName: Swift.String
    public static let type: Swift.String
    public static let regularExpression: Swift.String
    public static let inputPicture: [Swift.String]
    public static let isPassword: [Swift.String]
    public static let isCollection: [Swift.String]
    public static let signed: Swift.String
    public static let suggest: Swift.String
    public static let maximumUploadSize: Swift.String
  }
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc final public let dataType: GXFoundation.GXDataType
  @objc final public let properties: [Swift.String : Any]?
  @objc public var isCollection: Swift.Bool {
    @objc get
  }
  @objc public var collectionItemFieldInfo: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
  @objc open func newCollectionItemFieldInfoFromProperties() -> GXObjectsModel.GXTypedObjectCollectionItemInfoWrapper
  @available(*, deprecated, message: "Use init?(metadata:for:) instead")
  @objc convenience public init?(metadata: [Swift.String : Any])
  @objc(initWithMetadata:forModelObject:) required public init?(metadata: [Swift.String : Any], for modelObject: GXObjectsModel.GXModelObject?)
  @available(*, deprecated, message: "Use from(metadata:for:) instead")
  @objc(typedObjectInfoFromMetadata:) public class func from(metadata: [Swift.String : Any]?) -> Self?
  @objc(typedObjectInfoFromMetadata:forModelObject:) public class func from(metadata: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?) -> Self?
  @available(*, deprecated, message: "Use init?(name:basedOnName:basedOnType:from:) instead")
  @objc convenience public init?(name: Swift.String, basedOnName: Swift.String, basedOnType: GXFoundation.GXBasedOnType)
  @objc(initWithName:basedOnName:basedOnType:fromModel:) convenience public init?(name: Swift.String, basedOnName: Swift.String, basedOnType: GXFoundation.GXBasedOnType, from model: GXObjectsModel.GXKBObjectsModel)
  @available(*, deprecated, message: "Use init(name:dataType:description:properties:for:) instead")
  @objc convenience public init(name: Swift.String, dataType: GXFoundation.GXDataType, description: Swift.String?, properties: [Swift.String : Any]?)
  @objc(initWithName:dataType:description:properties:forModelObject:) required public init(name: Swift.String, dataType: GXFoundation.GXDataType, description: Swift.String?, properties: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc override dynamic open func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_spi(GXInternal) public func ensureBasedOnInfoIsLoaded(from model: GXObjectsModel.GXKBObjectsModel?)
  public var specialDomain: GXFoundation.GXSpecialDomainType? {
    get
  }
  public var dateFormat: GXFoundation.GXDataDateFormat? {
    get
  }
  public var timeFormat: GXFoundation.GXDataTimeFormat? {
    get
  }
  @objc deinit
}
extension GXObjectsModel.GXTypedObjectInfo {
  @objc dynamic public var length: Swift.UInt {
    @objc get
  }
  @objc dynamic public var decimals: Swift.UInt {
    @objc get
  }
  @objc dynamic public var regularExpression: Swift.String? {
    @objc get
  }
  @objc dynamic public var suggest: Swift.Bool {
    @objc get
  }
  @objc dynamic public var password: Swift.Bool {
    @objc get
  }
  @objc dynamic public var inputPicture: Swift.String? {
    @objc get
  }
  @objc dynamic public var basedOnName: Swift.String? {
    @objc get
  }
  @objc dynamic public var basedOnType: GXFoundation.GXBasedOnType {
    @objc get
  }
  @objc dynamic public var basedOnInfo: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
  @objc(specialDomain) dynamic public var __specialDomain: GXFoundation.GXSpecialDomainType {
    @objc get
  }
  @objc(dateFormat) dynamic public var __dateFormat: GXFoundation.GXDataDateFormat {
    @objc get
  }
  @objc(timeFormat) dynamic public var __timeFormat: GXFoundation.GXDataTimeFormat {
    @objc get
  }
  @objc dynamic public var imageUploadResolution: GXObjectsModel.GXImageUploadResolutionType {
    @objc get
  }
}
extension GXObjectsModel.GXTypedObjectInfo : GXObjectsModel.GXEntityDataFieldInfo {
  @objc dynamic public var entityDataFieldInfoDataType: GXFoundation.GXDataType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoIsCollection: Swift.Bool {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoLength: Swift.UInt {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoDecimals: Swift.UInt {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoSpecialDomain: GXFoundation.GXSpecialDomainType {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoDateFormat: GXFoundation.GXDataDateFormat {
    @objc get
  }
  @objc dynamic public var __entityDataFieldInfoTimeFormat: GXFoundation.GXDataTimeFormat {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoIsPassword: Swift.Bool {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoInputPicture: Swift.String? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOnName: Swift.String? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOnType: GXFoundation.GXBasedOnType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoBasedOn: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoModelObject: GXObjectsModel.GXModelObject {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfoCollectionItem: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithDimensionsHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithDimensionsHelper {
  @objc(widthFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func width(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Foundation.NSNumber?
  @objc(heightFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func height(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Foundation.NSNumber?
  @objc(widthUIntFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func widthUInt(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.UInt
  @objc(heightUIntFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func heightUInt(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.UInt
  @objc(widthCGFloatFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func widthCGFloat(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(heightCGFloatFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func heightCGFloat(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(sizeFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func size(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGSize
}
extension GXObjectsModel.GXStyleClassWithDimensionsHelper {
  @objc final public class func styleClassWithDimensions(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithDimensions?
}
@objc(GXEntityDataSDTFieldInfo) public protocol GXEntityDataSDTFieldInfo : GXObjectsModel.GXEntityDataFieldInfo {
  @objc var entityDataSDTFieldInfoSDTTypeName: Swift.String { get }
  @objc var entityDataSDTFieldInfoSDTLevelInfo: GXObjectsModel.GXStructureDataTypeLevelInfo { get }
  @objc optional var entityDataFieldInfoCollectionItemSDTFieldInfo: GXObjectsModel.GXEntityDataSDTFieldInfo? { get }
}
@objc public protocol GXStyleClassPropertiesOverrides {
  @objc func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, overridePropertyValueForName propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClass : GXObjectsModel.GXStyleClassPropertyDefaultResolver {
  @objc dynamic open func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public var styleClassPropertyDefaultResolverModelObject: GXObjectsModel.GXModelObject? {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassListItem {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func themeSubClassClass(forFullName subClassFullName: Swift.String) -> Swift.AnyClass
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func newRequiredSubClassesClassesArray() -> [Swift.AnyClass]?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassListItem : GXObjectsModel.GXThemeClassWithDragAndDrop {
  @objc dynamic public var startDraggingThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var acceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var noAcceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var dragOverThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
@objc(GXMenuControlType) public enum GXMenuControlType : Darwin.uint_least8_t {
  @objc(GXMenuControlTypeDefault) case `default` = 0
  @objc(GXMenuControlTypeList) case list
  @objc(GXMenuControlTypeGrid) case grid
  @objc(GXMenuControlTypeTab) case tab
  public init?(rawValue: Darwin.uint_least8_t)
  public typealias RawValue = Darwin.uint_least8_t
  public var rawValue: Darwin.uint_least8_t {
    get
  }
}
@objc(GXMenu) public protocol GXMenu : GXObjectsModel.GXModelObject, ObjectiveC.NSObjectProtocol {
  @objc var menuName: Swift.String { get }
  @objc var menuTitle: Swift.String? { get }
  @objc var menuBackgroundImageName: Swift.String? { get }
  @objc var menuHeaderImageName: Swift.String? { get }
  @objc var menuSecurityLevel: Swift.String? { get }
  @objc var menuItems: [GXObjectsModel.GXMenuItem] { get }
  @objc var menuNotificationEvents: [GXObjectsModel.GXEventDescriptorProtocol] { get }
  @objc var menuEvents: [GXObjectsModel.GXEventDescriptorProtocol] { get }
  @objc var menuShowApplicationBars: Swift.Bool { get }
  @objc var menuApplicationBarsClassName: Swift.String? { get }
  @objc var menuShowLogoutButton: Swift.Bool { get }
  @objc var menuStyleClassName: Swift.String? { get }
  @objc var menuConnectivitySupport: GXFoundation.GXConnectivitySupportType { get }
  @objc var menuControlType: GXObjectsModel.GXMenuControlType { get }
}
@objc(GXMenuItem) public protocol GXMenuItem : GXObjectsModel.GXModelObject, ObjectiveC.NSObjectProtocol {
  @objc var menuItemName: Swift.String { get }
  @objc var menuItemTitle: Swift.String? { get }
  @objc var menuItemImageName: Swift.String? { get }
  @objc var menuItemUnselectedImageName: Swift.String? { get }
  @objc var menuItemActionDescriptor: GXObjectsModel.GXActionDescriptor? { get }
  @objc var menuItemStyleClassName: Swift.String? { get }
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithStateHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithStateHelper {
  @objc dynamic public class func stateStyleClassProperty(_ property: GXObjectsModel.GXStyleClass.PropertyName, from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(stateDesignSystemStyleClassWithProperties:pseudoSuffixes:fromStyleclass:resolvingToDefaultWithDefaultResolver:) dynamic public class func __stateDesignSystemStyleClass(properties: Foundation.NSArray?, pseudoSuffixes: Foundation.NSArray?, from styleClass: GXObjectsModel.GXDesignSystemStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXDesignSystemStyleClass?
  public class func stateDesignSystemStyleClass(_ states: [(property: GXObjectsModel.GXStyleClass.PropertyName?, pseudoSuffix: Swift.String?)], from styleClass: GXObjectsModel.GXDesignSystemStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXDesignSystemStyleClass?
}
extension GXObjectsModel.GXStyleClassWithStateHelper {
  @available(*, deprecated, message: "Use stateDesignSystemStyleClass(_:,from:resolvingToDefaultWith:) instead")
  @objc(readonlyStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func readonlyStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
}
@objc public protocol GXControllerPresentationHandlerProtocol : ObjectiveC.NSObjectProtocol {
  @objc @discardableResult
  func gxPresentViewController(_ viewController: UIKit.UIViewController, context: GXObjectsModel.GXPresentationContext?, completion: (() -> Swift.Void)?) -> Swift.Bool
  @objc @discardableResult
  func gxDismissUserInterfaceController(_ controller: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)?) -> Swift.Bool
}
extension GXObjectsModel.GXStyleClassHelper {
  @objc dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassTable {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc public static let defaultShowLineSeparator: Swift.Bool
  @objc(showLineSeparator) dynamic public var showLineSeparator: Swift.Bool {
    @objc get
  }
  @objc(horizontalSeparatorThemeClass) dynamic public var horizontalSeparatorThemeClass: GXObjectsModel.GXThemeClassHorizontalSeparator? {
    @objc get
  }
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassTable : GXObjectsModel.GXThemeClassWithDragAndDrop {
  @objc dynamic public var startDraggingThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var acceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var noAcceptDragThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
  @objc dynamic public var dragOverThemeClass: GXObjectsModel.GXStyleClass? {
    @objc get
  }
}
@_spi(GXSameModuleInternal) extension GXObjectsModel.GXApplicationModelLoadOperation {
  @_spi(GXSameModuleInternal) @objc override dynamic public func main()
}
extension Foundation.NumberFormatter {
  @objc(numberFormatterForGXEntityDataFieldInfo:) dynamic public class func numberFormatter(for fieldInfo: GXObjectsModel.GXEntityDataFieldInfo?) -> Foundation.NumberFormatter?
}
@objc public protocol GXDesignSystemStyleClassPropertyLoader {
  @objc func loadStyleClassProperties(fromMetadata metadata: [Swift.String : Any]) -> [GXObjectsModel.GXStyleClass.PropertyName : Any]?
  @objc func convertDesignSystemTokenValue(_ value: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? { get }
}
@objc public class GXDesignSystemStyleClass : GXObjectsModel.GXStyleClass {
  @objc public var hasTokenReference: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func replaceDefinition(withMetadata metadata: [Swift.String : Any]?)
  @objc(registerDesignSystemStyleClassPropertyLoader:) public class func register(_ loader: GXObjectsModel.GXDesignSystemStyleClassPropertyLoader)
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc override dynamic public func propertyValue(forName propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(name: Swift.String, propertiesValuesByName: [Swift.String : Any]?)
  @objc deinit
}
extension GXObjectsModel.GXExpressionType {
  public static func fromString(_ string: Swift.String) -> GXObjectsModel.GXExpressionType?
}
@_inheritsConvenienceInitializers @objc(GXWorkWithExpressionFactory) public class GXWorkWithExpressionFactory : ObjectiveC.NSObject {
  @available(*, deprecated, message: "Use workWithExpression(fromMetadata:dataElementsByName:for:) instead.")
  @objc(workWithExpressionFromMetadata:dataElementsByName:error:) public class func workWithExpression(fromMetadata metadata: [Swift.String : Any]?, dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?) throws -> GXObjectsModel.GXWorkWithExpression
  @objc(workWithExpressionFromMetadata:dataElementsByName:forModelObject:error:) public class func workWithExpression(fromMetadata metadata: [Swift.String : Any]?, dataElementsByName: [Swift.String : GXObjectsModel.GXEntityDataFieldDescriptor]?, for modelObject: GXObjectsModel.GXModelObject?) throws -> GXObjectsModel.GXWorkWithExpression
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GXAlertUIActionStyle : Swift.Int {
  case `default`
  case cancel
  case destructive
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class GXAlertUIAction : ObjectiveC.NSObject {
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc public init(title: Swift.String, style: GXObjectsModel.GXAlertUIActionStyle, handler: (() -> Swift.Void)?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithPaddingHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithPaddingHelper {
  @objc(paddingFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func padding(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXLayoutQuadDimension
}
extension GXObjectsModel.GXStyleClassWithPaddingHelper {
  @objc final public class func styleClassWithPadding(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithPadding?
}
public protocol GXDictionaryConvertible {
  associatedtype Keys : Swift.Hashable
  associatedtype Values
  init?(dictionary: [Self.Keys : Self.Values])
  func dictionaryRepresentation() -> [Self.Keys : Self.Values]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GXJSONObjectDictionaryContertible<T> : ObjectiveC.NSObject, YAJL.YAJLCoding where T : GXObjectsModel.GXDictionaryConvertible, T.Keys == Swift.String {
  final public let content: T
  required public init(content: T)
  @objc public var json: Any! {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GXJSONArrayDictionaryContertible<T> : ObjectiveC.NSObject, YAJL.YAJLCoding where T : Swift.Sequence, T.Element : GXObjectsModel.GXDictionaryConvertible, T.Element.Keys == Swift.String {
  final public let content: T
  required public init(content: T)
  @objc public var json: Any! {
    @objc get
  }
  @objc deinit
}
extension GXFoundation.GXObjectHelper {
  @discardableResult
  @objc(parseAttributeOrVariableName:type:from:) dynamic public class func __parseAttributeOrVariableName(_ name: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, type: Swift.UnsafeMutablePointer<GXObjectsModel.GXEntityDataFieldType>?, from data: Any?) -> Swift.Bool
  public class func parseAttributeOrVariableName(from data: Any?) -> (name: Swift.String, type: GXObjectsModel.GXEntityDataFieldType)?
}
extension GXObjectsModel.GXStyleClassWithBorder {
  public var borderStyle: GXFoundation.GXBorderStyleType? {
    get
  }
  public func borderStyleResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXBorderStyleType?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXImagesLocalization) public class GXImagesLocalization : GXObjectsModel.GXModelObjectChild {
  @objc final public let language: Swift.String?
  @objc final public let styleObjectName: Swift.String?
  @available(*, unavailable)
  @objc override dynamic public init(modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXImagesLocalization {
  public struct ImageOrURLLoadOptions : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let embeddedImage: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions
    public static let url: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions
    public static let gxImage: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions
    public static let all: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions
    public typealias ArrayLiteralElement = GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions
    public typealias Element = GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions
    public typealias RawValue = Swift.Int
  }
  @frozen public enum ImageOrURL {
    case embeddedImage(_: UIKit.UIImage)
    case url(_: Foundation.URL)
  }
  public func imageOrURL(forName name: Swift.String, image imgPtr: Swift.UnsafeMutablePointer<UIKit.UIImage?>?, url urlPtr: Swift.UnsafeMutablePointer<Foundation.URL?>?, gxImage gxImagePtr: Swift.UnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  @objc(imageOrURLForName:image:url:gxImage:) dynamic public func __imageOrURL(forName name: Swift.String, image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, nsURL nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?, gxImage gxImagePtr: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  @objc(gxImageForName:) dynamic public func gxImage(forName name: Swift.String) -> GXObjectsModel.GXLocalizedImageObject?
  @objc(gxImageForGuid:) dynamic public func gxImage(forGuid guid: Swift.String) -> GXObjectsModel.GXLocalizedImageObject?
  @objc(urlForImageName:) dynamic public func url(forImageName name: Swift.String) -> Foundation.URL?
  @objc(urlForImageGuid:) dynamic public func url(forImageGuid guid: Swift.String) -> Foundation.URL?
  @objc(imageForName:) dynamic public func image(forName name: Swift.String) -> UIKit.UIImage?
}
extension GXObjectsModel.GXImage {
  public var imageOrURL: GXObjectsModel.GXImagesLocalization.ImageOrURL? {
    get
  }
  public func imageOrURL(loadOptions: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions) -> GXObjectsModel.GXImagesLocalization.ImageOrURL?
  public var imageWithPropertiesAppliedOrURL: GXObjectsModel.GXImagesLocalization.ImageOrURL? {
    get
  }
  @objc(image:orURL:) dynamic public func __image(image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, nsURL nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?)
  @objc(imageWithPropertiesApplied:orURL:) dynamic public func __imageWithPropertiesApplied(image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, nsURL nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?)
}
extension GXObjectsModel.GXImagesLocalization {
  @available(*, deprecated, renamed: "styleObjectName")
  @objc(theme) dynamic public var theme: Swift.String? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithLabelHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithLabelHelper {
  @objc(labelStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func labelStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(labelWidthFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func labelWidth(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> CoreFoundation.CGFloat
  @objc(labelHorizontalAlignmentFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func labelHorizontalAlignment(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXHorizontalAlignType
  @objc(labelVerticalAlignmentFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func labelVerticalAlignment(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXFoundation.GXVerticalAlignType
}
extension GXObjectsModel.GXStyleClassWithLabelHelper {
  @objc final public class func styleClassWithLabel(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithLabel?
}
extension Foundation.Thread {
  @objc dynamic open var gxCurrentContextModel: GXObjectsModel.GXModel? {
    @objc get
  }
  public func executeWithGXModelContext<T>(_ gxModel: GXObjectsModel.GXModel, handler: () throws -> T) rethrows -> T
  @objc(executeWithGXModelContext:handler:) dynamic public func __executeWithGXModelContext(_ gxModel: GXObjectsModel.GXModel, handler: () -> Swift.Void)
}
extension GXObjectsModel.GXThemeClassContainerBase {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
}
extension GXObjectsModel.GXThemeClassContainerBase : GXObjectsModel.GXThemeClassWithMotionEffect {
  @objc dynamic public var motionEffectMaxVerticalOffset: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var motionEffectMaxHorizontalOffset: CoreFoundation.CGFloat {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassContainerBase : GXObjectsModel.GXThemeClassWithScroll {
  @objc dynamic public var scrollIndicatorsStyle: GXObjectsModel.GXScrollIndicatorsStyle {
    @objc get
  }
  @objc dynamic public var scrollIndicatorsVisibility: GXObjectsModel.GXScrollIndicatorsVisibility {
    @objc get
  }
  @objc dynamic public var scrollBouncingStyle: GXObjectsModel.GXScrollBouncingStyle {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassContainerBase : GXObjectsModel.GXThemeClassWithPadding {
  @objc dynamic public var padding: GXFoundation.GXLayoutQuadDimension {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassApplicationBars {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary, fromMetadata metadata: [Swift.String : Any]?) -> Foundation.NSMutableDictionary
  @objc(titleImage) dynamic public var titleImage: Swift.String? {
    @objc get
  }
  @objc(largeTitleMode) dynamic public var largeTitleMode: GXObjectsModel.GXApplicationBarsLargeTitleMode {
    @objc get
  }
  @objc(defaultButtonThemeClass) dynamic public var defaultButtonThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(backButtonThemeClass) dynamic public var backButtonThemeClass: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(backButtonImage) dynamic public var backButtonImage: Swift.String? {
    @objc get
  }
  @objc(backButtonText) dynamic public var backButtonText: Swift.String? {
    @objc get
  }
  @objc(titleImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func titleImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(largeTitleModeFromStyleClass:resolvingToDefaultWithPropertyResolver:unresolvedDefault:) dynamic public class func largeTitleMode(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, unresolvedDefault: GXObjectsModel.GXApplicationBarsLargeTitleMode) -> GXObjectsModel.GXApplicationBarsLargeTitleMode
  @objc(defaultButtonClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func defaultButtonClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(backButtonClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func backButtonClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(backButtonImageFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func backButtonImage(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc(backButtonTextFromStyleClass:resolvingToDefaultWithPropertyResolver:) dynamic public class func backButtonText(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> Swift.String?
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc(appBarDefaultForStyleClass:propertyName:) dynamic public class func appBarDefault(for styleClass: GXObjectsModel.GXStyleClass?, propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @available(*, deprecated, message: "Use appBarDefault(for:propertyName:) or appBarPropertyDefaultResolver(for:modelObject:) instead")
  @objc public static var appBarDefaultResolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver
  @objc(appBarPropertyDefaultResolverForStyleClass:modelObject:) final public class func __appBarPropertyDefaultResolver(for styleClass: GXObjectsModel.GXStyleClass?, modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXStyleClassPropertyDefaultResolver
  @objc(appBarPropertyDefaultResolverForStyleClass:modelObjectProvider:) final public class func appBarPropertyDefaultResolver(for styleClass: GXObjectsModel.GXStyleClass?, modelObject: @autoclosure () -> GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXStyleClassPropertyDefaultResolver
  @available(*, deprecated, message: "Use appBarDefault(for:propertyName:) or appBarPropertyDefaultResolver(for:modelObject:) instead")
  @objc final public class func appBarPropertyDefaultResolver(for styleClass: GXObjectsModel.GXStyleClass?) -> GXObjectsModel.GXStyleClassPropertyDefaultResolver
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXThemeClassApplicationBars : GXObjectsModel.GXThemeClassWithBackground {
  @objc dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var highlightedBackgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var backgroundImage: Swift.String? {
    @objc get
  }
  @objc dynamic public var highlightedBackgroundImage: Swift.String? {
    @objc get
  }
  @objc dynamic public var __backgroundImageMode: GXObjectsModel.GXBackgroundImageMode {
    @objc get
  }
  @objc dynamic public func backgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func highlightedBackgroundColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func backgroundImageResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func highlightedBackgroundImageResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func __backgroundImageModeResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXObjectsModel.GXBackgroundImageMode
}
extension GXObjectsModel.GXThemeClassApplicationBars : GXObjectsModel.GXStyleClassWithShadow {
  @objc dynamic public var shadowOffset: CoreFoundation.CGSize {
    @objc get
  }
  @objc dynamic public var shadowColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var shadowOpacity: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var shadowRadius: CoreFoundation.CGFloat {
    @objc get
  }
}
extension GXObjectsModel.GXThemeClassApplicationBars : GXObjectsModel.GXThemeClassWithFont {
  @objc dynamic public var font: UIKit.UIFont? {
    @objc get
  }
  @objc dynamic public var foreColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var highlightedForeColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var inviteMessageColor: UIKit.UIColor? {
    @objc get
  }
  @objc dynamic public var fontSize: CoreFoundation.CGFloat {
    @objc get
  }
  @objc dynamic public var __fontWeight: GXFoundation.GXFontWeightType {
    @objc get
  }
  @objc dynamic public var fontStrikeThrough: Swift.Bool {
    @objc get
  }
  @objc dynamic public var __fontStyle: GXFoundation.GXFontStyleType {
    @objc get
  }
  @objc dynamic public var __fontCategory: GXFoundation.GXFontCategoryType {
    @objc get
  }
  @objc dynamic public var fontFamily: Swift.String? {
    @objc get
  }
  @objc dynamic public var __textTransform: GXFoundation.GXTextTransformType {
    @objc get
  }
  @objc dynamic public func fontResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIFont?
  @objc dynamic public func foreColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func highlightedForeColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func inviteMessageColorResolving(toDefaultValue resolveToDefault: Swift.Bool) -> UIKit.UIColor?
  @objc dynamic public func fontSizeResolving(toDefaultValue resolveToDefault: Swift.Bool) -> CoreFoundation.CGFloat
  @objc dynamic public func __fontWeightResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontWeightType
  @objc dynamic public func __fontStyleResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontStyleType
  @objc dynamic public func __fontCategoryResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXFontCategoryType
  @objc dynamic public func fontFamilyResolving(toDefaultValue resolveToDefault: Swift.Bool) -> Swift.String?
  @objc dynamic public func __textTransformResolving(toDefaultValue resolveToDefault: Swift.Bool) -> GXFoundation.GXTextTransformType
}
extension GXObjectsModel.GXThemeClassProgress {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public class func loadSpecificPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc(animationClassReference) dynamic public var animationClassReference: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(titleClassReference) dynamic public var titleClassReference: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(descriptionClassReference) dynamic public var descriptionClassReference: GXObjectsModel.GXThemeClass? {
    @objc get
  }
  @objc(backgroundColor) dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
  }
  @objc(animationClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func animationClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(titleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func titleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc(descriptionClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func descriptionClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
  @objc dynamic public class var convertibleStyleClassSpecificPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc dynamic public class func convertDesignSystemTokenValue(_ token: GXObjectsModel.GXDesignSystemToken.Value, forClassSpecificProperty property: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
extension GXObjectsModel.GXApplicationHelper {
  @objc(setClientInfoHeaders:forModelObject:) dynamic public class func setClientInfoHeaders(_ urlRequest: Foundation.NSMutableURLRequest, for modelObject: GXObjectsModel.GXModelObject)
  @available(*, deprecated, message: "Use setClientInfoHeaders(_:,for:) instead")
  @objc(setClientInfoHeaders:) dynamic public class func setClientInfoHeaders(_ urlRequest: Foundation.NSMutableURLRequest)
}
extension Foundation.URLRequest {
  public static func gxClientInfoHTTPHeaderFields(for modelObject: GXObjectsModel.GXModelObject) -> [Swift.String : Swift.String?]
  public mutating func setGXClientInfoHTTPHeaderFields(for modelObject: GXObjectsModel.GXModelObject)
}
@objc public class GXStyleClassPropertyDefaultResolverWithBlock : ObjectiveC.NSObject {
  @objc(initWithResolverHanlder:modelObjectProvider:) public init(resolverHanlder: @escaping (_ styleClass: GXObjectsModel.GXStyleClass?, _ propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?, modelObjectProvider: @escaping () -> GXObjectsModel.GXModelObject?)
  @available(*, deprecated, message: "Use init(resolverHanlder:modelObjectProvider:) instead")
  @objc(initWithResolverHanlder:) convenience public init(resolverHanlder: @escaping (_ styleClass: GXObjectsModel.GXStyleClass?, _ propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?)
  @objc deinit
}
extension GXObjectsModel.GXStyleClassPropertyDefaultResolverWithBlock : GXObjectsModel.GXStyleClassPropertyDefaultResolver {
  @objc dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc dynamic public var styleClassPropertyDefaultResolverModelObject: GXObjectsModel.GXModelObject? {
    @objc get
  }
}
extension GXObjectsModel.GXStyleClassHelper {
  @objc final public class func loadDesignSystemToken(fromMetadata metadataValue: Any?) -> GXObjectsModel.GXDesignSystemToken.Reference?
  @objc final public class func loadDesignSystemToken(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType, notTokenLoader: ((_ metadataValue: Any?) -> Any?)?) -> Any?
  @objc final public class func loadObjectReferenceProperty(_ objectReferenceType: GXFoundation.GXObjectType, fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadColorProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadFilteredNoneReferenceProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func filterNoneReference(_ reference: Swift.String?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Swift.String?
  @inlinable @inline(__always) @objc final public class func loadBoolProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any? {
		return loadBoolProperty(fromMetadata:metadataValue, forStyleObjectType:styleObjectType, defaultValue: false)
	}
  @objc final public class func loadBoolProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType, defaultValue: Swift.Bool) -> Any?
  @objc final public class func loadUnsignedIntegerProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadFloatProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadFloatRoundedToScreenScaleProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadMeasureNumberProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadStringProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
  @objc final public class func loadNonEmptyStringProperty(fromMetadata metadataValue: Any?, forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Any?
}
extension Foundation.DateFormatter {
  @objc(dateFormatterWithTimeZone_UTC_ForGXEntityDataFieldInfo:useCurrentCalendar:) dynamic public class func withTimeZone_UTC(for fieldInfo: GXObjectsModel.GXEntityDataFieldInfo?, useCurrentCalendar: Swift.Bool = false) -> Foundation.DateFormatter?
}
@objc(GXImageUploadSizeType) public enum GXImageUploadSizeType : Darwin.uint_least8_t {
  @objc(GXImageUploadSizeInKBs) case inKBs
  @objc(GXImageUploadSizeInDimensions) case inDimensions
  public init?(rawValue: Darwin.uint_least8_t)
  public typealias RawValue = Darwin.uint_least8_t
  public var rawValue: Darwin.uint_least8_t {
    get
  }
}
extension GXObjectsModel.GXImageUploadResolutionType {
  public static let defaultValue: GXObjectsModel.GXImageUploadResolutionType
  public static func smallestResolution(_ first: GXObjectsModel.GXImageUploadResolutionType, _ second: GXObjectsModel.GXImageUploadResolutionType) -> GXObjectsModel.GXImageUploadResolutionType
}
@_inheritsConvenienceInitializers @objc(GXApplicationImageUploadSettings) public class GXApplicationImageUploadSettings : ObjectiveC.NSObject, Foundation.NSCoding {
  @objc public class func imageUploadSettings(fromMetadata metadata: [Swift.String : Any]) -> GXObjectsModel.GXApplicationImageUploadSettings
  @objc public class func imageUploadReslution(fromMetadataValue metadataValue: Swift.String?) -> GXObjectsModel.GXImageUploadResolutionType
  public class func imageUploadReslution(fromMetadataValue metadataValue: Swift.String?) -> GXObjectsModel.GXImageUploadResolutionType?
  @objc(initWithDefaultResolutionType:) required public init(defaultResolutionType: GXObjectsModel.GXImageUploadResolutionType)
  @objc convenience required override dynamic public init()
  @objc public var imageUploadSizeType: GXObjectsModel.GXImageUploadSizeType {
    @objc get
  }
  @objc final public let imageUploadDefaultResolution: GXObjectsModel.GXImageUploadResolutionType
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GXApplicationImageUploadInKBsSettings) public class GXApplicationImageUploadInKBsSettings : GXObjectsModel.GXApplicationImageUploadSettings {
  @objc(initWithDefaultResolutionType:largeImageSizeInKBs:mediumImageSizeInKBs:smallImageSizeInKBs:) required public init(defaultResolutionType: GXObjectsModel.GXImageUploadResolutionType, largeImageSizeInKBs: Swift.Float, mediumImageSizeInKBs: Swift.Float, smallImageSizeInKBs: Swift.Float)
  @objc(initWithDefaultResolutionType:) convenience required public init(defaultResolutionType: GXObjectsModel.GXImageUploadResolutionType)
  @objc final public let largeImageSizeInKBs: Swift.Float
  @objc final public let mediumImageSizeInKBs: Swift.Float
  @objc final public let smallImageSizeInKBs: Swift.Float
  @objc override public var imageUploadSizeType: GXObjectsModel.GXImageUploadSizeType {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GXApplicationImageUploadInDimensionsSettings) public class GXApplicationImageUploadInDimensionsSettings : GXObjectsModel.GXApplicationImageUploadSettings {
  @objc(initWithDefaultResolutionType:largeImageSizeInDimensions:mediumImageSizeInDimensions:smallImageSizeInDimensions:) required public init(defaultResolutionType: GXObjectsModel.GXImageUploadResolutionType, largeImageSizeInDimensions: CoreFoundation.CGSize, mediumImageSizeInDimensions: CoreFoundation.CGSize, smallImageSizeInDimensions: CoreFoundation.CGSize)
  @objc(initWithDefaultResolutionType:) convenience required public init(defaultResolutionType: GXObjectsModel.GXImageUploadResolutionType)
  @objc final public let largeImageSizeInDimensions: CoreFoundation.CGSize
  @objc final public let mediumImageSizeInDimensions: CoreFoundation.CGSize
  @objc final public let smallImageSizeInDimensions: CoreFoundation.CGSize
  @objc override public var imageUploadSizeType: GXObjectsModel.GXImageUploadSizeType {
    @objc get
  }
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc override public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
@objc(GXDashboardModelItem) public class GXDashboardModelItem : GXObjectsModel.GXNamedModelObjectChild, GXObjectsModel.GXMenuItem {
  @objc(eventDescriptor) final public let eventDescriptor: GXObjectsModel.GXEventDescriptor
  @available(*, deprecated, message: "Use init(eventDescriptor:title:imageName:unselectedImageName:styleClassName:forModelObject:) instead.")
  @objc(initWithEventDescriptor:title:imageName:styleClassName:forModelObject:) convenience public init(eventDescriptor: GXObjectsModel.GXEventDescriptor, title: Swift.String?, imageName: Swift.String?, styleClassName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc(initWithEventDescriptor:title:imageName:unselectedImageName:styleClassName:forModelObject:) required public init(eventDescriptor: GXObjectsModel.GXEventDescriptor, title: Swift.String?, imageName: Swift.String?, unselectedImageName: Swift.String?, styleClassName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public var menuItemName: Swift.String {
    @objc get
  }
  @objc public var menuItemTitle: Swift.String? {
    @objc get
  }
  @objc final public let menuItemImageName: Swift.String?
  @objc final public let menuItemUnselectedImageName: Swift.String?
  @objc public var menuItemActionDescriptor: GXObjectsModel.GXActionDescriptor? {
    @objc get
  }
  @objc final public let menuItemStyleClassName: Swift.String?
  public var menuItemThemeClassFullName: Swift.String? {
    get
  }
  @objc deinit
}
@objc(GXSDTData) public protocol GXSDTDataProtocol : YAJL.YAJLCoding {
  @objc var sdtLastModifiedDate: Foundation.Date? { get }
  @objc var sdtDataIsCollection: Swift.Bool { get }
  @objc func valueForFieldSpecifier(_ fieldSpecifier: Swift.String) -> Swift.AnyObject?
  @objc func setValue(_ value: Swift.AnyObject?, forFieldSpecifier fieldSpecifier: Swift.String)
  @objc func serialize(_ useNameConversion: Swift.Bool) -> Swift.AnyObject
  @objc func deserialize(_ data: Swift.AnyObject, useNameConversion: GXObjectsModel.GXSDTDataUseNameConversionType)
  @objc func sdtDataClone() -> GXObjectsModel.GXSDTDataProtocol
  @objc func sdtDataToJson() -> Swift.String
  @objc(sdtDataToJsonIncludingState:) func sdtDataToJson(includeState: Swift.Bool) -> Swift.String
  @discardableResult
  @objc(sdtDataFromJson:) func sdtDataFromJson(_ source: Swift.String) -> Swift.Bool
  @objc @discardableResult
  func sdtDataFromJson(_ source: Swift.String, outMessages: GXObjectsModel.GXSDTDataCollectionProtocol?) -> Swift.Bool
}
@objc(GXSDTDataCollection) public protocol GXSDTDataCollectionProtocol : GXObjectsModel.GXEnumerable, GXObjectsModel.GXSDTDataProtocol {
  @objc var sdtDataCollectionItemsCount: Swift.UInt { get }
  @objc var sdtDataCollectionItems: [Swift.AnyObject] { get }
  @objc func valueForItemAtIndex(_ index: Swift.UInt) -> Swift.AnyObject?
  @objc func valueForItemAtIndex(_ index: Swift.UInt, fieldSpecifier: Swift.String) -> Swift.AnyObject?
  @objc(addItem) optional func add() -> Swift.UInt
  @objc(addItem:) func add(_ item: Swift.AnyObject)
  @objc(addItem:atIndex:) func add(_ item: Swift.AnyObject, index: Swift.UInt)
  @objc func clear()
  @objc(removeItemAtIndex:) func remove(_ index: Swift.UInt)
  @objc func setValue(_ value: Swift.AnyObject?, forItemAtIndex index: Swift.UInt, fieldSpecifier: Swift.String)
  @objc func sdtDataCollectionSort(membersListString: Swift.String)
}
public struct GXMiniAppInformation {
  public var id: Swift.String
  public var name: Swift.String
  public var desc: Swift.String
  public var iconImageURL: Foundation.URL? {
    get
    set
  }
  public var metadataURL: Foundation.URL {
    get
    set
  }
  public var entryPoint: Swift.String
  public var servicesURL: Foundation.URL {
    get
    set
  }
  public var signature: Swift.String
  public var version: Swift.Int
  public var bannerImageURL: Foundation.URL? {
    get
    set
  }
  public var cardImageURL: Foundation.URL? {
    get
    set
  }
  public init(id: Swift.String, name: Swift.String, description: Swift.String, iconImageURL: Foundation.URL?, metadataURL: Foundation.URL, entryPoint: Swift.String, servicesURL: Foundation.URL, signature: Swift.String, version: Swift.Int, bannerImageURL: Foundation.URL?, cardImageURL: Foundation.URL?)
  public init?(id: Swift.String, name: Swift.String, description: Swift.String, iconImageURLString: Swift.String, metadataURLString: Swift.String, entryPoint: Swift.String, servicesURLString: Swift.String, signature: Swift.String, version: Swift.Int, bannerImageURLString: Swift.String, cardImageURLString: Swift.String)
}
extension GXObjectsModel.GXMiniAppInformation : Swift.Codable {
  @_spi(GXInternal) public enum CodingKeys : Swift.String, Swift.CodingKey {
    @_spi(GXInternal) case id
    @_spi(GXInternal) case name
    @_spi(GXInternal) case desc
    @_spi(GXInternal) case maybeRelativeIconImageURL
    @_spi(GXInternal) case maybeRelativeMetadataURL
    @_spi(GXInternal) case entryPoint
    @_spi(GXInternal) case maybeRelativeServicesURL
    @_spi(GXInternal) case signature
    @_spi(GXInternal) case version
    @_spi(GXInternal) case maybeRelativeBannerImageURL
    @_spi(GXInternal) case maybeRelativeCardImageURL
    @_spi(GXInternal) public init?(rawValue: Swift.String)
    @_spi(GXInternal) public init?(stringValue: Swift.String)
    @_spi(GXInternal) public init?(intValue: Swift.Int)
    @_spi(GXInternal) public typealias RawValue = Swift.String
    @_spi(GXInternal) public var intValue: Swift.Int? {
      @_spi(GXInternal) get
    }
    @_spi(GXInternal) public var rawValue: Swift.String {
      @_spi(GXInternal) get
    }
    @_spi(GXInternal) public var stringValue: Swift.String {
      @_spi(GXInternal) get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_spi(GXInternal) extension GXObjectsModel.GXMiniAppInformation {
  @_spi(GXInternal) public init?(keyValueProvider: (_ key: GXObjectsModel.GXMiniAppInformation.CodingKeys) -> Any?)
}
extension GXObjectsModel.GXMiniAppInformation : GXObjectsModel.GXDictionaryConvertible {
  public init?(dictionary: [Swift.String : Any])
  public func dictionaryRepresentation() -> [Swift.String : Any]
  public typealias Keys = Swift.String
  public typealias Values = Any
}
extension GXObjectsModel.GXStyleHelper {
  @objc(totalExtraSizeFromStyleClass:resolvingToDefaultWithPropertyResolver:consideringMargins:) final public class func totalExtraSize(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?, consideringMargins considerMargins: Swift.Bool = true) -> CoreFoundation.CGSize
}
extension GXObjectsModel.GXThemeClassListListWorkWith {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
}
@objc public protocol GXStyleClassPropertyDefaultResolver {
  @objc(styleClass:defaultPropertyValueForName:) func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
  @objc(styleClassPropertyDefaultResolverModelObject) var styleClassPropertyDefaultResolverModelObject: GXObjectsModel.GXModelObject? { get }
}
extension GXObjectsModel.GXTheme {
  @available(*, deprecated, message: "Use defaultTheme(for:) instead")
  @objc public static var defaultTheme: GXObjectsModel.GXTheme {
    @objc get
  }
  @objc(defaultThemeForModelObject:) dynamic public class func defaultTheme(for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXTheme
  @objc dynamic public func defaultThemeClass(forFullName fullName: Swift.String) -> GXObjectsModel.GXThemeClass?
  @objc dynamic public var defaultThemeClassForm: GXObjectsModel.GXThemeClassForm {
    @objc get
  }
  @objc dynamic public var defaultThemeClassApplication: GXObjectsModel.GXThemeClassApplication {
    @objc get
  }
  @objc dynamic public var defaultThemeClassApplicationBars: GXObjectsModel.GXThemeClassApplicationBars {
    @objc get
  }
  @objc dynamic public var defaultThemeClassAttribute: GXObjectsModel.GXThemeClassAttribute {
    @objc get
  }
  @objc dynamic public var defaultThemeClassAttributeTitle: GXObjectsModel.GXThemeClassAttributeTitle {
    @objc get
  }
  @objc dynamic public var defaultThemeClassAttributeSubtitle: GXObjectsModel.GXThemeClassAttributeSubtitle {
    @objc get
  }
  @objc dynamic public var defaultThemeClassAttributeReadOnly: GXObjectsModel.GXThemeClassAttributeReadOnly {
    @objc get
  }
  @objc dynamic public var defaultThemeClassLabel: GXObjectsModel.GXThemeClassLabel {
    @objc get
  }
  @objc dynamic public var defaultThemeClassLabelTitle: GXObjectsModel.GXThemeClassLabelTitle {
    @objc get
  }
  @objc dynamic public var defaultThemeClassLabelSubTitle: GXObjectsModel.GXThemeClassLabelSubtitle {
    @objc get
  }
  @objc dynamic public var defaultThemeClassList: GXObjectsModel.GXThemeClassList {
    @objc get
  }
  @objc dynamic public var defaultThemeClassListListWorkWith: GXObjectsModel.GXThemeClassListListWorkWith {
    @objc get
  }
  @objc dynamic public var defaultThemeClassListListLevel: GXObjectsModel.GXThemeClassListListLevel {
    @objc get
  }
  @objc dynamic public var defaultThemeClassListItemOddItem: GXObjectsModel.GXThemeClassListItemOddItem {
    @objc get
  }
  @objc dynamic public var defaultThemeClassListItemEvenItem: GXObjectsModel.GXThemeClassListItemEvenItem {
    @objc get
  }
  @objc dynamic public var defaultThemeClassImage: GXObjectsModel.GXThemeClassImage {
    @objc get
  }
  @objc dynamic public var defaultThemeClassTab: GXObjectsModel.GXThemeClassTab {
    @objc get
  }
  @objc dynamic public var defaultThemeClassTabPage: GXObjectsModel.GXThemeClassTabPage {
    @objc get
  }
  @objc dynamic public var defaultThemeClassTabPageSelected: GXObjectsModel.GXThemeClassTabPageSelected {
    @objc get
  }
  @objc dynamic public var defaultThemeClassTabPageUnselected: GXObjectsModel.GXThemeClassTabPageUnselected {
    @objc get
  }
  @objc dynamic public var defaultThemeClassGroup: GXObjectsModel.GXThemeClassGroup {
    @objc get
  }
  @objc dynamic public var defaultThemeClassGroupSeparator: GXObjectsModel.GXThemeClassGroupSeparator {
    @objc get
  }
  @objc dynamic public var defaultThemeClassHorizontalSeparator: GXObjectsModel.GXThemeClassHorizontalSeparator {
    @objc get
  }
  @objc dynamic public var defaultThemeClassDashboard: GXObjectsModel.GXThemeClassDashboard {
    @objc get
  }
  @objc dynamic public var defaultThemeClassDashboardOption: GXObjectsModel.GXThemeClassDashboardOption {
    @objc get
  }
  @objc dynamic public var defaultThemeClassAnimation: GXObjectsModel.GXThemeClassAnimation {
    @objc get
  }
  @objc dynamic public var defaultThemeClassProgress: GXObjectsModel.GXThemeClassAnimation {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(GXDomainInfo) public class GXDomainInfo : GXObjectsModel.GXTypedObjectInfo {
  @objc override dynamic public class func loadProperties(fromMetadata metadata: [Swift.String : Any], name: Swift.String, gxDataType gxdataType: GXFoundation.GXDataType, intoProperties properties: Foundation.NSMutableDictionary)
  override public var specialDomain: GXFoundation.GXSpecialDomainType? {
    get
  }
  @objc public var enumValues: GXObjectsModel.GXDomainEnumValues? {
    @objc get
  }
  @objc required public init?(metadata: [Swift.String : Any], for modelObject: GXObjectsModel.GXModelObject?)
  @objc required public init(name: Swift.String, dataType: GXFoundation.GXDataType, description: Swift.String?, properties: [Swift.String : Any]?, for modelObject: GXObjectsModel.GXModelObject?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @available(*, deprecated, message: "Use GXKBObjectsModel's domainInfo(forName:) instead")
  @objc(domainInfoForName:) public class func domainInfo(forName name: Swift.String) -> GXObjectsModel.GXDomainInfo?
  @objc deinit
}
extension GXObjectsModel.GXModel {
  @objc dynamic public func prefixedKeyChainStoreService(for service: Swift.String?) -> Swift.String?
}
@_spi(GXInternal) @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GXDesignSystemComposedStyleClass : GXObjectsModel.GXDesignSystemStyleClassWithStyleClassesBase {
  @_spi(GXInternal) @available(*, unavailable)
  required public init(name: Swift.String, propertiesValuesByName: [Swift.String : Any]?, innerStyleClasses: [GXObjectsModel.GXDesignSystemStyleClass])
  @_spi(GXInternal) @available(*, unavailable)
  @objc override dynamic public func replaceDefinition(withMetadata metadata: [Swift.String : Any]?)
  @_spi(GXInternal) @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @_spi(GXInternal) @objc deinit
}
extension GXObjectsModel.GXThemeClassLabelSubtitle {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
  @objc override dynamic public func styleClass(_ styleClass: GXObjectsModel.GXStyleClass?, defaultPropertyValue propertyName: GXObjectsModel.GXStyleClass.PropertyName) -> Any?
}
@objc public protocol GXEnumerable {
  @objc func objectEnumerator() -> Foundation.NSEnumerator
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXActionParameter) public class GXActionParameter : GXObjectsModel.GXModelObjectChild, GXObjectsModel.GXActionParameterDescriptor {
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc public var actionParameterType: GXObjectsModel.GXActionParameterType {
    @objc get
  }
  @objc public var actionParameterFieldInfo: GXObjectsModel.GXEntityDataFieldInfo? {
    @objc get
  }
  @objc final public let actionParameterCalledTargetParameterName: Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXStructureDataTypeItemInfo) public class GXStructureDataTypeItemInfo : GXObjectsModel.GXTypedObjectInfo {
  @objc final public let jsonName: Swift.String?
  @objc final public let jsonSerializeWhenEmpty: Swift.Bool
  @objc final public let jsonCollectionSerializeAsSequence: Swift.Bool
  @objc required public init?(metadata: [Swift.String : Any], for modelObject: GXObjectsModel.GXModelObject?)
  @objc override dynamic public func encode(with aCoder: Foundation.NSCoder)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXStructureDataTypeItemInfo : GXObjectsModel.GXEntityDataFieldVariableDescriptor {
  @objc dynamic public var entityDataFieldName: Swift.String {
    @objc get
  }
  @objc dynamic public var entityDataFieldType: GXObjectsModel.GXEntityDataFieldType {
    @objc get
  }
  @objc dynamic public var entityDataFieldInfo: GXObjectsModel.GXEntityDataFieldInfo {
    @objc get
  }
  @objc dynamic public var entityDataFieldDomainInfo: GXObjectsModel.GXDomainInfo? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class GXStyleClassWithLoadingAnimationHelper : GXObjectsModel.GXStyleClassHelper {
  @objc override dynamic public class func loadPropertiesValues(byName propertyValuesByName: Foundation.NSMutableDictionary?, fromMetadata metadata: [Swift.String : Any], forStyleObjectType styleObjectType: GXFoundation.GXObjectType) -> Foundation.NSMutableDictionary?
  @objc override dynamic public class var convertibleStyleClassPropertyNames: Swift.Set<GXObjectsModel.GXStyleClass.PropertyName>? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension GXObjectsModel.GXStyleClassWithLoadingAnimationHelper {
  @objc(loadingAnimationStyleClassFromStyleClass:resolvingToDefaultWithPropertyResolver:) final public class func loadingAnimationStyleClass(from styleClass: GXObjectsModel.GXStyleClass?, resolvingToDefaultWith resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClass?
}
extension GXObjectsModel.GXStyleClassWithLoadingAnimationHelper {
  @objc final public class func styleClassWithLoadingAnimation(from styleClass: GXObjectsModel.GXStyleClass?, propertyDefaultResolver resolver: GXObjectsModel.GXStyleClassPropertyDefaultResolver?) -> GXObjectsModel.GXStyleClassWithLoadingAnimation?
}
public protocol GXSDTDataConvertible {
  init?(sdtData: GXObjectsModel.GXSDTDataProtocol)
  func sdtRepresentation(modelObject: GXObjectsModel.GXModelObject) -> GXObjectsModel.GXSDTDataProtocol
}
extension GXObjectsModel.GXActionParameter {
  @objc(actionParameterTypeFromValueExpression:) dynamic public class func __actionParameterType(fromValueExpression valueExpression: Swift.String?) -> GXObjectsModel.GXActionParameterType
  public class func actionParameterType(fromValueExpression valueExpression: Swift.String?) -> GXObjectsModel.GXActionParameterType?
}
extension GXObjectsModel.GXActionParameter {
  @available(*, deprecated, message: "Use actionParameterValueExpression(_:fieldDescriptor:for:) instead.")
  @objc dynamic public class func actionParameterValueExpression(_ valueExpression: Swift.String, fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor?) -> GXObjectsModel.GXActionParameter?
  @objc(actionParameterValueExpression:fieldDescriptor:forModelObject:) dynamic public class func actionParameterValueExpression(_ valueExpression: Swift.String, fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor?, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter?
  @available(*, deprecated, message: "Use actionParameterValueExpression(_:fieldDescriptor:calledTargetParameterName:for:) instead.")
  @objc dynamic public class func actionParameterValueExpression(_ valueExpression: Swift.String, fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor?, calledTargetParameterName: Swift.String?) -> GXObjectsModel.GXActionParameter?
  @objc(actionParameterValueExpression:fieldDescriptor:calledTargetParameterName:forModelObject:) dynamic public class func actionParameterValueExpression(_ valueExpression: Swift.String, fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor?, calledTargetParameterName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter?
  @available(*, deprecated, message: "Use actionParameter(fieldDescriptor:for:) instead.")
  @objc dynamic public class func actionParameter(fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorField
  @objc(actionParameterWithFieldDescriptor:forModelObject:) dynamic public class func actionParameter(fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorField
  @available(*, deprecated, message: "Use actionParameter(fieldDescriptor:fieldSpecifier:for:) instead.")
  @objc dynamic public class func actionParameter(fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor, fieldSpecifier: Swift.String?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorField
  @objc(actionParameterWithFieldDescriptor:fieldSpecifier:forModelObject:) dynamic public class func actionParameter(fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor, fieldSpecifier: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorField
  @available(*, deprecated, message: "Use actionParameter(fieldDescriptor:fieldSpecifier:calledTargetParameterName:for:) instead.")
  @objc dynamic public class func actionParameter(fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor, fieldSpecifier: Swift.String?, calledTargetParameterName: Swift.String?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorField
  @objc(actionParameterWithFieldDescriptor:fieldSpecifier:calledTargetParameterName:forModelObject:) dynamic public class func actionParameter(fieldDescriptor descriptor: GXObjectsModel.GXEntityDataFieldDescriptor, fieldSpecifier: Swift.String?, calledTargetParameterName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorField
  @available(*, deprecated, message: "Use actionParameter(expression:for:) instead.")
  @objc dynamic public class func actionParameter(expression: GXObjectsModel.GXExpression) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorExpression
  @objc(actionParameterWithExpression:forModelObject:) dynamic public class func actionParameter(expression: GXObjectsModel.GXExpression, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorExpression
  @available(*, deprecated, message: "Use actionParameter(expression:calledTargetParameterName:for:) instead.")
  @objc dynamic public class func actionParameter(expression: GXObjectsModel.GXExpression, calledTargetParameterName: Swift.String?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorExpression
  @objc(actionParameterWithExpression:calledTargetParameterName:forModelObject:) dynamic public class func actionParameter(expression: GXObjectsModel.GXExpression, calledTargetParameterName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorExpression
  @available(*, deprecated, message: "Use actionParameterVarchar(constantValue:translatable:for:) instead.")
  @objc dynamic public class func actionParameterVarchar(constantValue: Swift.String, translatable: Swift.Bool) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorConstant
  @objc(actionParameterVarcharWithConstantValue:translatable:forModelObject:) dynamic public class func actionParameterVarchar(constantValue: Swift.String, translatable: Swift.Bool, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorConstant
  @available(*, deprecated, message: "Use actionParameterVarchar(constantValue:translatable:calledTargetParameterName:for:) instead.")
  @objc dynamic public class func actionParameterVarchar(constantValue: Swift.String, translatable: Swift.Bool, calledTargetParameterName: Swift.String?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorConstant
  @objc(actionParameterVarcharWithConstantValue:translatable:calledTargetParameterName:forModelObject:) dynamic public class func actionParameterVarchar(constantValue: Swift.String, translatable: Swift.Bool, calledTargetParameterName: Swift.String?, for modelObject: GXObjectsModel.GXModelObject?) -> GXObjectsModel.GXActionParameter & GXObjectsModel.GXActionParameterDescriptorConstant
}
@objc(GXEntityRulePrompt) public protocol GXEntityRulePrompt : GXObjectsModel.GXModelObject, ObjectiveC.NSObjectProtocol {
  @objc var entityRulePromptCallObjectName: Swift.String { get }
  @objc var entityRulePromptCallObjectType: GXFoundation.GXObjectType { get }
  @objc var entityRulePromptParameters: GXObjectsModel.GXActionParametersDescriptor? { get }
  @objc var entityRulePromptControlName: Swift.String? { get }
  @objc var entityRulePromptAfterServiceURI: Swift.String? { get }
  @objc var entityRulePromptAfterServiceInputParameters: GXObjectsModel.GXActionParametersDescriptor? { get }
  @objc var entityRulePromptAfterServiceOutputParameters: GXObjectsModel.GXActionParametersDescriptor? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GXTheme) public class GXTheme : GXObjectsModel.GXStyleKBObject {
  @objc final public let darkThemeName: Swift.String?
  @objc public var themeClassesByFullName: [Swift.String : GXObjectsModel.GXThemeClass] {
    @objc get
  }
  @objc final public let defaultThemeClassesByFullName: [Swift.String : GXObjectsModel.GXThemeClass]
  @objc public func themeClass(forFullName fullName: Swift.String) -> GXObjectsModel.GXThemeClass?
  @objc override public var keyColor: UIKit.UIColor? {
    @objc get
  }
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXEntityHelper {
  @available(*, deprecated, message: "Use imageOrURLFromFieldValue:modelObject:image:url:gxImage: instead.")
  @objc(imageAndURLFromFieldValue:image:url:gxImage:) dynamic public class func imageAndURL(fromFieldValue fieldValue: Any?, image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, url nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?, gxImage gxImagePtr: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  @objc(imageOrURLFromFieldValue:modelObject:image:url:gxImage:) dynamic public class func __imageOrURL(fromFieldValue fieldValue: Any?, modelObject: GXObjectsModel.GXModelObject?, image imgPtr: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIImage?>?, url nsURLPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSURL?>?, gxImage gxImagePtr: Swift.AutoreleasingUnsafeMutablePointer<GXObjectsModel.GXImage?>?)
  public class func imageOrURL(fromFieldValue fieldValue: Any?, modelObject: GXObjectsModel.GXModelObject?, loadOptions: GXObjectsModel.GXImagesLocalization.ImageOrURLLoadOptions = .all) -> (value: GXObjectsModel.GXImagesLocalization.ImageOrURL?, gxImage: GXObjectsModel.GXImage?)
}
@objc(GXDebuggerModelService) public protocol GXDebuggerModelService : ObjectiveC.NSObjectProtocol {
  @objc(active) var isActive: Swift.Bool { get }
  @objc func url(forImageName imageName: Swift.String) -> Foundation.URL?
  @objc func hasOverride(forImageName imageName: Swift.String) -> Swift.Bool
  @objc func notifyLayoutChanges()
  @objc func themeClass(forName name: Swift.String, parentClass: GXObjectsModel.GXThemeClass) -> GXObjectsModel.GXThemeClass
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class GXDesignSystemObject : GXObjectsModel.GXStyleKBObject {
  @objc deinit
  @objc public var desingSystemClassesByName: [Swift.String : GXObjectsModel.GXDesignSystemStyleClass] {
    @objc get
  }
  @objc public func desingSystemClass(forName name: Swift.String) -> GXObjectsModel.GXDesignSystemStyleClass?
  @objc public var imports: [GXObjectsModel.GXDesignSystemObject.Import] {
    get
  }
  @objc public var tokens: [GXObjectsModel.GXDesignSystemToken] {
    get
  }
  @objc public var tokensDefaultOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]? {
    get
  }
  public var allTokens: Swift.AnySequence<GXObjectsModel.GXDesignSystemToken> {
    get
  }
  public var allTokensDefaultOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]? {
    get
  }
  @objc override public func styleClass(forName name: Swift.String) -> GXObjectsModel.GXStyleClass?
  @objc override dynamic public func encode(with coder: Foundation.NSCoder)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension Foundation.NSError {
  @objc dynamic public class var gxModelNotAvailableDeveloperErrorDescription: Swift.String {
    @objc get
  }
  @objc dynamic public class func gxModelNotAvailableDeveloperError() -> Foundation.NSError
}
extension GXObjectsModel.GXDesignSystemObject {
  @objc dynamic public func resolveTokenReferenceValue(_ tokenRef: GXObjectsModel.GXDesignSystemToken.Reference) -> GXObjectsModel.GXDesignSystemToken.Value?
  public class func resolveBestMatching<ItemT, SequenceT, ValueT>(designSystemTokenOptions currentTokenOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String], in sequence: SequenceT, optionsResolver: (ItemT) -> [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]?, valueResolver: (ItemT) -> ValueT?) -> (item: ItemT, value: ValueT)? where ItemT == SequenceT.Element, SequenceT : Swift.Sequence
  public class func resolveBestMatching<ItemT, SequenceT>(designSystemTokenOptions currentTokenOptions: [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String], in sequence: SequenceT, optionsResolver: (ItemT) -> [GXObjectsModel.GXDesignSystemToken.OptionName : Swift.String]?) -> ItemT? where ItemT == SequenceT.Element, SequenceT : Swift.Sequence
}
extension GXObjectsModel.GXThemeClassListListLevel {
  @objc override dynamic public var type: GXObjectsModel.GXThemeClassType {
    @objc get
  }
  @objc override dynamic public class func defautlThemeClassName() -> Swift.String
}
extension GXObjectsModel.GXEntityHelper {
  @objc dynamic public class func procedureURL(fromName procName: Swift.String, modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL?
  @available(*, deprecated, message: "Use procedureURL(fromName:modelObject:) instead")
  @objc dynamic public class func procedureURL(fromName procName: Swift.String?) -> Foundation.URL?
  @objc(urlRelative:toServerBaseURLFromModelObject:) dynamic public class func urlRelative(_ relativeURL: Swift.String, toServerBaseURLFrom modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL?
  @available(*, deprecated, message: "Use urlRelative(toServerBaseURLFrom:) instead")
  @objc(urlRelativeToServerBaseURL:) dynamic public class func urlRelative(toServerBaseURL relativeURL: Swift.String?) -> Foundation.URL?
  @objc(webPanelURLFromName:parameters:modelObject:) dynamic public class func webPanelURL(fromName webPanelName: Swift.String, parameters: [Any]?, modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL?
  @available(*, deprecated, message: "Use webPanelURL(fromName:parameters:modelObject:) instead")
  @objc(webPanelURLFromName:parameters:) dynamic public class func webPanelURL(fromName webPanelName: Swift.String?, parameters: [Any]?) -> Foundation.URL?
  @objc(multicallProcedureURLFromName:modelObject:) dynamic public class func multicallProcedureURL(fromName procName: Swift.String, modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL?
  @available(*, deprecated, message: "Use multicallProcedureURL(fromName:modelObject:) instead")
  @objc(multicallProcedureURLFromName:) dynamic public class func multicallProcedureURL(fromName procName: Swift.String?) -> Foundation.URL?
  @objc(staticResourceURLWithRelativePath:modelObject:) dynamic public class func staticResourceURL(withRelativePath path: Swift.String, modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL?
  @available(*, deprecated, message: "Use staticResourceURL(withRelativePath:modelObject:) instead")
  @objc(staticResourceURLWithRelativePath:) dynamic public class func staticResourceURL(withRelativePath path: Swift.String?) -> Foundation.URL?
  @objc(urlFromGXSchemeURL:modelObject:) dynamic public class func url(fromGXSchemeURL url: Foundation.URL, modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL
  @available(*, deprecated, message: "Use url(fromGXSchemeURL:modelObject:) instead")
  @objc(urlFromGXSchemeURL:) dynamic public class func url(fromGXSchemeURL url: Foundation.URL?) -> Foundation.URL?
  @objc(absoluteURLFromFieldValue:modelObject:) dynamic public class func absoluteURL(fromFieldValue fieldValue: Any?, modelObject: GXObjectsModel.GXModelObject) -> Foundation.URL?
  @available(*, deprecated, message: "Use absoluteURL(fromFieldValue:modelObject:) instead")
  @objc(absoluteURLFromFieldValue:) dynamic public class func absoluteURL(fromFieldValue fieldValue: Any?) -> Foundation.URL?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class GXStyleCustomFont : GXObjectsModel.GXNamedElement {
  @objc override dynamic public var name: Swift.String {
    @objc get
  }
  @objc final public let fileName: Swift.String
  @objc final public let internalName: Swift.String
  @objc override dynamic open func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension GXObjectsModel.GXImageRenderingMode : Swift.Equatable {}
extension GXObjectsModel.GXImageRenderingMode : Swift.Hashable {}
extension GXObjectsModel.GXImageRenderingMode : Swift.RawRepresentable {}
extension GXObjectsModel.GXApplicationModel.BaseColorScheme : Swift.Equatable {}
extension GXObjectsModel.GXApplicationModel.BaseColorScheme : Swift.Hashable {}
extension GXObjectsModel.GXApplicationModel.BaseColorScheme : Swift.RawRepresentable {}
extension GXObjectsModel.GXMutableDomainEnumValues.ModificationType : Swift.Equatable {}
extension GXObjectsModel.GXMutableDomainEnumValues.ModificationType : Swift.Hashable {}
extension GXObjectsModel.GXMutableDomainEnumValues.ModificationType : Swift.RawRepresentable {}
extension GXObjectsModel.GXMutableDomainEnumValues.ModificationType : Swift.Sendable {}
extension GXObjectsModel.GXTranslationType : Swift.Equatable {}
extension GXObjectsModel.GXTranslationType : Swift.Hashable {}
extension GXObjectsModel.GXTranslationType : Swift.RawRepresentable {}
extension GXObjectsModel.GXDesignSystemObject.Import.ImportType : Swift.Equatable {}
extension GXObjectsModel.GXDesignSystemObject.Import.ImportType : Swift.Hashable {}
extension GXObjectsModel.GXDesignSystemObject.Import.ImportType : Swift.RawRepresentable {}
extension GXObjectsModel.GXMenuControlType : Swift.Equatable {}
extension GXObjectsModel.GXMenuControlType : Swift.Hashable {}
extension GXObjectsModel.GXMenuControlType : Swift.RawRepresentable {}
extension GXObjectsModel.GXDesignSystemToken.GXOptionNames.ColorSchemeValue : Swift.Equatable {}
extension GXObjectsModel.GXDesignSystemToken.GXOptionNames.ColorSchemeValue : Swift.Hashable {}
extension GXObjectsModel.GXDesignSystemToken.GXOptionNames.ColorSchemeValue : Swift.RawRepresentable {}
extension GXObjectsModel.GXImageType : Swift.Equatable {}
extension GXObjectsModel.GXImageType : Swift.Hashable {}
extension GXObjectsModel.GXImageType : Swift.RawRepresentable {}
extension GXObjectsModel.GXImageType : Swift.Sendable {}
extension GXObjectsModel.GXAlertUIMessageServiceRecoveryAttempterMode : Swift.Equatable {}
extension GXObjectsModel.GXAlertUIMessageServiceRecoveryAttempterMode : Swift.Hashable {}
extension GXObjectsModel.GXAlertUIMessageServiceRecoveryAttempterMode : Swift.RawRepresentable {}
extension GXObjectsModel.GXImage.ScaleSuffixInfo.Kind : Swift.Equatable {}
extension GXObjectsModel.GXImage.ScaleSuffixInfo.Kind : Swift.Hashable {}
extension GXObjectsModel.GXAttributeControlType : Swift.Equatable {}
extension GXObjectsModel.GXAttributeControlType : Swift.Hashable {}
extension GXObjectsModel.GXAttributeControlType : Swift.RawRepresentable {}
extension GXObjectsModel.GXAlertUIActionStyle : Swift.Equatable {}
extension GXObjectsModel.GXAlertUIActionStyle : Swift.Hashable {}
extension GXObjectsModel.GXAlertUIActionStyle : Swift.RawRepresentable {}
extension GXObjectsModel.GXImagesLocalization.ImageOrURL : Swift.Sendable {}
extension GXObjectsModel.GXImageUploadSizeType : Swift.Equatable {}
extension GXObjectsModel.GXImageUploadSizeType : Swift.Hashable {}
extension GXObjectsModel.GXImageUploadSizeType : Swift.RawRepresentable {}
extension GXObjectsModel.GXMiniAppInformation.CodingKeys : Swift.Equatable {}
extension GXObjectsModel.GXMiniAppInformation.CodingKeys : Swift.Hashable {}
extension GXObjectsModel.GXMiniAppInformation.CodingKeys : Swift.RawRepresentable {}
